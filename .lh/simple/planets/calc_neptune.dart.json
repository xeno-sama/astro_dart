{
    "sourceFile": "simple/planets/calc_neptune.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1641962521030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641963607976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'export_funcs.dart';\n \n-List<double> neptune(double N, double i, double a, double w, double e, double M,\n-    double xsun, double ysun, double d) {\n+List<double> dataNeptune(double N, double i, double a, double w, double e,\n+    double M, double xsun, double ysun, double d) {\n // Шаг 1 - вычислить E экцентрическую аномалию\n   var _E = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n   var E = _E -\n       (_E - degrees(e) * sin(radians(_E)) - M) / (1 - e * cos(radians(_E)));\n"
                },
                {
                    "date": 1641964223459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,4 +52,10 @@\n   var lon_topos = deg_360(degrees(_lon_topos));\n \n   return [lon_topos, lon_ecl];\n }\n+\n+\n+/* Примечание \n+все что закомментировал - только потому что мне |пока не требуется| выводить данные\n+LAT RA R DECL\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641964363014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,11 @@\n \n List<double> dataNeptune(double N, double i, double a, double w, double e,\n     double M, double xsun, double ysun, double d) {\n // Шаг 1 - вычислить E экцентрическую аномалию\n-  var _E = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n-  var E = _E -\n-      (_E - degrees(e) * sin(radians(_E)) - M) / (1 - e * cos(radians(_E)));\n+  var _e = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n+  var E = _e -\n+      (_e - degrees(e) * sin(radians(_e)) - M) / (1 - e * cos(radians(_e)));\n \n // Шаг 2 - вычислить прямоугольные координаты в плоскости лунной орбиты\n   var x = a * (cos(radians(E)) - e);\n   var y = a * sqrt(1 - e * e) * sin(radians(E));\n@@ -16,43 +16,43 @@\n   var _v = atan2(y, x);\n   var v = deg_360(degrees(_v)); // -> истинная аномалия в градусах\n \n // Шаг 4 - Теперь можно расчитать эклиптические координаты\n-  var x_eclip = r *\n+  var xEclip = r *\n       (cos(radians(N)) * cos(radians(v + w)) -\n           sin(radians(N)) * sin(radians(v + w)) * cos(radians(i)));\n-  var y_eclip = r *\n+  var yEclip = r *\n       (sin(radians(N)) * cos(radians(v + w)) +\n           cos(radians(N)) * sin(radians(v + w)) * cos(radians(i)));\n-  var z_eclip = r * sin(radians(v + w)) * sin(radians(i));\n+  // var zEclip = r * sin(radians(v + w)) * sin(radians(i));\n \n // Шаг 5 - конвертировать в эклиптические долготу/широту и расстояние\n // Это наши ГЕЛИОЦЕНТРИЧЕСКИЕ координаты\n-  var _long0 = atan2(y_eclip, x_eclip);\n-  var _lat0 = atan2(z_eclip, sqrt(x_eclip * x_eclip + y_eclip * y_eclip));\n-  var lon_ecl = deg_360(degrees(_long0));\n-  var lat = degrees(_lat0);\n-  var rs = sqrt(x_eclip * x_eclip + y_eclip * y_eclip + z_eclip * z_eclip);\n+  var _long0 = atan2(yEclip, xEclip);\n+  // var _lat0 = atan2(zEclip, sqrt(xEclip * xEclip + yEclip * yEclip));\n+  var lonEcl = deg_360(degrees(_long0));\n+  // var lat = degrees(_lat0);\n+  // var rs = sqrt(xEclip * xEclip + yEclip * yEclip + zEclip * zEclip);\n \n   // Шаг 6 - Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n-  var xgeoc = x_eclip + xsun; // *r;\n-  var ygeoc = y_eclip + ysun; // *r;\n-  var zgeoc = z_eclip; // *r;\n+  var xgeoc = xEclip + xsun; // *r;\n+  var ygeoc = yEclip + ysun; // *r;\n+  // var zgeoc = zEclip; // *r;\n \n   // теперь переводим прямоугольные координаты в сферические\n-  var oblecl = 23.4393 - 3.563E-7 * d;\n-  var xequat = xgeoc;\n-  var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n-  var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n+  // var oblecl = 23.4393 - 3.563E-7 * d;\n+  // var xequat = xgeoc;\n+  // var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n+  // var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n \n-  var RA = deg_360(degrees(atan2(yequat, xequat)));\n-  var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n-  var R = sqrt(xequat * xequat + yequat * yequat + zequat * zequat);\n+  // var RA = deg_360(degrees(atan2(yequat, xequat)));\n+  // var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n+  // var R = sqrt(xequat * xequat + yequat * yequat + zequat * zequat);\n \n-  var _lon_topos = atan2(ygeoc, xgeoc);\n-  var lon_topos = deg_360(degrees(_lon_topos));\n+  var _lonTopos = atan2(ygeoc, xgeoc);\n+  var lonTopos = deg_360(degrees(_lonTopos));\n \n-  return [lon_topos, lon_ecl];\n+  return [lonTopos, lonEcl];\n }\n \n \n /* Примечание \n"
                }
            ],
            "date": 1641962521030,
            "name": "Commit-0",
            "content": "import 'export_funcs.dart';\n\nList<double> neptune(double N, double i, double a, double w, double e, double M,\n    double xsun, double ysun, double d) {\n// Шаг 1 - вычислить E экцентрическую аномалию\n  var _E = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n  var E = _E -\n      (_E - degrees(e) * sin(radians(_E)) - M) / (1 - e * cos(radians(_E)));\n\n// Шаг 2 - вычислить прямоугольные координаты в плоскости лунной орбиты\n  var x = a * (cos(radians(E)) - e);\n  var y = a * sqrt(1 - e * e) * sin(radians(E));\n\n// Шаг 3 - конвертировать в расстояние и истинную аномалию\n  var r = sqrt(x * x + y * y); //расстояние\n  var _v = atan2(y, x);\n  var v = deg_360(degrees(_v)); // -> истинная аномалия в градусах\n\n// Шаг 4 - Теперь можно расчитать эклиптические координаты\n  var x_eclip = r *\n      (cos(radians(N)) * cos(radians(v + w)) -\n          sin(radians(N)) * sin(radians(v + w)) * cos(radians(i)));\n  var y_eclip = r *\n      (sin(radians(N)) * cos(radians(v + w)) +\n          cos(radians(N)) * sin(radians(v + w)) * cos(radians(i)));\n  var z_eclip = r * sin(radians(v + w)) * sin(radians(i));\n\n// Шаг 5 - конвертировать в эклиптические долготу/широту и расстояние\n// Это наши ГЕЛИОЦЕНТРИЧЕСКИЕ координаты\n  var _long0 = atan2(y_eclip, x_eclip);\n  var _lat0 = atan2(z_eclip, sqrt(x_eclip * x_eclip + y_eclip * y_eclip));\n  var lon_ecl = deg_360(degrees(_long0));\n  var lat = degrees(_lat0);\n  var rs = sqrt(x_eclip * x_eclip + y_eclip * y_eclip + z_eclip * z_eclip);\n\n  // Шаг 6 - Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n  var xgeoc = x_eclip + xsun; // *r;\n  var ygeoc = y_eclip + ysun; // *r;\n  var zgeoc = z_eclip; // *r;\n\n  // теперь переводим прямоугольные координаты в сферические\n  var oblecl = 23.4393 - 3.563E-7 * d;\n  var xequat = xgeoc;\n  var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n  var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n\n  var RA = deg_360(degrees(atan2(yequat, xequat)));\n  var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n  var R = sqrt(xequat * xequat + yequat * yequat + zequat * zequat);\n\n  var _lon_topos = atan2(ygeoc, xgeoc);\n  var lon_topos = deg_360(degrees(_lon_topos));\n\n  return [lon_topos, lon_ecl];\n}\n"
        }
    ]
}