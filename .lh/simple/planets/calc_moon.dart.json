{
    "sourceFile": "simple/planets/calc_moon.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1641962522812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641963427275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'export_funcs.dart';\n \n-List<double> moon(double N, double i, double a, double w, double e, double M,\n-    double Ms, double Ls, double LST, double d) {\n+List<double> dataMoon(double N, double i, double a, double w, double e,\n+    double M, double Ms, double Ls, double LST, double d) {\n   var LAT = 0.0;\n // Шаг 1 - вычислить E экцентрическую аномалию\n   var _E = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n   var E = _E -\n"
                },
                {
                    "date": 1641964223461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,4 +127,9 @@\n           sin(radians(g));\n \n   return [topRA, _lon];\n }\n+\n+/* Примечание \n+все что закомментировал - только потому что мне |пока не требуется| выводить данные\n+LAT RA R DECL\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641964990755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n import 'export_funcs.dart';\n \n List<double> dataMoon(double N, double i, double a, double w, double e,\n-    double M, double Ms, double Ls, double LST, double d) {\n+    double M, double mSun, double lSun, double lst, double d) {\n   var LAT = 0.0;\n // Шаг 1 - вычислить E экцентрическую аномалию\n-  var _E = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n-  var E = _E -\n-      (_E - degrees(e) * sin(radians(_E)) - M) / (1 - e * cos(radians(_E)));\n+  var _e = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n+  var E = _e -\n+      (_e - degrees(e) * sin(radians(_e)) - M) / (1 - e * cos(radians(_e)));\n \n // Шаг 2 - вычислить прямоугольные координаты в плоскости лунной орбиты\n   var x = a * (cos(radians(E)) - e);\n   var y = a * sqrt(1 - e * e) * sin(radians(E));\n@@ -17,74 +17,74 @@\n   var _v = atan2(y, x);\n   var v = deg_360(degrees(_v)); // -> истинная аномалия в градусах\n \n // Шаг 4 - Теперь можно расчитать эклиптические координаты\n-  var x_eclip = rast *\n+  var xEclip = rast *\n       (cos(radians(N)) * cos(radians(v + w)) -\n           sin(radians(N)) * sin(radians(v + w)) * cos(radians(i)));\n-  var y_eclip = rast *\n+  var yEclip = rast *\n       (sin(radians(N)) * cos(radians(v + w)) +\n           cos(radians(N)) * sin(radians(v + w)) * cos(radians(i)));\n-  var z_eclip = rast * sin(radians(v + w)) * sin(radians(i));\n+  var zEclip = rast * sin(radians(v + w)) * sin(radians(i));\n \n // Шаг 5 - конвертировать в эклиптические долготу/широту и расстояние (пока неточные)\n-  var _long0 = atan2(y_eclip, x_eclip);\n-  var _lat0 = atan2(z_eclip, sqrt(x_eclip * x_eclip + y_eclip * y_eclip));\n+  var _long0 = atan2(yEclip, xEclip);\n+  var _lat0 = atan2(zEclip, sqrt(xEclip * xEclip + yEclip * yEclip));\n   var _lon = deg_360(degrees(_long0));\n   var _lat = degrees(_lat0);\n-  var _r = sqrt(x_eclip * x_eclip + y_eclip * y_eclip + z_eclip * z_eclip);\n+  var _r = sqrt(xEclip * xEclip + yEclip * yEclip + zEclip * zEclip);\n \n   // # делаем уточняющий расчет координат луны c пертурбациями\n   // # Ls : Sun's  mean longitude: import\n   // # Ms : Sun's  mean anomaly: import\n-  var Mm = M; // Moon mean anomaly\n-  var Lm = deg_360(N + w + M); // Moon's mean longitude:\n-  var D = deg_360(Lm - Ls); // Moon's mean elongation\n-  var F = deg_360(Lm - N); // Moon's argument of latitude\n+  var mM = M; // Moon mean anomaly\n+  var lM = deg_360(N + w + M); // Moon's mean longitude:\n+  var D = deg_360(lM - lSun); // Moon's mean elongation\n+  var F = deg_360(lM - N); // Moon's argument of latitude\n \n   // # Perturbations in longitude (degrees):\n-  var pb_lon_1 = -1.274 * sin(radians(Mm - 2 * D));\n-  var pb_lon_2 = 0.658 * sin(radians(2 * D));\n-  var pb_lon_3 = -0.186 * sin(radians(Ms));\n-  var pb_lon_4 = -0.059 * sin(radians(2 * Mm - 2 * D));\n-  var pb_lon_5 = -0.057 * sin(radians(Mm - 2 * D + Ms));\n-  var pb_lon_6 = 0.053 * sin(radians(Mm + 2 * D));\n-  var pb_lon_7 = 0.046 * sin(radians(2 * D - Ms));\n-  var pb_lon_8 = 0.041 * sin(radians(Mm - Ms));\n-  var pb_lon_9 = -0.035 * sin(radians(D));\n-  var pb_lon_10 = -0.031 * sin(radians(Mm + Ms));\n-  var pb_lon_11 = -0.015 * sin(radians(2 * F - 2 * D));\n-  var pb_lon_12 = 0.011 * sin(radians(Mm - 4 * D));\n-  var pb_lon = pb_lon_1 +\n-      pb_lon_2 +\n-      pb_lon_3 +\n-      pb_lon_4 +\n-      pb_lon_5 +\n-      pb_lon_6 +\n-      pb_lon_7 +\n-      pb_lon_8 +\n-      pb_lon_9 +\n-      pb_lon_10 +\n-      pb_lon_11 +\n-      pb_lon_12;\n+  var pblon_1 = -1.274 * sin(radians(mM - 2 * D));\n+  var pblon_2 = 0.658 * sin(radians(2 * D));\n+  var pblon_3 = -0.186 * sin(radians(mSun));\n+  var pblon_4 = -0.059 * sin(radians(2 * mM - 2 * D));\n+  var pblon_5 = -0.057 * sin(radians(mM - 2 * D + mSun));\n+  var pblon_6 = 0.053 * sin(radians(mM + 2 * D));\n+  var pblon_7 = 0.046 * sin(radians(2 * D - mSun));\n+  var pblon_8 = 0.041 * sin(radians(mM - mSun));\n+  var pblon_9 = -0.035 * sin(radians(D));\n+  var pblon_10 = -0.031 * sin(radians(mM + mSun));\n+  var pblon_11 = -0.015 * sin(radians(2 * F - 2 * D));\n+  var pblon_12 = 0.011 * sin(radians(mM - 4 * D));\n+  var pblon = pblon_1 +\n+      pblon_2 +\n+      pblon_3 +\n+      pblon_4 +\n+      pblon_5 +\n+      pblon_6 +\n+      pblon_7 +\n+      pblon_8 +\n+      pblon_9 +\n+      pblon_10 +\n+      pblon_11 +\n+      pblon_12;\n \n   // Perturbations in latitude (degrees):\n-  var pb_lat_1 = -0.173 * sin(radians(F - 2 * D));\n-  var pb_lat_2 = -0.055 * sin(radians(Mm - F - 2 * D));\n-  var pb_lat_3 = -0.046 * sin(radians(Mm + F - 2 * D));\n-  var pb_lat_4 = 0.033 * sin(radians(F + 2 * D));\n-  var pb_lat_5 = 0.017 * sin(radians(2 * Mm + F));\n-  var pb_lat = pb_lat_1 + pb_lat_2 + pb_lat_3 + pb_lat_4 + pb_lat_5;\n+  var pblat_1 = -0.173 * sin(radians(F - 2 * D));\n+  var pblat_2 = -0.055 * sin(radians(mM - F - 2 * D));\n+  var pblat_3 = -0.046 * sin(radians(mM + F - 2 * D));\n+  var pblat_4 = 0.033 * sin(radians(F + 2 * D));\n+  var pblat_5 = 0.017 * sin(radians(2 * mM + F));\n+  var pblat = pblat_1 + pblat_2 + pblat_3 + pblat_4 + pblat_5;\n \n   // Perturbations in lunar distance (Earth radii):\n-  var pb_r_1 = -0.58 * cos(radians(Mm - 2 * D));\n-  var pb_r_2 = -0.46 * cos(radians(2 * D));\n-  var pb_r = pb_r_1 + pb_r_2;\n+  var pbR_1 = -0.58 * cos(radians(mM - 2 * D));\n+  var pbR_2 = -0.46 * cos(radians(2 * D));\n+  var pbR = pbR_1 + pbR_2;\n \n   // Окончательные точные координаты Луны\n-  var lon = _lon + pb_lon;\n-  var lat = _lat + pb_lat;\n-  var r = _r + pb_r; //######\n+  var lon = _lon + pblon;\n+  var lat = _lat + pblat;\n+  var r = _r + pbR; //######\n \n   // Расчет RA и Decl для луны\n   var oblecl = 23.4393 - 3.563E-7 * d;\n \n@@ -96,10 +96,10 @@\n   var xequat = xeclip;\n   var yequat = yeclip * cos(radians(oblecl)) - zeclip * sin(radians(oblecl));\n   var zequat = yeclip * sin(radians(oblecl)) + zeclip * cos(radians(oblecl));\n \n-  var RA = deg_360(degrees(atan2(yequat, xequat)));\n-  var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n+  var ra = deg_360(degrees(atan2(yequat, xequat)));\n+  var decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n \n   //\n   // ТОПОЦЕНТРИЧЕСКИЕ координаты Луны.\n   // мы уже взяли как пример LON = 15; LAT = 60\n@@ -110,22 +110,22 @@\n       LAT - 0.1924 * sin(radians(2 * LAT)); // геоцентрическая широта gclat\n   var rho =\n       0.99833 + 0.00167 * cos(radians(2 * LAT)); // дистанция от центра земли\n \n-  var HA = deg_360(LST - RA);\n+  var ha = deg_360(lst - ra);\n \n   // нам нужен вспомогательный угол\n-  var g = degrees(atan(tan(radians(gclat)) / cos(radians(HA))));\n+  // var g = degrees(atan(tan(radians(gclat)) / cos(radians(ha))));\n \n   // Теперь все готово к подсчету\n-  var topRA = deg_360(RA -\n-      mpar * rho * cos(radians(gclat)) * sin(radians(HA)) / cos(radians(Decl)));\n-  var topDecl = Decl -\n-      mpar *\n-          rho *\n-          sin(radians(gclat)) *\n-          sin(radians(g - Decl)) /\n-          sin(radians(g));\n+  var topRA = deg_360(ra -\n+      mpar * rho * cos(radians(gclat)) * sin(radians(ha)) / cos(radians(decl)));\n+  // var topDecl = decl -\n+  //     mpar *\n+  //         rho *\n+  //         sin(radians(gclat)) *\n+  //         sin(radians(g - decl)) /\n+  //         sin(radians(g));\n \n   return [topRA, _lon];\n }\n \n"
                },
                {
                    "date": 1641965308966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import 'export_funcs.dart';\n \n List<double> dataMoon(double N, double i, double a, double w, double e,\n     double M, double mSun, double lSun, double lst, double d) {\n-  var LAT = 0.0;\n+  var latitude = 0.0;\n // Шаг 1 - вычислить E экцентрическую аномалию\n   var _e = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n   var E = _e -\n       (_e - degrees(e) * sin(radians(_e)) - M) / (1 - e * cos(radians(_e)));\n@@ -105,12 +105,12 @@\n   // мы уже взяли как пример LON = 15; LAT = 60\n   // начнем с расчета лунного параллакса\n   var mpar = degrees(asin(1 / r));\n \n-  var gclat =\n-      LAT - 0.1924 * sin(radians(2 * LAT)); // геоцентрическая широта gclat\n-  var rho =\n-      0.99833 + 0.00167 * cos(radians(2 * LAT)); // дистанция от центра земли\n+  var gclat = latitude -\n+      0.1924 * sin(radians(2 * latitude)); // геоцентрическая широта gclat\n+  var rho = 0.99833 +\n+      0.00167 * cos(radians(2 * latitude)); // дистанция от центра земли\n \n   var ha = deg_360(lst - ra);\n \n   // нам нужен вспомогательный угол\n"
                }
            ],
            "date": 1641962522812,
            "name": "Commit-0",
            "content": "import 'export_funcs.dart';\n\nList<double> moon(double N, double i, double a, double w, double e, double M,\n    double Ms, double Ls, double LST, double d) {\n  var LAT = 0.0;\n// Шаг 1 - вычислить E экцентрическую аномалию\n  var _E = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n  var E = _E -\n      (_E - degrees(e) * sin(radians(_E)) - M) / (1 - e * cos(radians(_E)));\n\n// Шаг 2 - вычислить прямоугольные координаты в плоскости лунной орбиты\n  var x = a * (cos(radians(E)) - e);\n  var y = a * sqrt(1 - e * e) * sin(radians(E));\n\n// Шаг 3 - конвертировать в расстояние и истинную аномалию\n  var rast = sqrt(x * x + y * y); //расстояние\n  var _v = atan2(y, x);\n  var v = deg_360(degrees(_v)); // -> истинная аномалия в градусах\n\n// Шаг 4 - Теперь можно расчитать эклиптические координаты\n  var x_eclip = rast *\n      (cos(radians(N)) * cos(radians(v + w)) -\n          sin(radians(N)) * sin(radians(v + w)) * cos(radians(i)));\n  var y_eclip = rast *\n      (sin(radians(N)) * cos(radians(v + w)) +\n          cos(radians(N)) * sin(radians(v + w)) * cos(radians(i)));\n  var z_eclip = rast * sin(radians(v + w)) * sin(radians(i));\n\n// Шаг 5 - конвертировать в эклиптические долготу/широту и расстояние (пока неточные)\n  var _long0 = atan2(y_eclip, x_eclip);\n  var _lat0 = atan2(z_eclip, sqrt(x_eclip * x_eclip + y_eclip * y_eclip));\n  var _lon = deg_360(degrees(_long0));\n  var _lat = degrees(_lat0);\n  var _r = sqrt(x_eclip * x_eclip + y_eclip * y_eclip + z_eclip * z_eclip);\n\n  // # делаем уточняющий расчет координат луны c пертурбациями\n  // # Ls : Sun's  mean longitude: import\n  // # Ms : Sun's  mean anomaly: import\n  var Mm = M; // Moon mean anomaly\n  var Lm = deg_360(N + w + M); // Moon's mean longitude:\n  var D = deg_360(Lm - Ls); // Moon's mean elongation\n  var F = deg_360(Lm - N); // Moon's argument of latitude\n\n  // # Perturbations in longitude (degrees):\n  var pb_lon_1 = -1.274 * sin(radians(Mm - 2 * D));\n  var pb_lon_2 = 0.658 * sin(radians(2 * D));\n  var pb_lon_3 = -0.186 * sin(radians(Ms));\n  var pb_lon_4 = -0.059 * sin(radians(2 * Mm - 2 * D));\n  var pb_lon_5 = -0.057 * sin(radians(Mm - 2 * D + Ms));\n  var pb_lon_6 = 0.053 * sin(radians(Mm + 2 * D));\n  var pb_lon_7 = 0.046 * sin(radians(2 * D - Ms));\n  var pb_lon_8 = 0.041 * sin(radians(Mm - Ms));\n  var pb_lon_9 = -0.035 * sin(radians(D));\n  var pb_lon_10 = -0.031 * sin(radians(Mm + Ms));\n  var pb_lon_11 = -0.015 * sin(radians(2 * F - 2 * D));\n  var pb_lon_12 = 0.011 * sin(radians(Mm - 4 * D));\n  var pb_lon = pb_lon_1 +\n      pb_lon_2 +\n      pb_lon_3 +\n      pb_lon_4 +\n      pb_lon_5 +\n      pb_lon_6 +\n      pb_lon_7 +\n      pb_lon_8 +\n      pb_lon_9 +\n      pb_lon_10 +\n      pb_lon_11 +\n      pb_lon_12;\n\n  // Perturbations in latitude (degrees):\n  var pb_lat_1 = -0.173 * sin(radians(F - 2 * D));\n  var pb_lat_2 = -0.055 * sin(radians(Mm - F - 2 * D));\n  var pb_lat_3 = -0.046 * sin(radians(Mm + F - 2 * D));\n  var pb_lat_4 = 0.033 * sin(radians(F + 2 * D));\n  var pb_lat_5 = 0.017 * sin(radians(2 * Mm + F));\n  var pb_lat = pb_lat_1 + pb_lat_2 + pb_lat_3 + pb_lat_4 + pb_lat_5;\n\n  // Perturbations in lunar distance (Earth radii):\n  var pb_r_1 = -0.58 * cos(radians(Mm - 2 * D));\n  var pb_r_2 = -0.46 * cos(radians(2 * D));\n  var pb_r = pb_r_1 + pb_r_2;\n\n  // Окончательные точные координаты Луны\n  var lon = _lon + pb_lon;\n  var lat = _lat + pb_lat;\n  var r = _r + pb_r; //######\n\n  // Расчет RA и Decl для луны\n  var oblecl = 23.4393 - 3.563E-7 * d;\n\n  // To simplify we can set r = 1.0 - the result the same\n  var xeclip = cos(radians(lon)) * cos(radians(lat)); // *r;\n  var yeclip = sin(radians(lon)) * cos(radians(lat)); // *r;\n  var zeclip = sin(radians(lat)); // *r;\n\n  var xequat = xeclip;\n  var yequat = yeclip * cos(radians(oblecl)) - zeclip * sin(radians(oblecl));\n  var zequat = yeclip * sin(radians(oblecl)) + zeclip * cos(radians(oblecl));\n\n  var RA = deg_360(degrees(atan2(yequat, xequat)));\n  var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n\n  //\n  // ТОПОЦЕНТРИЧЕСКИЕ координаты Луны.\n  // мы уже взяли как пример LON = 15; LAT = 60\n  // начнем с расчета лунного параллакса\n  var mpar = degrees(asin(1 / r));\n\n  var gclat =\n      LAT - 0.1924 * sin(radians(2 * LAT)); // геоцентрическая широта gclat\n  var rho =\n      0.99833 + 0.00167 * cos(radians(2 * LAT)); // дистанция от центра земли\n\n  var HA = deg_360(LST - RA);\n\n  // нам нужен вспомогательный угол\n  var g = degrees(atan(tan(radians(gclat)) / cos(radians(HA))));\n\n  // Теперь все готово к подсчету\n  var topRA = deg_360(RA -\n      mpar * rho * cos(radians(gclat)) * sin(radians(HA)) / cos(radians(Decl)));\n  var topDecl = Decl -\n      mpar *\n          rho *\n          sin(radians(gclat)) *\n          sin(radians(g - Decl)) /\n          sin(radians(g));\n\n  return [topRA, _lon];\n}\n"
        }
    ]
}