{
    "sourceFile": "simple/planets/calc_pluto.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1641962519170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641963619506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import 'export_funcs.dart';\n \n-List<double> pluto(double xsun, double ysun, double d) {\n+List<double> dataPluto(double xsun, double ysun, double d) {\n // так как не существует теории - есть приближение валидное для 1800-2000гг\n // вспомогательные величины S P\n   var S = 50.03 + 0.033459652 * d;\n   var P = 238.95 + 0.003968789 * d;\n"
                },
                {
                    "date": 1641964223462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,4 +69,10 @@\n   var lon_topos = deg_360(degrees(_lon_topos));\n \n   return [lon_topos, lon_ecl];\n }\n+\n+\n+/* Примечание \n+все что закомментировал - только потому что мне |пока не требуется| выводить данные\n+LAT RA R DECL\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641964435546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   var S = 50.03 + 0.033459652 * d;\n   var P = 238.95 + 0.003968789 * d;\n \n // Шаг 1 - расчитать эклиптические координаты / lonecl - Гелиоцентрическая ккордината\n-  var lon_ecl = 238.9508 +\n+  var lonEcl = 238.9508 +\n       0.00400703 * d -\n       19.799 * sin(radians(P)) +\n       19.848 * cos(radians(P)) +\n       0.897 * sin(radians(2 * P)) -\n@@ -46,30 +46,30 @@\n       0.15 * sin(radians(3 * P)) -\n       0.14 * cos(radians(3 * P)); //расстояние\n \n // Шаг 2 Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n-  var xh = r * cos(radians(lon_ecl)) * cos(radians(lat));\n-  var yh = r * sin(radians(lon_ecl)) * cos(radians(lat));\n-  var zh = r * sin(radians(lat));\n+  var xh = r * cos(radians(lonEcl)) * cos(radians(lat));\n+  var yh = r * sin(radians(lonEcl)) * cos(radians(lat));\n+  // var zh = r * sin(radians(lat));\n \n   var xgeoc = xh + xsun;\n   var ygeoc = yh + ysun;\n-  var zgeoc = zh;\n+  // var zgeoc = zh;\n \n // Шаг 3 - теперь переводим прямоугольные координаты в сферические\n-  var oblecl = 23.4393 - 3.563E-7 * d;\n-  var xequat = xgeoc;\n-  var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n-  var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n+  // var oblecl = 23.4393 - 3.563E-7 * d;\n+  // var xequat = xgeoc;\n+  // var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n+  // var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n \n-  var RA = deg_360(degrees(atan2(yequat, xequat)));\n-  var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n-  var R = sqrt(xequat * xequat + yequat * yequat + zequat * zequat);\n+  // var RA = deg_360(degrees(atan2(yequat, xequat)));\n+  // var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n+  // var R = sqrt(xequat * xequat + yequat * yequat + zequat * zequat);\n \n-  var _lon_topos = atan2(ygeoc, xgeoc);\n-  var lon_topos = deg_360(degrees(_lon_topos));\n+  var _lonTopos = atan2(ygeoc, xgeoc);\n+  var lonTopos = deg_360(degrees(_lonTopos));\n \n-  return [lon_topos, lon_ecl];\n+  return [lonTopos, lonEcl];\n }\n \n \n /* Примечание \n"
                }
            ],
            "date": 1641962519170,
            "name": "Commit-0",
            "content": "import 'export_funcs.dart';\n\nList<double> pluto(double xsun, double ysun, double d) {\n// так как не существует теории - есть приближение валидное для 1800-2000гг\n// вспомогательные величины S P\n  var S = 50.03 + 0.033459652 * d;\n  var P = 238.95 + 0.003968789 * d;\n\n// Шаг 1 - расчитать эклиптические координаты / lonecl - Гелиоцентрическая ккордината\n  var lon_ecl = 238.9508 +\n      0.00400703 * d -\n      19.799 * sin(radians(P)) +\n      19.848 * cos(radians(P)) +\n      0.897 * sin(radians(2 * P)) -\n      4.956 * cos(radians(2 * P)) +\n      0.610 * sin(radians(3 * P)) +\n      1.211 * cos(radians(3 * P)) -\n      0.341 * sin(radians(4 * P)) -\n      0.190 * cos(radians(4 * P)) +\n      0.128 * sin(radians(5 * P)) -\n      0.034 * cos(radians(5 * P)) -\n      0.038 * sin(radians(6 * P)) +\n      0.031 * cos(radians(6 * P)) +\n      0.020 * sin(radians(S - P)) -\n      0.010 * cos(radians(S - P));\n  var lat = -3.9082 -\n      5.453 * sin(radians(P)) -\n      14.975 * cos(radians(P)) +\n      3.527 * sin(radians(2 * P)) +\n      1.673 * cos(radians(2 * P)) -\n      1.051 * sin(radians(3 * P)) +\n      0.328 * cos(radians(3 * P)) +\n      0.179 * sin(radians(4 * P)) -\n      0.292 * cos(radians(4 * P)) +\n      0.019 * sin(radians(5 * P)) +\n      0.100 * cos(radians(5 * P)) -\n      0.031 * sin(radians(6 * P)) -\n      0.026 * cos(radians(6 * P)) +\n      0.011 * cos(radians(S - P));\n\n  var r = 40.72 +\n      6.68 * sin(radians(P)) +\n      6.90 * cos(radians(P)) -\n      1.18 * sin(radians(2 * P)) -\n      0.03 * cos(radians(2 * P)) +\n      0.15 * sin(radians(3 * P)) -\n      0.14 * cos(radians(3 * P)); //расстояние\n\n// Шаг 2 Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n  var xh = r * cos(radians(lon_ecl)) * cos(radians(lat));\n  var yh = r * sin(radians(lon_ecl)) * cos(radians(lat));\n  var zh = r * sin(radians(lat));\n\n  var xgeoc = xh + xsun;\n  var ygeoc = yh + ysun;\n  var zgeoc = zh;\n\n// Шаг 3 - теперь переводим прямоугольные координаты в сферические\n  var oblecl = 23.4393 - 3.563E-7 * d;\n  var xequat = xgeoc;\n  var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n  var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n\n  var RA = deg_360(degrees(atan2(yequat, xequat)));\n  var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n  var R = sqrt(xequat * xequat + yequat * yequat + zequat * zequat);\n\n  var _lon_topos = atan2(ygeoc, xgeoc);\n  var lon_topos = deg_360(degrees(_lon_topos));\n\n  return [lon_topos, lon_ecl];\n}\n"
        }
    ]
}