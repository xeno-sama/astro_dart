{
    "sourceFile": "vsop/moon_js.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1641784111790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641786112457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,65 @@\n+// ignore_for_file: non_constant_identifier_names\n+\n import 'dart:math';\n \n-dynamic CalcMoon(time) {\n+const PI2 = 2 * pi;\n+const ARC = 3600 * (180 / pi);\n+const _PI2 = 2.0 * pi;\n+const KM_PER_AU = 1.4959787069098932e+8;\n+const _EARTH_FLATTENING = 0.996647180302104;\n+const _EARTH_EQUATORIAL_RADIUS_KM = 6378.1366;\n+const _EARTH_POLAR_RADIUS_KM = _EARTH_EQUATORIAL_RADIUS_KM * _EARTH_FLATTENING;\n+const _EARTH_EQUATORIAL_RADIUS_AU = _EARTH_EQUATORIAL_RADIUS_KM / KM_PER_AU;\n+const _ARC = 3600.0 * 180.0 / pi;\n \n+Map _Array1(int xmin, int xmax) {\n+  Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n+  return arr1;\n+}\n+\n+Map _Array2(int xmin, int xmax, int ymin, int ymax) {\n+  Map _arr1 = _Array1(ymin, ymax);\n+  Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n+  return arr2;\n+}\n+\n+class _moonpos {\n+  double lon, lat, dist;\n+  _moonpos(this.lon, this.lat, this.dist) {\n+    var geo_eclip_lon = lon;\n+    var geo_eclip_lat = lat;\n+    var distance_au = dist;\n+  }\n+\n+  dynamic CalcMoon(time) {\n+\n+    // double Sine(double phi) => sin(_PI2 * phi);\n+    double Frac(double x) => x - x.floor();\n+    \n+    var m,i;\n+    var array = [];\n     const T = time.tt / 36525;\n     dynamic DeclareArray1(xmin, xmax) {\n-        const array = [];\n-        var i;\n+        array = [];\n         for (i = 0; i <= xmax - xmin; ++i) {\n-            array.push(0);\n+            array.add(0); //was .push\n         }\n         return { min: xmin, array: array };\n     }\n     dynamic DeclareArray2(xmin, xmax, ymin, ymax) {\n-        const array = [];\n-        for (let i = 0; i <= xmax - xmin; ++i) {\n-            array.push(DeclareArray1(ymin, ymax));\n+        array = [];\n+        for (var i = 0; i <= xmax - xmin; ++i) {\n+            array.add(DeclareArray1(ymin, ymax));\n         }\n         return { min: xmin, array: array };\n     }\n     dynamic ArrayGet2(a, x, y) {\n-        const m = a.array[x - a.min];\n+        m = a.array[x - a.min];\n         return m.array[y - m.min];\n     }\n     dynamic ArraySet2(a, x, y, v) {\n-        const m = a.array[x - a.min];\n+        m = a.array[x - a.min];\n         m.array[y - m.min] = v;\n     }\n     var S, MAX, ARG, FAC, I, J, T2, DGAM, DLAM, N, GAM1C, SINPI, L0, L, LS, F, D, DL0, DL, DLS, DF, DD, DS;\n     var coArray = DeclareArray2(-6, 6, 1, 4);\n@@ -44,9 +79,9 @@\n     dynamic AddThe(c1, s1, c2, s2, func) {\n         func(c1 * c2 - s1 * s2, s1 * c2 + c1 * s2);\n     }\n     dynamic Sine(phi) {\n-        return Math.sin(PI2 * phi);\n+        return sin(PI2 * phi);\n     }\n     T2 = T * T;\n     DLAM = 0;\n     DS = 0;\n@@ -93,9 +128,9 @@\n                 ARG = D;\n                 MAX = 6;\n                 FAC = 1.0;\n                 break;\n-            default: throw `Internal error: I = ${I}`; // persuade TypeScript that ARG, ... are all initialized before use.\n+            default: throw 'Internal error: I = ${I}'; // persuade TypeScript that ARG, ... are all initialized before use.\n         }\n         SetCO(0, I, 1);\n         SetCO(1, I, cos(ARG) * FAC);\n         SetSI(0, I, 0);\n@@ -232,26 +267,27 @@\n     }\n     N = 0;\n     N += ADDN(-526.069, 0, 0, 1, -2);\n     N += ADDN(-3.352, 0, 0, 1, -4);\n-    N += ADDN(+44.297, +1, 0, 1, -2);\n-    N += ADDN(-6.000, +1, 0, 1, -4);\n-    N += ADDN(+20.599, -1, 0, 1, 0);\n+    N += ADDN(44.297, 1, 0, 1, -2);\n+    N += ADDN(-6.000, 1, 0, 1, -4);\n+    N += ADDN(20.599, -1, 0, 1, 0);\n     N += ADDN(-30.598, -1, 0, 1, -2);\n     N += ADDN(-24.649, -2, 0, 1, 0);\n     N += ADDN(-2.000, -2, 0, 1, -2);\n-    N += ADDN(-22.571, 0, +1, 1, -2);\n-    N += ADDN(+10.985, 0, -1, 1, -2);\n-    DLAM += (+0.82 * Sine(0.7736 - 62.5512 * T) + 0.31 * Sine(0.0466 - 125.1025 * T)\n+    N += ADDN(-22.571, 0, 1, 1, -2);\n+    N += ADDN(10.985, 0, -1, 1, -2);\n+    DLAM += (0.82 * Sine(0.7736 - 62.5512 * T) + 0.31 * Sine(0.0466 - 125.1025 * T)\n         + 0.35 * Sine(0.5785 - 25.1042 * T) + 0.66 * Sine(0.4591 + 1335.8075 * T)\n         + 0.64 * Sine(0.3130 - 91.5680 * T) + 1.14 * Sine(0.1480 + 1331.2898 * T)\n         + 0.21 * Sine(0.5918 + 1056.5859 * T) + 0.44 * Sine(0.5784 + 1322.8595 * T)\n         + 0.24 * Sine(0.2275 - 5.7374 * T) + 0.28 * Sine(0.2965 + 2.6929 * T)\n         + 0.33 * Sine(0.3132 + 6.3368 * T));\n     S = F + DS / ARC;\n-    var lat_seconds = (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * Math.sin(S) - 6.24 * Math.sin(3 * S) + N;\n+    var lat_seconds = (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * sin(S) - 6.24 * sin(3 * S) + N;\n     return {\n         var geo_eclip_lon: PI2 * Frac((L0 + DLAM / ARC) / PI2),\n         var geo_eclip_lat: (Math.PI / (180 * 3600)) * lat_seconds,\n         var distance_au: (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n     };\n+  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641786439281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,20 +10,12 @@\n const _EARTH_EQUATORIAL_RADIUS_KM = 6378.1366;\n const _EARTH_POLAR_RADIUS_KM = _EARTH_EQUATORIAL_RADIUS_KM * _EARTH_FLATTENING;\n const _EARTH_EQUATORIAL_RADIUS_AU = _EARTH_EQUATORIAL_RADIUS_KM / KM_PER_AU;\n const _ARC = 3600.0 * 180.0 / pi;\n+const EARTH_EQUATORIAL_RADIUS_KM = 6378.1366;\n+const EARTH_EQUATORIAL_RADIUS_AU = EARTH_EQUATORIAL_RADIUS_KM / KM_PER_AU;\n \n-Map _Array1(int xmin, int xmax) {\n-  Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n-  return arr1;\n-}\n \n-Map _Array2(int xmin, int xmax, int ymin, int ymax) {\n-  Map _arr1 = _Array1(ymin, ymax);\n-  Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n-  return arr2;\n-}\n-\n class _moonpos {\n   double lon, lat, dist;\n   _moonpos(this.lon, this.lat, this.dist) {\n     var geo_eclip_lon = lon;\n@@ -143,11 +135,12 @@\n             SetSI(-J, I, -SI(J, I));\n         }\n     }\n     dynamic Term(p, q, r, s) {\n+      var x, y, k;\n         var result = { x: 1, y: 0 };\n         var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n-        for (var k = 1; k <= 4; ++k)\n+        for (k = 1; k <= 4; ++k)\n             if (I[k] !== 0)\n                 AddThe(result.x, result.y, CO(I[k], k), SI(I[k], k), (c, s) => (result.x = c, result.y = s));\n         return result;\n     }\n@@ -283,11 +276,12 @@\n         + 0.24 * Sine(0.2275 - 5.7374 * T) + 0.28 * Sine(0.2965 + 2.6929 * T)\n         + 0.33 * Sine(0.3132 + 6.3368 * T));\n     S = F + DS / ARC;\n     var lat_seconds = (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * sin(S) - 6.24 * sin(3 * S) + N;\n+    var geo_eclip_lon, geo_eclip_lat, distance_au;\n     return {\n-        var geo_eclip_lon: PI2 * Frac((L0 + DLAM / ARC) / PI2),\n-        var geo_eclip_lat: (Math.PI / (180 * 3600)) * lat_seconds,\n-        var distance_au: (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n+        geo_eclip_lon: PI2 * Frac((L0 + DLAM / ARC) / PI2),\n+        geo_eclip_lat: (pi / (180 * 3600)) * lat_seconds,\n+        distance_au: (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n     };\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641786966682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// ignore_for_file: non_constant_identifier_names\n+// ignore_for_file: non_constant_identifier_names, constant_identifier_names, unused_element, unused_local_variable, camel_case_types, prefer_typing_uninitialized_variables\n \n import 'dart:math';\n \n const PI2 = 2 * pi;\n@@ -29,9 +29,9 @@\n     double Frac(double x) => x - x.floor();\n     \n     var m,i;\n     var array = [];\n-    const T = time.tt / 36525;\n+    var T = time.tt / 36525;\n     dynamic DeclareArray1(xmin, xmax) {\n         array = [];\n         for (i = 0; i <= xmax - xmin; ++i) {\n             array.add(0); //was .push\n@@ -136,13 +136,13 @@\n         }\n     }\n     dynamic Term(p, q, r, s) {\n       var x, y, k;\n-        var result = { x: 1, y: 0 };\n+        dynamic result = { x: 1, y: 0 };\n         var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n-        for (k = 1; k <= 4; ++k)\n-            if (I[k] !== 0)\n-                AddThe(result.x, result.y, CO(I[k], k), SI(I[k], k), (c, s) => (result.x = c, result.y = s));\n+        // for (k = 1; k <= 4; ++k)\n+            // if (I[k] != 0)\n+            //     {AddThe(result.x, result.y, CO(I[k], k), SI(I[k], k), (c, s) => (result.x = c, result.y = s));}\n         return result;\n     }\n     dynamic AddSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n         var result = Term(p, q, r, s);\n"
                },
                {
                    "date": 1641787245792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,12 +276,12 @@\n         + 0.24 * Sine(0.2275 - 5.7374 * T) + 0.28 * Sine(0.2965 + 2.6929 * T)\n         + 0.33 * Sine(0.3132 + 6.3368 * T));\n     S = F + DS / ARC;\n     var lat_seconds = (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * sin(S) - 6.24 * sin(3 * S) + N;\n-    var geo_eclip_lon, geo_eclip_lat, distance_au;\n-    return {\n-        geo_eclip_lon: PI2 * Frac((L0 + DLAM / ARC) / PI2),\n-        geo_eclip_lat: (pi / (180 * 3600)) * lat_seconds,\n-        distance_au: (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n-    };\n+    \n+    var geo_eclip_lon = PI2 * Frac((L0 + DLAM / ARC) / PI2);\n+    var geo_eclip_lat = (pi / (180 * 3600)) * lat_seconds;\n+    var distance_au = (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI);\n+    \n+    return _moonpos(geo_eclip_lon, geo_eclip_lat, distance_au);\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641788285124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// ignore_for_file: non_constant_identifier_names, constant_identifier_names, unused_element, unused_local_variable, camel_case_types, prefer_typing_uninitialized_variables\n+// ignore_for_file: non_constant_identifier_names, constant_identifier_names, unused_element, unused_local_variable, camel_case_types, prefer_typing_uninitialized_variables, unnecessary_brace_in_string_interps\n \n import 'dart:math';\n \n const PI2 = 2 * pi;\n@@ -13,9 +13,8 @@\n const _ARC = 3600.0 * 180.0 / pi;\n const EARTH_EQUATORIAL_RADIUS_KM = 6378.1366;\n const EARTH_EQUATORIAL_RADIUS_AU = EARTH_EQUATORIAL_RADIUS_KM / KM_PER_AU;\n \n-\n class _moonpos {\n   double lon, lat, dist;\n   _moonpos(this.lon, this.lat, this.dist) {\n     var geo_eclip_lon = lon;\n@@ -23,58 +22,89 @@\n     var distance_au = dist;\n   }\n \n   dynamic CalcMoon(time) {\n-\n     // double Sine(double phi) => sin(_PI2 * phi);\n     double Frac(double x) => x - x.floor();\n-    \n-    var m,i;\n+\n+    var m, i;\n     var array = [];\n     var T = time.tt / 36525;\n     dynamic DeclareArray1(xmin, xmax) {\n-        array = [];\n-        for (i = 0; i <= xmax - xmin; ++i) {\n-            array.add(0); //was .push\n-        }\n-        return { min: xmin, array: array };\n+      array = [];\n+      for (i = 0; i <= xmax - xmin; ++i) {\n+        array.add(0); //was .push\n+      }\n+      return {min: xmin, array: array};\n     }\n+\n     dynamic DeclareArray2(xmin, xmax, ymin, ymax) {\n-        array = [];\n-        for (var i = 0; i <= xmax - xmin; ++i) {\n-            array.add(DeclareArray1(ymin, ymax));\n-        }\n-        return { min: xmin, array: array };\n+      array = [];\n+      for (var i = 0; i <= xmax - xmin; ++i) {\n+        array.add(DeclareArray1(ymin, ymax));\n+      }\n+      return {min: xmin, array: array};\n     }\n+\n     dynamic ArrayGet2(a, x, y) {\n-        m = a.array[x - a.min];\n-        return m.array[y - m.min];\n+      m = a.array[x - a.min];\n+      return m.array[y - m.min];\n     }\n+\n     dynamic ArraySet2(a, x, y, v) {\n-        m = a.array[x - a.min];\n-        m.array[y - m.min] = v;\n+      m = a.array[x - a.min];\n+      m.array[y - m.min] = v;\n     }\n-    var S, MAX, ARG, FAC, I, J, T2, DGAM, DLAM, N, GAM1C, SINPI, L0, L, LS, F, D, DL0, DL, DLS, DF, DD, DS;\n+\n+    var S,\n+        MAX,\n+        ARG,\n+        FAC,\n+        I,\n+        J,\n+        T2,\n+        DGAM,\n+        DLAM,\n+        N,\n+        GAM1C,\n+        SINPI,\n+        L0,\n+        L,\n+        LS,\n+        F,\n+        D,\n+        DL0,\n+        DL,\n+        DLS,\n+        DF,\n+        DD,\n+        DS;\n     var coArray = DeclareArray2(-6, 6, 1, 4);\n     var siArray = DeclareArray2(-6, 6, 1, 4);\n     dynamic CO(x, y) {\n-        return ArrayGet2(coArray, x, y);\n+      return ArrayGet2(coArray, x, y);\n     }\n+\n     dynamic SI(x, y) {\n-        return ArrayGet2(siArray, x, y);\n+      return ArrayGet2(siArray, x, y);\n     }\n+\n     dynamic SetCO(x, y, v) {\n-        return ArraySet2(coArray, x, y, v);\n+      return ArraySet2(coArray, x, y, v);\n     }\n+\n     dynamic SetSI(x, y, v) {\n-        return ArraySet2(siArray, x, y, v);\n+      return ArraySet2(siArray, x, y, v);\n     }\n+\n     dynamic AddThe(c1, s1, c2, s2, func) {\n-        func(c1 * c2 - s1 * s2, s1 * c2 + c1 * s2);\n+      func(c1 * c2 - s1 * s2, s1 * c2 + c1 * s2);\n     }\n+\n     dynamic Sine(phi) {\n-        return sin(PI2 * phi);\n+      return sin(PI2 * phi);\n     }\n+\n     T2 = T * T;\n     DLAM = 0;\n     DS = 0;\n     GAM1C = 0;\n@@ -85,73 +115,84 @@\n     var S4 = Sine(0.34734 - 5.37261 * T);\n     var S5 = Sine(0.10498 - 5.37899 * T);\n     var S6 = Sine(0.42681 - 0.41855 * T);\n     var S7 = Sine(0.14943 - 5.37511 * T);\n-    DL0 = 0.84 * S1 + 0.31 * S2 + 14.27 * S3 + 7.26 * S4 + 0.28 * S5 + 0.24 * S6;\n+    DL0 =\n+        0.84 * S1 + 0.31 * S2 + 14.27 * S3 + 7.26 * S4 + 0.28 * S5 + 0.24 * S6;\n     DL = 2.94 * S1 + 0.31 * S2 + 14.27 * S3 + 9.34 * S4 + 1.12 * S5 + 0.83 * S6;\n     DLS = -6.40 * S1 - 1.89 * S6;\n-    DF = 0.21 * S1 + 0.31 * S2 + 14.27 * S3 - 88.70 * S4 - 15.30 * S5 + 0.24 * S6 - 1.86 * S7;\n+    DF = 0.21 * S1 +\n+        0.31 * S2 +\n+        14.27 * S3 -\n+        88.70 * S4 -\n+        15.30 * S5 +\n+        0.24 * S6 -\n+        1.86 * S7;\n     DD = DL0 - DLS;\n-    DGAM = (-3332E-9 * Sine(0.59734 - 5.37261 * T)\n-        - 539E-9 * Sine(0.35498 - 5.37899 * T)\n-        - 64E-9 * Sine(0.39943 - 5.37511 * T));\n-    L0 = PI2 * Frac(0.60643382 + 1336.85522467 * T - 0.00000313 * T2) + DL0 / ARC;\n+    DGAM = (-3332E-9 * Sine(0.59734 - 5.37261 * T) -\n+        539E-9 * Sine(0.35498 - 5.37899 * T) -\n+        64E-9 * Sine(0.39943 - 5.37511 * T));\n+    L0 = PI2 * Frac(0.60643382 + 1336.85522467 * T - 0.00000313 * T2) +\n+        DL0 / ARC;\n     L = PI2 * Frac(0.37489701 + 1325.55240982 * T + 0.00002565 * T2) + DL / ARC;\n     LS = PI2 * Frac(0.99312619 + 99.99735956 * T - 0.00000044 * T2) + DLS / ARC;\n     F = PI2 * Frac(0.25909118 + 1342.22782980 * T - 0.00000892 * T2) + DF / ARC;\n     D = PI2 * Frac(0.82736186 + 1236.85308708 * T - 0.00000397 * T2) + DD / ARC;\n     for (I = 1; I <= 4; ++I) {\n-        switch (I) {\n-            case 1:\n-                ARG = L;\n-                MAX = 4;\n-                FAC = 1.000002208;\n-                break;\n-            case 2:\n-                ARG = LS;\n-                MAX = 3;\n-                FAC = 0.997504612 - 0.002495388 * T;\n-                break;\n-            case 3:\n-                ARG = F;\n-                MAX = 4;\n-                FAC = 1.000002708 + 139.978 * DGAM;\n-                break;\n-            case 4:\n-                ARG = D;\n-                MAX = 6;\n-                FAC = 1.0;\n-                break;\n-            default: throw 'Internal error: I = ${I}'; // persuade TypeScript that ARG, ... are all initialized before use.\n-        }\n-        SetCO(0, I, 1);\n-        SetCO(1, I, cos(ARG) * FAC);\n-        SetSI(0, I, 0);\n-        SetSI(1, I, sin(ARG) * FAC);\n-        for (J = 2; J <= MAX; ++J) {\n-            AddThe(CO(J - 1, I), SI(J - 1, I), CO(1, I), SI(1, I), (c, s) => (SetCO(J, I, c), SetSI(J, I, s)));\n-        }\n-        for (J = 1; J <= MAX; ++J) {\n-            SetCO(-J, I, CO(J, I));\n-            SetSI(-J, I, -SI(J, I));\n-        }\n+      switch (I) {\n+        case 1:\n+          ARG = L;\n+          MAX = 4;\n+          FAC = 1.000002208;\n+          break;\n+        case 2:\n+          ARG = LS;\n+          MAX = 3;\n+          FAC = 0.997504612 - 0.002495388 * T;\n+          break;\n+        case 3:\n+          ARG = F;\n+          MAX = 4;\n+          FAC = 1.000002708 + 139.978 * DGAM;\n+          break;\n+        case 4:\n+          ARG = D;\n+          MAX = 6;\n+          FAC = 1.0;\n+          break;\n+        default:\n+          throw 'Internal error: I = ${I}'; // persuade TypeScript that ARG, ... are all initialized before use.\n+      }\n+      SetCO(0, I, 1);\n+      SetCO(1, I, cos(ARG) * FAC);\n+      SetSI(0, I, 0);\n+      SetSI(1, I, sin(ARG) * FAC);\n+      for (J = 2; J <= MAX; ++J) {\n+        // AddThe(CO(J - 1, I), SI(J - 1, I), CO(1, I), SI(1, I), (c, s) => (SetCO(J, I, c), SetSI(J, I, s)));\n+      }\n+      for (J = 1; J <= MAX; ++J) {\n+        SetCO(-J, I, CO(J, I));\n+        SetSI(-J, I, -SI(J, I));\n+      }\n     }\n     dynamic Term(p, q, r, s) {\n       var x, y, k;\n-        dynamic result = { x: 1, y: 0 };\n-        var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n-        // for (k = 1; k <= 4; ++k)\n-            // if (I[k] != 0)\n-            //     {AddThe(result.x, result.y, CO(I[k], k), SI(I[k], k), (c, s) => (result.x = c, result.y = s));}\n-        return result;\n+      dynamic result = {x: 1, y: 0};\n+      var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n+      // for (k = 1; k <= 4; ++k)\n+      // if (I[k] != 0)\n+      //     {AddThe(result.x, result.y, CO(I[k], k), SI(I[k], k), (c, s) => (result.x = c, result.y = s));}\n+      return result;\n     }\n+\n     dynamic AddSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n-        var result = Term(p, q, r, s);\n-        DLAM += coeffl * result.y;\n-        DS += coeffs * result.y;\n-        GAM1C += coeffg * result.x;\n-        SINPI += coeffp * result.x;\n+      var result = Term(p, q, r, s);\n+      DLAM += coeffl * result.y;\n+      DS += coeffs * result.y;\n+      GAM1C += coeffg * result.x;\n+      SINPI += coeffp * result.x;\n     }\n+\n     AddSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n     AddSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n     AddSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);\n     AddSol(-125.1540, -112.7900, -0.7250, -0.9781, 0, 0, 0, 1);\n@@ -255,10 +296,11 @@\n     AddSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n     AddSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n     AddSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n     dynamic ADDN(coeffn, p, q, r, s) {\n-        return coeffn * Term(p, q, r, s).y;\n+      return coeffn * Term(p, q, r, s).y;\n     }\n+\n     N = 0;\n     N += ADDN(-526.069, 0, 0, 1, -2);\n     N += ADDN(-3.352, 0, 0, 1, -4);\n     N += ADDN(44.297, 1, 0, 1, -2);\n@@ -268,20 +310,29 @@\n     N += ADDN(-24.649, -2, 0, 1, 0);\n     N += ADDN(-2.000, -2, 0, 1, -2);\n     N += ADDN(-22.571, 0, 1, 1, -2);\n     N += ADDN(10.985, 0, -1, 1, -2);\n-    DLAM += (0.82 * Sine(0.7736 - 62.5512 * T) + 0.31 * Sine(0.0466 - 125.1025 * T)\n-        + 0.35 * Sine(0.5785 - 25.1042 * T) + 0.66 * Sine(0.4591 + 1335.8075 * T)\n-        + 0.64 * Sine(0.3130 - 91.5680 * T) + 1.14 * Sine(0.1480 + 1331.2898 * T)\n-        + 0.21 * Sine(0.5918 + 1056.5859 * T) + 0.44 * Sine(0.5784 + 1322.8595 * T)\n-        + 0.24 * Sine(0.2275 - 5.7374 * T) + 0.28 * Sine(0.2965 + 2.6929 * T)\n-        + 0.33 * Sine(0.3132 + 6.3368 * T));\n+    DLAM += (0.82 * Sine(0.7736 - 62.5512 * T) +\n+        0.31 * Sine(0.0466 - 125.1025 * T) +\n+        0.35 * Sine(0.5785 - 25.1042 * T) +\n+        0.66 * Sine(0.4591 + 1335.8075 * T) +\n+        0.64 * Sine(0.3130 - 91.5680 * T) +\n+        1.14 * Sine(0.1480 + 1331.2898 * T) +\n+        0.21 * Sine(0.5918 + 1056.5859 * T) +\n+        0.44 * Sine(0.5784 + 1322.8595 * T) +\n+        0.24 * Sine(0.2275 - 5.7374 * T) +\n+        0.28 * Sine(0.2965 + 2.6929 * T) +\n\\ No newline at end of file\n+        0.33 * Sine(0.3132 + 6.3368 * T));\n     S = F + DS / ARC;\n-    var lat_seconds = (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * sin(S) - 6.24 * sin(3 * S) + N;\n-    \n+    var lat_seconds =\n+        (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * sin(S) -\n+            6.24 * sin(3 * S) +\n+            N;\n+\n     var geo_eclip_lon = PI2 * Frac((L0 + DLAM / ARC) / PI2);\n     var geo_eclip_lat = (pi / (180 * 3600)) * lat_seconds;\n-    var distance_au = (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI);\n-    \n+    var distance_au =\n+        (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI);\n+\n     return _moonpos(geo_eclip_lon, geo_eclip_lat, distance_au);\n   }\n-}\n+}\n"
                }
            ],
            "date": 1641784111790,
            "name": "Commit-0",
            "content": "import 'dart:math';\n\ndynamic CalcMoon(time) {\n\n    const T = time.tt / 36525;\n    dynamic DeclareArray1(xmin, xmax) {\n        const array = [];\n        var i;\n        for (i = 0; i <= xmax - xmin; ++i) {\n            array.push(0);\n        }\n        return { min: xmin, array: array };\n    }\n    dynamic DeclareArray2(xmin, xmax, ymin, ymax) {\n        const array = [];\n        for (let i = 0; i <= xmax - xmin; ++i) {\n            array.push(DeclareArray1(ymin, ymax));\n        }\n        return { min: xmin, array: array };\n    }\n    dynamic ArrayGet2(a, x, y) {\n        const m = a.array[x - a.min];\n        return m.array[y - m.min];\n    }\n    dynamic ArraySet2(a, x, y, v) {\n        const m = a.array[x - a.min];\n        m.array[y - m.min] = v;\n    }\n    var S, MAX, ARG, FAC, I, J, T2, DGAM, DLAM, N, GAM1C, SINPI, L0, L, LS, F, D, DL0, DL, DLS, DF, DD, DS;\n    var coArray = DeclareArray2(-6, 6, 1, 4);\n    var siArray = DeclareArray2(-6, 6, 1, 4);\n    dynamic CO(x, y) {\n        return ArrayGet2(coArray, x, y);\n    }\n    dynamic SI(x, y) {\n        return ArrayGet2(siArray, x, y);\n    }\n    dynamic SetCO(x, y, v) {\n        return ArraySet2(coArray, x, y, v);\n    }\n    dynamic SetSI(x, y, v) {\n        return ArraySet2(siArray, x, y, v);\n    }\n    dynamic AddThe(c1, s1, c2, s2, func) {\n        func(c1 * c2 - s1 * s2, s1 * c2 + c1 * s2);\n    }\n    dynamic Sine(phi) {\n        return Math.sin(PI2 * phi);\n    }\n    T2 = T * T;\n    DLAM = 0;\n    DS = 0;\n    GAM1C = 0;\n    SINPI = 3422.7000;\n    var S1 = Sine(0.19833 + 0.05611 * T);\n    var S2 = Sine(0.27869 + 0.04508 * T);\n    var S3 = Sine(0.16827 - 0.36903 * T);\n    var S4 = Sine(0.34734 - 5.37261 * T);\n    var S5 = Sine(0.10498 - 5.37899 * T);\n    var S6 = Sine(0.42681 - 0.41855 * T);\n    var S7 = Sine(0.14943 - 5.37511 * T);\n    DL0 = 0.84 * S1 + 0.31 * S2 + 14.27 * S3 + 7.26 * S4 + 0.28 * S5 + 0.24 * S6;\n    DL = 2.94 * S1 + 0.31 * S2 + 14.27 * S3 + 9.34 * S4 + 1.12 * S5 + 0.83 * S6;\n    DLS = -6.40 * S1 - 1.89 * S6;\n    DF = 0.21 * S1 + 0.31 * S2 + 14.27 * S3 - 88.70 * S4 - 15.30 * S5 + 0.24 * S6 - 1.86 * S7;\n    DD = DL0 - DLS;\n    DGAM = (-3332E-9 * Sine(0.59734 - 5.37261 * T)\n        - 539E-9 * Sine(0.35498 - 5.37899 * T)\n        - 64E-9 * Sine(0.39943 - 5.37511 * T));\n    L0 = PI2 * Frac(0.60643382 + 1336.85522467 * T - 0.00000313 * T2) + DL0 / ARC;\n    L = PI2 * Frac(0.37489701 + 1325.55240982 * T + 0.00002565 * T2) + DL / ARC;\n    LS = PI2 * Frac(0.99312619 + 99.99735956 * T - 0.00000044 * T2) + DLS / ARC;\n    F = PI2 * Frac(0.25909118 + 1342.22782980 * T - 0.00000892 * T2) + DF / ARC;\n    D = PI2 * Frac(0.82736186 + 1236.85308708 * T - 0.00000397 * T2) + DD / ARC;\n    for (I = 1; I <= 4; ++I) {\n        switch (I) {\n            case 1:\n                ARG = L;\n                MAX = 4;\n                FAC = 1.000002208;\n                break;\n            case 2:\n                ARG = LS;\n                MAX = 3;\n                FAC = 0.997504612 - 0.002495388 * T;\n                break;\n            case 3:\n                ARG = F;\n                MAX = 4;\n                FAC = 1.000002708 + 139.978 * DGAM;\n                break;\n            case 4:\n                ARG = D;\n                MAX = 6;\n                FAC = 1.0;\n                break;\n            default: throw `Internal error: I = ${I}`; // persuade TypeScript that ARG, ... are all initialized before use.\n        }\n        SetCO(0, I, 1);\n        SetCO(1, I, cos(ARG) * FAC);\n        SetSI(0, I, 0);\n        SetSI(1, I, sin(ARG) * FAC);\n        for (J = 2; J <= MAX; ++J) {\n            AddThe(CO(J - 1, I), SI(J - 1, I), CO(1, I), SI(1, I), (c, s) => (SetCO(J, I, c), SetSI(J, I, s)));\n        }\n        for (J = 1; J <= MAX; ++J) {\n            SetCO(-J, I, CO(J, I));\n            SetSI(-J, I, -SI(J, I));\n        }\n    }\n    dynamic Term(p, q, r, s) {\n        var result = { x: 1, y: 0 };\n        var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n        for (var k = 1; k <= 4; ++k)\n            if (I[k] !== 0)\n                AddThe(result.x, result.y, CO(I[k], k), SI(I[k], k), (c, s) => (result.x = c, result.y = s));\n        return result;\n    }\n    dynamic AddSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n        var result = Term(p, q, r, s);\n        DLAM += coeffl * result.y;\n        DS += coeffs * result.y;\n        GAM1C += coeffg * result.x;\n        SINPI += coeffp * result.x;\n    }\n    AddSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n    AddSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n    AddSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);\n    AddSol(-125.1540, -112.7900, -0.7250, -0.9781, 0, 0, 0, 1);\n    AddSol(1.9790, 6.9800, -0.4450, 0.0433, 1, 0, 0, 4);\n    AddSol(191.9530, 192.7200, 0.0290, 3.0861, 1, 0, 0, 2);\n    AddSol(-8.4660, -13.5100, 0.4550, -0.1093, 1, 0, 0, 1);\n    AddSol(22639.5000, 22609.0700, 0.0790, 186.5398, 1, 0, 0, 0);\n    AddSol(18.6090, 3.5900, -0.0940, 0.0118, 1, 0, 0, -1);\n    AddSol(-4586.4650, -4578.1300, -0.0770, 34.3117, 1, 0, 0, -2);\n    AddSol(3.2150, 5.4400, 0.1920, -0.0386, 1, 0, 0, -3);\n    AddSol(-38.4280, -38.6400, 0.0010, 0.6008, 1, 0, 0, -4);\n    AddSol(-0.3930, -1.4300, -0.0920, 0.0086, 1, 0, 0, -6);\n    AddSol(-0.2890, -1.5900, 0.1230, -0.0053, 0, 1, 0, 4);\n    AddSol(-24.4200, -25.1000, 0.0400, -0.3000, 0, 1, 0, 2);\n    AddSol(18.0230, 17.9300, 0.0070, 0.1494, 0, 1, 0, 1);\n    AddSol(-668.1460, -126.9800, -1.3020, -0.3997, 0, 1, 0, 0);\n    AddSol(0.5600, 0.3200, -0.0010, -0.0037, 0, 1, 0, -1);\n    AddSol(-165.1450, -165.0600, 0.0540, 1.9178, 0, 1, 0, -2);\n    AddSol(-1.8770, -6.4600, -0.4160, 0.0339, 0, 1, 0, -4);\n    AddSol(0.2130, 1.0200, -0.0740, 0.0054, 2, 0, 0, 4);\n    AddSol(14.3870, 14.7800, -0.0170, 0.2833, 2, 0, 0, 2);\n    AddSol(-0.5860, -1.2000, 0.0540, -0.0100, 2, 0, 0, 1);\n    AddSol(769.0160, 767.9600, 0.1070, 10.1657, 2, 0, 0, 0);\n    AddSol(1.7500, 2.0100, -0.0180, 0.0155, 2, 0, 0, -1);\n    AddSol(-211.6560, -152.5300, 5.6790, -0.3039, 2, 0, 0, -2);\n    AddSol(1.2250, 0.9100, -0.0300, -0.0088, 2, 0, 0, -3);\n    AddSol(-30.7730, -34.0700, -0.3080, 0.3722, 2, 0, 0, -4);\n    AddSol(-0.5700, -1.4000, -0.0740, 0.0109, 2, 0, 0, -6);\n    AddSol(-2.9210, -11.7500, 0.7870, -0.0484, 1, 1, 0, 2);\n    AddSol(1.2670, 1.5200, -0.0220, 0.0164, 1, 1, 0, 1);\n    AddSol(-109.6730, -115.1800, 0.4610, -0.9490, 1, 1, 0, 0);\n    AddSol(-205.9620, -182.3600, 2.0560, 1.4437, 1, 1, 0, -2);\n    AddSol(0.2330, 0.3600, 0.0120, -0.0025, 1, 1, 0, -3);\n    AddSol(-4.3910, -9.6600, -0.4710, 0.0673, 1, 1, 0, -4);\n    AddSol(0.2830, 1.5300, -0.1110, 0.0060, 1, -1, 0, 4);\n    AddSol(14.5770, 31.7000, -1.5400, 0.2302, 1, -1, 0, 2);\n    AddSol(147.6870, 138.7600, 0.6790, 1.1528, 1, -1, 0, 0);\n    AddSol(-1.0890, 0.5500, 0.0210, 0.0000, 1, -1, 0, -1);\n    AddSol(28.4750, 23.5900, -0.4430, -0.2257, 1, -1, 0, -2);\n    AddSol(-0.2760, -0.3800, -0.0060, -0.0036, 1, -1, 0, -3);\n    AddSol(0.6360, 2.2700, 0.1460, -0.0102, 1, -1, 0, -4);\n    AddSol(-0.1890, -1.6800, 0.1310, -0.0028, 0, 2, 0, 2);\n    AddSol(-7.4860, -0.6600, -0.0370, -0.0086, 0, 2, 0, 0);\n    AddSol(-8.0960, -16.3500, -0.7400, 0.0918, 0, 2, 0, -2);\n    AddSol(-5.7410, -0.0400, 0.0000, -0.0009, 0, 0, 2, 2);\n    AddSol(0.2550, 0.0000, 0.0000, 0.0000, 0, 0, 2, 1);\n    AddSol(-411.6080, -0.2000, 0.0000, -0.0124, 0, 0, 2, 0);\n    AddSol(0.5840, 0.8400, 0.0000, 0.0071, 0, 0, 2, -1);\n    AddSol(-55.1730, -52.1400, 0.0000, -0.1052, 0, 0, 2, -2);\n    AddSol(0.2540, 0.2500, 0.0000, -0.0017, 0, 0, 2, -3);\n    AddSol(0.0250, -1.6700, 0.0000, 0.0031, 0, 0, 2, -4);\n    AddSol(1.0600, 2.9600, -0.1660, 0.0243, 3, 0, 0, 2);\n    AddSol(36.1240, 50.6400, -1.3000, 0.6215, 3, 0, 0, 0);\n    AddSol(-13.1930, -16.4000, 0.2580, -0.1187, 3, 0, 0, -2);\n    AddSol(-1.1870, -0.7400, 0.0420, 0.0074, 3, 0, 0, -4);\n    AddSol(-0.2930, -0.3100, -0.0020, 0.0046, 3, 0, 0, -6);\n    AddSol(-0.2900, -1.4500, 0.1160, -0.0051, 2, 1, 0, 2);\n    AddSol(-7.6490, -10.5600, 0.2590, -0.1038, 2, 1, 0, 0);\n    AddSol(-8.6270, -7.5900, 0.0780, -0.0192, 2, 1, 0, -2);\n    AddSol(-2.7400, -2.5400, 0.0220, 0.0324, 2, 1, 0, -4);\n    AddSol(1.1810, 3.3200, -0.2120, 0.0213, 2, -1, 0, 2);\n    AddSol(9.7030, 11.6700, -0.1510, 0.1268, 2, -1, 0, 0);\n    AddSol(-0.3520, -0.3700, 0.0010, -0.0028, 2, -1, 0, -1);\n    AddSol(-2.4940, -1.1700, -0.0030, -0.0017, 2, -1, 0, -2);\n    AddSol(0.3600, 0.2000, -0.0120, -0.0043, 2, -1, 0, -4);\n    AddSol(-1.1670, -1.2500, 0.0080, -0.0106, 1, 2, 0, 0);\n    AddSol(-7.4120, -6.1200, 0.1170, 0.0484, 1, 2, 0, -2);\n    AddSol(-0.3110, -0.6500, -0.0320, 0.0044, 1, 2, 0, -4);\n    AddSol(0.7570, 1.8200, -0.1050, 0.0112, 1, -2, 0, 2);\n    AddSol(2.5800, 2.3200, 0.0270, 0.0196, 1, -2, 0, 0);\n    AddSol(2.5330, 2.4000, -0.0140, -0.0212, 1, -2, 0, -2);\n    AddSol(-0.3440, -0.5700, -0.0250, 0.0036, 0, 3, 0, -2);\n    AddSol(-0.9920, -0.0200, 0.0000, 0.0000, 1, 0, 2, 2);\n    AddSol(-45.0990, -0.0200, 0.0000, -0.0010, 1, 0, 2, 0);\n    AddSol(-0.1790, -9.5200, 0.0000, -0.0833, 1, 0, 2, -2);\n    AddSol(-0.3010, -0.3300, 0.0000, 0.0014, 1, 0, 2, -4);\n    AddSol(-6.3820, -3.3700, 0.0000, -0.0481, 1, 0, -2, 2);\n    AddSol(39.5280, 85.1300, 0.0000, -0.7136, 1, 0, -2, 0);\n    AddSol(9.3660, 0.7100, 0.0000, -0.0112, 1, 0, -2, -2);\n    AddSol(0.2020, 0.0200, 0.0000, 0.0000, 1, 0, -2, -4);\n    AddSol(0.4150, 0.1000, 0.0000, 0.0013, 0, 1, 2, 0);\n    AddSol(-2.1520, -2.2600, 0.0000, -0.0066, 0, 1, 2, -2);\n    AddSol(-1.4400, -1.3000, 0.0000, 0.0014, 0, 1, -2, 2);\n    AddSol(0.3840, -0.0400, 0.0000, 0.0000, 0, 1, -2, -2);\n    AddSol(1.9380, 3.6000, -0.1450, 0.0401, 4, 0, 0, 0);\n    AddSol(-0.9520, -1.5800, 0.0520, -0.0130, 4, 0, 0, -2);\n    AddSol(-0.5510, -0.9400, 0.0320, -0.0097, 3, 1, 0, 0);\n    AddSol(-0.4820, -0.5700, 0.0050, -0.0045, 3, 1, 0, -2);\n    AddSol(0.6810, 0.9600, -0.0260, 0.0115, 3, -1, 0, 0);\n    AddSol(-0.2970, -0.2700, 0.0020, -0.0009, 2, 2, 0, -2);\n    AddSol(0.2540, 0.2100, -0.0030, 0.0000, 2, -2, 0, -2);\n    AddSol(-0.2500, -0.2200, 0.0040, 0.0014, 1, 3, 0, -2);\n    AddSol(-3.9960, 0.0000, 0.0000, 0.0004, 2, 0, 2, 0);\n    AddSol(0.5570, -0.7500, 0.0000, -0.0090, 2, 0, 2, -2);\n    AddSol(-0.4590, -0.3800, 0.0000, -0.0053, 2, 0, -2, 2);\n    AddSol(-1.2980, 0.7400, 0.0000, 0.0004, 2, 0, -2, 0);\n    AddSol(0.5380, 1.1400, 0.0000, -0.0141, 2, 0, -2, -2);\n    AddSol(0.2630, 0.0200, 0.0000, 0.0000, 1, 1, 2, 0);\n    AddSol(0.4260, 0.0700, 0.0000, -0.0006, 1, 1, -2, -2);\n    AddSol(-0.3040, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);\n    AddSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n    AddSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n    AddSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n    dynamic ADDN(coeffn, p, q, r, s) {\n        return coeffn * Term(p, q, r, s).y;\n    }\n    N = 0;\n    N += ADDN(-526.069, 0, 0, 1, -2);\n    N += ADDN(-3.352, 0, 0, 1, -4);\n    N += ADDN(+44.297, +1, 0, 1, -2);\n    N += ADDN(-6.000, +1, 0, 1, -4);\n    N += ADDN(+20.599, -1, 0, 1, 0);\n    N += ADDN(-30.598, -1, 0, 1, -2);\n    N += ADDN(-24.649, -2, 0, 1, 0);\n    N += ADDN(-2.000, -2, 0, 1, -2);\n    N += ADDN(-22.571, 0, +1, 1, -2);\n    N += ADDN(+10.985, 0, -1, 1, -2);\n    DLAM += (+0.82 * Sine(0.7736 - 62.5512 * T) + 0.31 * Sine(0.0466 - 125.1025 * T)\n        + 0.35 * Sine(0.5785 - 25.1042 * T) + 0.66 * Sine(0.4591 + 1335.8075 * T)\n        + 0.64 * Sine(0.3130 - 91.5680 * T) + 1.14 * Sine(0.1480 + 1331.2898 * T)\n        + 0.21 * Sine(0.5918 + 1056.5859 * T) + 0.44 * Sine(0.5784 + 1322.8595 * T)\n        + 0.24 * Sine(0.2275 - 5.7374 * T) + 0.28 * Sine(0.2965 + 2.6929 * T)\n        + 0.33 * Sine(0.3132 + 6.3368 * T));\n    S = F + DS / ARC;\n    var lat_seconds = (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * Math.sin(S) - 6.24 * Math.sin(3 * S) + N;\n    return {\n        var geo_eclip_lon: PI2 * Frac((L0 + DLAM / ARC) / PI2),\n        var geo_eclip_lat: (Math.PI / (180 * 3600)) * lat_seconds,\n        var distance_au: (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n    };\n}"
        }
    ]
}