{
    "sourceFile": "bin/vsop/calc_moon.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 418,
            "patches": [
                {
                    "date": 1642138036012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642138566898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,690 +146,690 @@\n \n // AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n   var z = ex[4][4];\n   DLAM += 13.902 * z.imag;\n-//     DS    += 14.06 * z.imag\n-//     GAM1C += -0.001 * z.real\n-//     SINPI += 0.2607 * z.real\n+  DS += 14.06 * z.imag;\n+  GAM1C += -0.001 * z.real;\n+  SINPI += 0.2607 * z.real;\n \n //     # AddSol(0.403000, -4.010000, 0.394000, 0.002300, 0.000000, 0.000000, 0.000000, 3.000000)\n-//     z = ex[3][4]\n-//     DLAM  += 0.403 * z.imag\n-//     DS    += -4.01 * z.imag\n-//     GAM1C += 0.394 * z.real\n-//     SINPI += 0.0023 * z.real\n+  z = ex[3][4];\n+  DLAM += 0.403 * z.imag;\n+  DS += -4.01 * z.imag;\n+  GAM1C += 0.394 * z.real;\n+  SINPI += 0.0023 * z.real;\n \n //     # AddSol(2369.912000, 2373.360000, 0.601000, 28.233300, 0.000000, 0.000000, 0.000000, 2.000000)\n-//     z = ex[2][4]\n-//     DLAM  += 2369.912 * z.imag\n-//     DS    += 2373.36 * z.imag\n-//     GAM1C += 0.601 * z.real\n-//     SINPI += 28.2333 * z.real\n+  z = ex[2][4];\n+  DLAM += 2369.912 * z.imag;\n+  DS += 2373.36 * z.imag;\n+  GAM1C += 0.601 * z.real;\n+  SINPI += 28.2333 * z.real;\n \n //     # AddSol(-125.154000, -112.790000, -0.725000, -0.978100, 0.000000, 0.000000, 0.000000, 1.000000)\n-//     z = ex[1][4]\n-//     DLAM  += -125.154 * z.imag\n-//     DS    += -112.79 * z.imag\n-//     GAM1C += -0.725 * z.real\n-//     SINPI += -0.9781 * z.real\n+  z = ex[1][4];\n+  DLAM += -125.154 * z.imag;\n+  DS += -112.79 * z.imag;\n+  GAM1C += -0.725 * z.real;\n+  SINPI += -0.9781 * z.real;\n \n //     # AddSol(1.979000, 6.980000, -0.445000, 0.043300, 1.000000, 0.000000, 0.000000, 4.000000)\n-//     z = ex[1][1] * ex[4][4]\n-//     DLAM  += 1.979 * z.imag\n-//     DS    += 6.98 * z.imag\n-//     GAM1C += -0.445 * z.real\n-//     SINPI += 0.0433 * z.real\n+  z = ex[1][1] * ex[4][4];\n+  DLAM += 1.979 * z.imag;\n+  DS += 6.98 * z.imag;\n+  GAM1C += -0.445 * z.real;\n+  SINPI += 0.0433 * z.real;\n \n //     # AddSol(191.953000, 192.720000, 0.029000, 3.086100, 1.000000, 0.000000, 0.000000, 2.000000)\n-//     z = ex[1][1] * ex[2][4]\n-//     DLAM  += 191.953 * z.imag\n-//     DS    += 192.72 * z.imag\n-//     GAM1C += 0.029 * z.real\n-//     SINPI += 3.0861 * z.real\n+//     z = ex[1][1] * ex[2][4];\n+//     DLAM  += 191.953 * z.imag;\n+//     DS    += 192.72 * z.imag;\n+//     GAM1C += 0.029 * z.real;\n+//     SINPI += 3.0861 * z.real;\n \n //     # AddSol(-8.466000, -13.510000, 0.455000, -0.109300, 1.000000, 0.000000, 0.000000, 1.000000)\n-//     z = ex[1][1] * ex[1][4]\n-//     DLAM  += -8.466 * z.imag\n-//     DS    += -13.51 * z.imag\n-//     GAM1C += 0.455 * z.real\n-//     SINPI += -0.1093 * z.real\n+//     z = ex[1][1] * ex[1][4];\n+//     DLAM  += -8.466 * z.imag;\n+//     DS    += -13.51 * z.imag;\n+//     GAM1C += 0.455 * z.real;\n+//     SINPI += -0.1093 * z.real;\n \n //     # AddSol(22639.500000, 22609.070000, 0.079000, 186.539800, 1.000000, 0.000000, 0.000000, 0.000000)\n-//     z = ex[1][1]\n-//     DLAM  += 22639.500 * z.imag\n-//     DS    += 22609.07 * z.imag\n-//     GAM1C += 0.079 * z.real\n-//     SINPI += 186.5398 * z.real\n+//     z = ex[1][1];\n+//     DLAM  += 22639.500 * z.imag;\n+//     DS    += 22609.07 * z.imag;\n+//     GAM1C += 0.079 * z.real;\n+//     SINPI += 186.5398 * z.real;\n \n //     # AddSol(18.609000, 3.590000, -0.094000, 0.011800, 1.000000, 0.000000, 0.000000, -1.000000)\n-//     z = ex[1][1] * ex[-1][4]\n-//     DLAM  += 18.609 * z.imag\n-//     DS    += 3.59 * z.imag\n-//     GAM1C += -0.094 * z.real\n-//     SINPI += 0.0118 * z.real\n+//     z = ex[1][1] * ex[-1][4];\n+//     DLAM  += 18.609 * z.imag;\n+//     DS    += 3.59 * z.imag;\n+//     GAM1C += -0.094 * z.real;\n+//     SINPI += 0.0118 * z.real;\n \n //     # AddSol(-4586.465000, -4578.130000, -0.077000, 34.311700, 1.000000, 0.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[-2][4]\n-//     DLAM  += -4586.465 * z.imag\n-//     DS    += -4578.13 * z.imag\n-//     GAM1C += -0.077 * z.real\n-//     SINPI += 34.3117 * z.real\n+//     z = ex[1][1] * ex[-2][4];\n+//     DLAM  += -4586.465 * z.imag;\n+//     DS    += -4578.13 * z.imag;\n+//     GAM1C += -0.077 * z.real;\n+//     SINPI += 34.3117 * z.real;\n \n //     # AddSol(3.215000, 5.440000, 0.192000, -0.038600, 1.000000, 0.000000, 0.000000, -3.000000)\n-//     z = ex[1][1] * ex[-3][4]\n-//     DLAM  += 3.215 * z.imag\n-//     DS    += 5.44 * z.imag\n-//     GAM1C += 0.192 * z.real\n-//     SINPI += -0.0386 * z.real\n+//     z = ex[1][1] * ex[-3][4];\n+//     DLAM  += 3.215 * z.imag;\n+//     DS    += 5.44 * z.imag;\n+//     GAM1C += 0.192 * z.real;\n+//     SINPI += -0.0386 * z.real;\n \n //     # AddSol(-38.428000, -38.640000, 0.001000, 0.600800, 1.000000, 0.000000, 0.000000, -4.000000)\n-//     z = ex[1][1] * ex[-4][4]\n-//     DLAM  += -38.428 * z.imag\n-//     DS    += -38.64 * z.imag\n-//     GAM1C += 0.001 * z.real\n-//     SINPI += 0.6008 * z.real\n+//     z = ex[1][1] * ex[-4][4];\n+//     DLAM  += -38.428 * z.imag;\n+//     DS    += -38.64 * z.imag;\n+//     GAM1C += 0.001 * z.real;\n+//     SINPI += 0.6008 * z.real;\n \n //     # AddSol(-0.393000, -1.430000, -0.092000, 0.008600, 1.000000, 0.000000, 0.000000, -6.000000)\n-//     z = ex[1][1] * ex[-6][4]\n-//     DLAM  += -0.393 * z.imag\n-//     DS    += -1.43 * z.imag\n-//     GAM1C += -0.092 * z.real\n-//     SINPI += 0.0086 * z.real\n+//     z = ex[1][1] * ex[-6][4];\n+//     DLAM  += -0.393 * z.imag;\n+//     DS    += -1.43 * z.imag;\n+//     GAM1C += -0.092 * z.real;\n+//     SINPI += 0.0086 * z.real;\n \n //     # AddSol(-0.289000, -1.590000, 0.123000, -0.005300, 0.000000, 1.000000, 0.000000, 4.000000)\n-//     z = ex[1][2] * ex[4][4]\n-//     DLAM  += -0.289 * z.imag\n-//     DS    += -1.59 * z.imag\n-//     GAM1C += 0.123 * z.real\n-//     SINPI += -0.0053 * z.real\n+//     z = ex[1][2] * ex[4][4];\n+//     DLAM  += -0.289 * z.imag;\n+//     DS    += -1.59 * z.imag;\n+//     GAM1C += 0.123 * z.real;\n+//     SINPI += -0.0053 * z.real;\n \n //     # AddSol(-24.420000, -25.100000, 0.040000, -0.300000, 0.000000, 1.000000, 0.000000, 2.000000)\n-//     z = ex[1][2] * ex[2][4]\n-//     DLAM  += -24.420 * z.imag\n-//     DS    += -25.10 * z.imag\n-//     GAM1C += 0.040 * z.real\n-//     SINPI += -0.3000 * z.real\n+//     z = ex[1][2] * ex[2][4];\n+//     DLAM  += -24.420 * z.imag;\n+//     DS    += -25.10 * z.imag;\n+//     GAM1C += 0.040 * z.real;\n+//     SINPI += -0.3000 * z.real;\n \n //     # AddSol(18.023000, 17.930000, 0.007000, 0.149400, 0.000000, 1.000000, 0.000000, 1.000000)\n-//     z = ex[1][2] * ex[1][4]\n-//     DLAM  += 18.023 * z.imag\n-//     DS    += 17.93 * z.imag\n-//     GAM1C += 0.007 * z.real\n-//     SINPI += 0.1494 * z.real\n+//     z = ex[1][2] * ex[1][4];\n+//     DLAM  += 18.023 * z.imag;\n+//     DS    += 17.93 * z.imag;\n+//     GAM1C += 0.007 * z.real;\n+//     SINPI += 0.1494 * z.real;\n \n //     # AddSol(-668.146000, -126.980000, -1.302000, -0.399700, 0.000000, 1.000000, 0.000000, 0.000000)\n-//     z = ex[1][2]\n-//     DLAM  += -668.146 * z.imag\n-//     DS    += -126.98 * z.imag\n-//     GAM1C += -1.302 * z.real\n-//     SINPI += -0.3997 * z.real\n+//     z = ex[1][2];\n+//     DLAM  += -668.146 * z.imag;\n+//     DS    += -126.98 * z.imag;\n+//     GAM1C += -1.302 * z.real;\n+//     SINPI += -0.3997 * z.real;\n \n //     # AddSol(0.560000, 0.320000, -0.001000, -0.003700, 0.000000, 1.000000, 0.000000, -1.000000)\n-//     z = ex[1][2] * ex[-1][4]\n-//     DLAM  += 0.560 * z.imag\n-//     DS    += 0.32 * z.imag\n-//     GAM1C += -0.001 * z.real\n-//     SINPI += -0.0037 * z.real\n+//     z = ex[1][2] * ex[-1][4];\n+//     DLAM  += 0.560 * z.imag;\n+//     DS    += 0.32 * z.imag;\n+//     GAM1C += -0.001 * z.real;\n+//     SINPI += -0.0037 * z.real;\n \n //     # AddSol(-165.145000, -165.060000, 0.054000, 1.917800, 0.000000, 1.000000, 0.000000, -2.000000)\n-//     z = ex[1][2] * ex[-2][4]\n-//     DLAM  += -165.145 * z.imag\n-//     DS    += -165.06 * z.imag\n-//     GAM1C += 0.054 * z.real\n-//     SINPI += 1.9178 * z.real\n+//     z = ex[1][2] * ex[-2][4];\n+//     DLAM  += -165.145 * z.imag;\n+//     DS    += -165.06 * z.imag;\n+//     GAM1C += 0.054 * z.real;\n+//     SINPI += 1.9178 * z.real;\n \n //     # AddSol(-1.877000, -6.460000, -0.416000, 0.033900, 0.000000, 1.000000, 0.000000, -4.000000)\n-//     z = ex[1][2] * ex[-4][4]\n-//     DLAM  += -1.877 * z.imag\n-//     DS    += -6.46 * z.imag\n-//     GAM1C += -0.416 * z.real\n-//     SINPI += 0.0339 * z.real\n+//     z = ex[1][2] * ex[-4][4];\n+//     DLAM  += -1.877 * z.imag;\n+//     DS    += -6.46 * z.imag;\n+//     GAM1C += -0.416 * z.real;\n+//     SINPI += 0.0339 * z.real;\n \n //     # AddSol(0.213000, 1.020000, -0.074000, 0.005400, 2.000000, 0.000000, 0.000000, 4.000000)\n-//     z = ex[2][1] * ex[4][4]\n-//     DLAM  += 0.213 * z.imag\n-//     DS    += 1.02 * z.imag\n-//     GAM1C += -0.074 * z.real\n-//     SINPI += 0.0054 * z.real\n+//     z = ex[2][1] * ex[4][4];\n+//     DLAM  += 0.213 * z.imag;\n+//     DS    += 1.02 * z.imag;\n+//     GAM1C += -0.074 * z.real;\n+//     SINPI += 0.0054 * z.real;\n \n //     # AddSol(14.387000, 14.780000, -0.017000, 0.283300, 2.000000, 0.000000, 0.000000, 2.000000)\n-//     z = ex[2][1] * ex[2][4]\n-//     DLAM  += 14.387 * z.imag\n-//     DS    += 14.78 * z.imag\n-//     GAM1C += -0.017 * z.real\n-//     SINPI += 0.2833 * z.real\n+//     z = ex[2][1] * ex[2][4];\n+//     DLAM  += 14.387 * z.imag;\n+//     DS    += 14.78 * z.imag;\n+//     GAM1C += -0.017 * z.real;\n+//     SINPI += 0.2833 * z.real;\n \n //     # AddSol(-0.586000, -1.200000, 0.054000, -0.010000, 2.000000, 0.000000, 0.000000, 1.000000)\n-//     z = ex[2][1] * ex[1][4]\n-//     DLAM  += -0.586 * z.imag\n-//     DS    += -1.20 * z.imag\n-//     GAM1C += 0.054 * z.real\n-//     SINPI += -0.0100 * z.real\n+//     z = ex[2][1] * ex[1][4];\n+//     DLAM  += -0.586 * z.imag;\n+//     DS    += -1.20 * z.imag;\n+//     GAM1C += 0.054 * z.real;\n+//     SINPI += -0.0100 * z.real;\n \n //     # AddSol(769.016000, 767.960000, 0.107000, 10.165700, 2.000000, 0.000000, 0.000000, 0.000000)\n-//     z = ex[2][1]\n-//     DLAM  += 769.016 * z.imag\n-//     DS    += 767.96 * z.imag\n-//     GAM1C += 0.107 * z.real\n-//     SINPI += 10.1657 * z.real\n+//     z = ex[2][1];\n+//     DLAM  += 769.016 * z.imag;\n+//     DS    += 767.96 * z.imag;\n+//     GAM1C += 0.107 * z.real;\n+//     SINPI += 10.1657 * z.real;\n \n //     # AddSol(1.750000, 2.010000, -0.018000, 0.015500, 2.000000, 0.000000, 0.000000, -1.000000)\n-//     z = ex[2][1] * ex[-1][4]\n-//     DLAM  += 1.750 * z.imag\n-//     DS    += 2.01 * z.imag\n-//     GAM1C += -0.018 * z.real\n-//     SINPI += 0.0155 * z.real\n+//     z = ex[2][1] * ex[-1][4];\n+//     DLAM  += 1.750 * z.imag;\n+//     DS    += 2.01 * z.imag;\n+//     GAM1C += -0.018 * z.real;\n+//     SINPI += 0.0155 * z.real;\n \n //     # AddSol(-211.656000, -152.530000, 5.679000, -0.303900, 2.000000, 0.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[-2][4]\n-//     DLAM  += -211.656 * z.imag\n-//     DS    += -152.53 * z.imag\n-//     GAM1C += 5.679 * z.real\n-//     SINPI += -0.3039 * z.real\n+//     z = ex[2][1] * ex[-2][4];\n+//     DLAM  += -211.656 * z.imag;\n+//     DS    += -152.53 * z.imag;\n+//     GAM1C += 5.679 * z.real;\n+//     SINPI += -0.3039 * z.real;\n \n //     # AddSol(1.225000, 0.910000, -0.030000, -0.008800, 2.000000, 0.000000, 0.000000, -3.000000)\n-//     z = ex[2][1] * ex[-3][4]\n-//     DLAM  += 1.225 * z.imag\n-//     DS    += 0.91 * z.imag\n-//     GAM1C += -0.030 * z.real\n-//     SINPI += -0.0088 * z.real\n+//     z = ex[2][1] * ex[-3][4];\n+//     DLAM  += 1.225 * z.imag;\n+//     DS    += 0.91 * z.imag;\n+//     GAM1C += -0.030 * z.real;\n+//     SINPI += -0.0088 * z.real;\n \n //     # AddSol(-30.773000, -34.070000, -0.308000, 0.372200, 2.000000, 0.000000, 0.000000, -4.000000)\n-//     z = ex[2][1] * ex[-4][4]\n-//     DLAM  += -30.773 * z.imag\n-//     DS    += -34.07 * z.imag\n-//     GAM1C += -0.308 * z.real\n-//     SINPI += 0.3722 * z.real\n+//     z = ex[2][1] * ex[-4][4];\n+//     DLAM  += -30.773 * z.imag;\n+//     DS    += -34.07 * z.imag;\n+//     GAM1C += -0.308 * z.real;\n+//     SINPI += 0.3722 * z.real;\n \n //     # AddSol(-0.570000, -1.400000, -0.074000, 0.010900, 2.000000, 0.000000, 0.000000, -6.000000)\n-//     z = ex[2][1] * ex[-6][4]\n-//     DLAM  += -0.570 * z.imag\n-//     DS    += -1.40 * z.imag\n-//     GAM1C += -0.074 * z.real\n-//     SINPI += 0.0109 * z.real\n+//     z = ex[2][1] * ex[-6][4];\n+//     DLAM  += -0.570 * z.imag;\n+//     DS    += -1.40 * z.imag;\n+//     GAM1C += -0.074 * z.real;\n+//     SINPI += 0.0109 * z.real;\n \n //     # AddSol(-2.921000, -11.750000, 0.787000, -0.048400, 1.000000, 1.000000, 0.000000, 2.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[2][4]\n-//     DLAM  += -2.921 * z.imag\n-//     DS    += -11.75 * z.imag\n-//     GAM1C += 0.787 * z.real\n-//     SINPI += -0.0484 * z.real\n+//     z = ex[1][1] * ex[1][2] * ex[2][4];\n+//     DLAM  += -2.921 * z.imag;\n+//     DS    += -11.75 * z.imag;\n+//     GAM1C += 0.787 * z.real;\n+//     SINPI += -0.0484 * z.real;\n \n //     # AddSol(1.267000, 1.520000, -0.022000, 0.016400, 1.000000, 1.000000, 0.000000, 1.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[1][4]\n-//     DLAM  += 1.267 * z.imag\n-//     DS    += 1.52 * z.imag\n-//     GAM1C += -0.022 * z.real\n-//     SINPI += 0.0164 * z.real\n+//     z = ex[1][1] * ex[1][2] * ex[1][4];\n+//     DLAM  += 1.267 * z.imag;\n+//     DS    += 1.52 * z.imag;\n+//     GAM1C += -0.022 * z.real;\n+//     SINPI += 0.0164 * z.real;\n \n //     # AddSol(-109.673000, -115.180000, 0.461000, -0.949000, 1.000000, 1.000000, 0.000000, 0.000000)\n-//     z = ex[1][1] * ex[1][2]\n-//     DLAM  += -109.673 * z.imag\n-//     DS    += -115.18 * z.imag\n-//     GAM1C += 0.461 * z.real\n-//     SINPI += -0.9490 * z.real\n+//     z = ex[1][1] * ex[1][2];\n+//     DLAM  += -109.673 * z.imag;\n+//     DS    += -115.18 * z.imag;\n+//     GAM1C += 0.461 * z.real;\n+//     SINPI += -0.9490 * z.real;\n \n //     # AddSol(-205.962000, -182.360000, 2.056000, 1.443700, 1.000000, 1.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[-2][4]\n-//     DLAM  += -205.962 * z.imag\n-//     DS    += -182.36 * z.imag\n-//     GAM1C += 2.056 * z.real\n-//     SINPI += 1.4437 * z.real\n+//     z = ex[1][1] * ex[1][2] * ex[-2][4];\n+//     DLAM  += -205.962 * z.imag;\n+//     DS    += -182.36 * z.imag;\n+//     GAM1C += 2.056 * z.real;\n+//     SINPI += 1.4437 * z.real;\n \n //     # AddSol(0.233000, 0.360000, 0.012000, -0.002500, 1.000000, 1.000000, 0.000000, -3.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[-3][4]\n-//     DLAM  += 0.233 * z.imag\n-//     DS    += 0.36 * z.imag\n-//     GAM1C += 0.012 * z.real\n-//     SINPI += -0.0025 * z.real\n+//     z = ex[1][1] * ex[1][2] * ex[-3][4];\n+//     DLAM  += 0.233 * z.imag;\n+//     DS    += 0.36 * z.imag;\n+//     GAM1C += 0.012 * z.real;\n+//     SINPI += -0.0025 * z.real;\n \n //     # AddSol(-4.391000, -9.660000, -0.471000, 0.067300, 1.000000, 1.000000, 0.000000, -4.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[-4][4]\n-//     DLAM  += -4.391 * z.imag\n-//     DS    += -9.66 * z.imag\n-//     GAM1C += -0.471 * z.real\n-//     SINPI += 0.0673 * z.real\n+//     z = ex[1][1] * ex[1][2] * ex[-4][4];\n+//     DLAM  += -4.391 * z.imag;\n+//     DS    += -9.66 * z.imag;\n+//     GAM1C += -0.471 * z.real;\n+//     SINPI += 0.0673 * z.real;\n \n //     # AddSol(0.283000, 1.530000, -0.111000, 0.006000, 1.000000, -1.000000, 0.000000, 4.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[4][4]\n-//     DLAM  += 0.283 * z.imag\n-//     DS    += 1.53 * z.imag\n-//     GAM1C += -0.111 * z.real\n-//     SINPI += 0.0060 * z.real\n+//     z = ex[1][1] * ex[-1][2] * ex[4][4];\n+//     DLAM  += 0.283 * z.imag;\n+//     DS    += 1.53 * z.imag;\n+//     GAM1C += -0.111 * z.real;\n+//     SINPI += 0.0060 * z.real;\n \n //     # AddSol(14.577000, 31.700000, -1.540000, 0.230200, 1.000000, -1.000000, 0.000000, 2.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[2][4]\n-//     DLAM  += 14.577 * z.imag\n-//     DS    += 31.70 * z.imag\n-//     GAM1C += -1.540 * z.real\n-//     SINPI += 0.2302 * z.real\n+//     z = ex[1][1] * ex[-1][2] * ex[2][4];\n+//     DLAM  += 14.577 * z.imag;\n+//     DS    += 31.70 * z.imag;\n+//     GAM1C += -1.540 * z.real;\n+//     SINPI += 0.2302 * z.real;\n \n //     # AddSol(147.687000, 138.760000, 0.679000, 1.152800, 1.000000, -1.000000, 0.000000, 0.000000)\n-//     z = ex[1][1] * ex[-1][2]\n-//     DLAM  += 147.687 * z.imag\n-//     DS    += 138.76 * z.imag\n-//     GAM1C += 0.679 * z.real\n-//     SINPI += 1.1528 * z.real\n+//     z = ex[1][1] * ex[-1][2];\n+//     DLAM  += 147.687 * z.imag;\n+//     DS    += 138.76 * z.imag;\n+//     GAM1C += 0.679 * z.real;\n+//     SINPI += 1.1528 * z.real;\n \n //     # AddSol(-1.089000, 0.550000, 0.021000, 0.000000, 1.000000, -1.000000, 0.000000, -1.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-1][4]\n-//     DLAM  += -1.089 * z.imag\n-//     DS    += 0.55 * z.imag\n-//     GAM1C += 0.021 * z.real\n+//     z = ex[1][1] * ex[-1][2] * ex[-1][4];\n+//     DLAM  += -1.089 * z.imag;\n+//     DS    += 0.55 * z.imag;\n+//     GAM1C += 0.021 * z.real;\n \n //     # AddSol(28.475000, 23.590000, -0.443000, -0.225700, 1.000000, -1.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-2][4]\n-//     DLAM  += 28.475 * z.imag\n-//     DS    += 23.59 * z.imag\n-//     GAM1C += -0.443 * z.real\n-//     SINPI += -0.2257 * z.real\n+//     z = ex[1][1] * ex[-1][2] * ex[-2][4];\n+//     DLAM  += 28.475 * z.imag;\n+//     DS    += 23.59 * z.imag;\n+//     GAM1C += -0.443 * z.real;\n+//     SINPI += -0.2257 * z.real;\n \n //     # AddSol(-0.276000, -0.380000, -0.006000, -0.003600, 1.000000, -1.000000, 0.000000, -3.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-3][4]\n-//     DLAM  += -0.276 * z.imag\n-//     DS    += -0.38 * z.imag\n-//     GAM1C += -0.006 * z.real\n-//     SINPI += -0.0036 * z.real\n+//     z = ex[1][1] * ex[-1][2] * ex[-3][4];\n+//     DLAM  += -0.276 * z.imag;\n+//     DS    += -0.38 * z.imag;\n+//     GAM1C += -0.006 * z.real;\n+//     SINPI += -0.0036 * z.real;\n \n //     # AddSol(0.636000, 2.270000, 0.146000, -0.010200, 1.000000, -1.000000, 0.000000, -4.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-4][4]\n-//     DLAM  += 0.636 * z.imag\n-//     DS    += 2.27 * z.imag\n-//     GAM1C += 0.146 * z.real\n-//     SINPI += -0.0102 * z.real\n+//     z = ex[1][1] * ex[-1][2] * ex[-4][4];\n+//     DLAM  += 0.636 * z.imag;\n+//     DS    += 2.27 * z.imag;\n+//     GAM1C += 0.146 * z.real;\n+//     SINPI += -0.0102 * z.real;\n \n //     # AddSol(-0.189000, -1.680000, 0.131000, -0.002800, 0.000000, 2.000000, 0.000000, 2.000000)\n-//     z = ex[2][2] * ex[2][4]\n-//     DLAM  += -0.189 * z.imag\n-//     DS    += -1.68 * z.imag\n-//     GAM1C += 0.131 * z.real\n-//     SINPI += -0.0028 * z.real\n+//     z = ex[2][2] * ex[2][4];\n+//     DLAM  += -0.189 * z.imag;\n+//     DS    += -1.68 * z.imag;\n+//     GAM1C += 0.131 * z.real;\n+//     SINPI += -0.0028 * z.real;\n \n //     # AddSol(-7.486000, -0.660000, -0.037000, -0.008600, 0.000000, 2.000000, 0.000000, 0.000000)\n-//     z = ex[2][2]\n-//     DLAM  += -7.486 * z.imag\n-//     DS    += -0.66 * z.imag\n-//     GAM1C += -0.037 * z.real\n-//     SINPI += -0.0086 * z.real\n+//     z = ex[2][2];\n+//     DLAM  += -7.486 * z.imag;\n+//     DS    += -0.66 * z.imag;\n+//     GAM1C += -0.037 * z.real;\n+//     SINPI += -0.0086 * z.real;\n \n //     # AddSol(-8.096000, -16.350000, -0.740000, 0.091800, 0.000000, 2.000000, 0.000000, -2.000000)\n-//     z = ex[2][2] * ex[-2][4]\n-//     DLAM  += -8.096 * z.imag\n-//     DS    += -16.35 * z.imag\n-//     GAM1C += -0.740 * z.real\n-//     SINPI += 0.0918 * z.real\n+//     z = ex[2][2] * ex[-2][4];\n+//     DLAM  += -8.096 * z.imag;\n+//     DS    += -16.35 * z.imag;\n+//     GAM1C += -0.740 * z.real;\n+//     SINPI += 0.0918 * z.real;\n \n //     # AddSol(-5.741000, -0.040000, 0.000000, -0.000900, 0.000000, 0.000000, 2.000000, 2.000000)\n-//     z = ex[2][3] * ex[2][4]\n-//     DLAM  += -5.741 * z.imag\n-//     DS    += -0.04 * z.imag\n-//     SINPI += -0.0009 * z.real\n+//     z = ex[2][3] * ex[2][4];\n+//     DLAM  += -5.741 * z.imag;\n+//     DS    += -0.04 * z.imag;\n+//     SINPI += -0.0009 * z.real;\n \n //     # AddSol(0.255000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 2.000000, 1.000000)\n-//     z = ex[2][3] * ex[1][4]\n-//     DLAM  += 0.255 * z.imag\n+//     z = ex[2][3] * ex[1][4];\n+//     DLAM  += 0.255 * z.imag;\n \n //     # AddSol(-411.608000, -0.200000, 0.000000, -0.012400, 0.000000, 0.000000, 2.000000, 0.000000)\n-//     z = ex[2][3]\n-//     DLAM  += -411.608 * z.imag\n-//     DS    += -0.20 * z.imag\n-//     SINPI += -0.0124 * z.real\n+//     z = ex[2][3];\n+//     DLAM  += -411.608 * z.imag;\n+//     DS    += -0.20 * z.imag;\n+//     SINPI += -0.0124 * z.real;\n \n //     # AddSol(0.584000, 0.840000, 0.000000, 0.007100, 0.000000, 0.000000, 2.000000, -1.000000)\n-//     z = ex[2][3] * ex[-1][4]\n-//     DLAM  += 0.584 * z.imag\n-//     DS    += 0.84 * z.imag\n-//     SINPI += 0.0071 * z.real\n+//     z = ex[2][3] * ex[-1][4];\n+//     DLAM  += 0.584 * z.imag;\n+//     DS    += 0.84 * z.imag;\n+//     SINPI += 0.0071 * z.real;\n \n //     # AddSol(-55.173000, -52.140000, 0.000000, -0.105200, 0.000000, 0.000000, 2.000000, -2.000000)\n-//     z = ex[2][3] * ex[-2][4]\n-//     DLAM  += -55.173 * z.imag\n-//     DS    += -52.14 * z.imag\n-//     SINPI += -0.1052 * z.real\n+//     z = ex[2][3] * ex[-2][4];\n+//     DLAM  += -55.173 * z.imag;\n+//     DS    += -52.14 * z.imag;\n+//     SINPI += -0.1052 * z.real;\n \n //     # AddSol(0.254000, 0.250000, 0.000000, -0.001700, 0.000000, 0.000000, 2.000000, -3.000000)\n-//     z = ex[2][3] * ex[-3][4]\n-//     DLAM  += 0.254 * z.imag\n-//     DS    += 0.25 * z.imag\n-//     SINPI += -0.0017 * z.real\n+//     z = ex[2][3] * ex[-3][4];\n+//     DLAM  += 0.254 * z.imag;\n+//     DS    += 0.25 * z.imag;\n+//     SINPI += -0.0017 * z.real;\n \n //     # AddSol(0.025000, -1.670000, 0.000000, 0.003100, 0.000000, 0.000000, 2.000000, -4.000000)\n-//     z = ex[2][3] * ex[-4][4]\n-//     DLAM  += 0.025 * z.imag\n-//     DS    += -1.67 * z.imag\n-//     SINPI += 0.0031 * z.real\n+//     z = ex[2][3] * ex[-4][4];\n+//     DLAM  += 0.025 * z.imag;\n+//     DS    += -1.67 * z.imag;\n+//     SINPI += 0.0031 * z.real;\n \n //     # AddSol(1.060000, 2.960000, -0.166000, 0.024300, 3.000000, 0.000000, 0.000000, 2.000000)\n-//     z = ex[3][1] * ex[2][4]\n-//     DLAM  += 1.060 * z.imag\n-//     DS    += 2.96 * z.imag\n-//     GAM1C += -0.166 * z.real\n-//     SINPI += 0.0243 * z.real\n+//     z = ex[3][1] * ex[2][4];\n+//     DLAM  += 1.060 * z.imag;\n+//     DS    += 2.96 * z.imag;\n+//     GAM1C += -0.166 * z.real;\n+//     SINPI += 0.0243 * z.real;\n \n //     # AddSol(36.124000, 50.640000, -1.300000, 0.621500, 3.000000, 0.000000, 0.000000, 0.000000)\n-//     z = ex[3][1]\n-//     DLAM  += 36.124 * z.imag\n-//     DS    += 50.64 * z.imag\n-//     GAM1C += -1.300 * z.real\n-//     SINPI += 0.6215 * z.real\n+//     z = ex[3][1];\n+//     DLAM  += 36.124 * z.imag;\n+//     DS    += 50.64 * z.imag;\n+//     GAM1C += -1.300 * z.real;\n+//     SINPI += 0.6215 * z.real;\n \n //     # AddSol(-13.193000, -16.400000, 0.258000, -0.118700, 3.000000, 0.000000, 0.000000, -2.000000)\n-//     z = ex[3][1] * ex[-2][4]\n-//     DLAM  += -13.193 * z.imag\n-//     DS    += -16.40 * z.imag\n-//     GAM1C += 0.258 * z.real\n-//     SINPI += -0.1187 * z.real\n+//     z = ex[3][1] * ex[-2][4];\n+//     DLAM  += -13.193 * z.imag;\n+//     DS    += -16.40 * z.imag;\n+//     GAM1C += 0.258 * z.real;\n+//     SINPI += -0.1187 * z.real;\n \n //     # AddSol(-1.187000, -0.740000, 0.042000, 0.007400, 3.000000, 0.000000, 0.000000, -4.000000)\n-//     z = ex[3][1] * ex[-4][4]\n-//     DLAM  += -1.187 * z.imag\n-//     DS    += -0.74 * z.imag\n-//     GAM1C += 0.042 * z.real\n-//     SINPI += 0.0074 * z.real\n+//     z = ex[3][1] * ex[-4][4];\n+//     DLAM  += -1.187 * z.imag;\n+//     DS    += -0.74 * z.imag;\n+//     GAM1C += 0.042 * z.real;\n+//     SINPI += 0.0074 * z.real;\n \n //     # AddSol(-0.293000, -0.310000, -0.002000, 0.004600, 3.000000, 0.000000, 0.000000, -6.000000)\n-//     z = ex[3][1] * ex[-6][4]\n-//     DLAM  += -0.293 * z.imag\n-//     DS    += -0.31 * z.imag\n-//     GAM1C += -0.002 * z.real\n-//     SINPI += 0.0046 * z.real\n+//     z = ex[3][1] * ex[-6][4];\n+//     DLAM  += -0.293 * z.imag;\n+//     DS    += -0.31 * z.imag;\n+//     GAM1C += -0.002 * z.real;\n+//     SINPI += 0.0046 * z.real;\n \n //     # AddSol(-0.290000, -1.450000, 0.116000, -0.005100, 2.000000, 1.000000, 0.000000, 2.000000)\n-//     z = ex[2][1] * ex[1][2] * ex[2][4]\n-//     DLAM  += -0.290 * z.imag\n-//     DS    += -1.45 * z.imag\n-//     GAM1C += 0.116 * z.real\n-//     SINPI += -0.0051 * z.real\n+//     z = ex[2][1] * ex[1][2] * ex[2][4];\n+//     DLAM  += -0.290 * z.imag;\n+//     DS    += -1.45 * z.imag;\n+//     GAM1C += 0.116 * z.real;\n+//     SINPI += -0.0051 * z.real;\n \n //     # AddSol(-7.649000, -10.560000, 0.259000, -0.103800, 2.000000, 1.000000, 0.000000, 0.000000)\n-//     z = ex[2][1] * ex[1][2]\n-//     DLAM  += -7.649 * z.imag\n-//     DS    += -10.56 * z.imag\n-//     GAM1C += 0.259 * z.real\n-//     SINPI += -0.1038 * z.real\n+//     z = ex[2][1] * ex[1][2];\n+//     DLAM  += -7.649 * z.imag;\n+//     DS    += -10.56 * z.imag;\n+//     GAM1C += 0.259 * z.real;\n+//     SINPI += -0.1038 * z.real;\n \n //     # AddSol(-8.627000, -7.590000, 0.078000, -0.019200, 2.000000, 1.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[1][2] * ex[-2][4]\n-//     DLAM  += -8.627 * z.imag\n-//     DS    += -7.59 * z.imag\n-//     GAM1C += 0.078 * z.real\n-//     SINPI += -0.0192 * z.real\n+//     z = ex[2][1] * ex[1][2] * ex[-2][4];\n+//     DLAM  += -8.627 * z.imag;\n+//     DS    += -7.59 * z.imag;\n+//     GAM1C += 0.078 * z.real;\n+//     SINPI += -0.0192 * z.real;\n \n //     # AddSol(-2.740000, -2.540000, 0.022000, 0.032400, 2.000000, 1.000000, 0.000000, -4.000000)\n-//     z = ex[2][1] * ex[1][2] * ex[-4][4]\n-//     DLAM  += -2.740 * z.imag\n-//     DS    += -2.54 * z.imag\n-//     GAM1C += 0.022 * z.real\n-//     SINPI += 0.0324 * z.real\n+//     z = ex[2][1] * ex[1][2] * ex[-4][4];\n+//     DLAM  += -2.740 * z.imag;\n+//     DS    += -2.54 * z.imag;\n+//     GAM1C += 0.022 * z.real;\n+//     SINPI += 0.0324 * z.real;\n \n //     # AddSol(1.181000, 3.320000, -0.212000, 0.021300, 2.000000, -1.000000, 0.000000, 2.000000)\n-//     z = ex[2][1] * ex[-1][2] * ex[2][4]\n-//     DLAM  += 1.181 * z.imag\n-//     DS    += 3.32 * z.imag\n-//     GAM1C += -0.212 * z.real\n-//     SINPI += 0.0213 * z.real\n+//     z = ex[2][1] * ex[-1][2] * ex[2][4];\n+//     DLAM  += 1.181 * z.imag;\n+//     DS    += 3.32 * z.imag;\n+//     GAM1C += -0.212 * z.real;\n+//     SINPI += 0.0213 * z.real;\n \n //     # AddSol(9.703000, 11.670000, -0.151000, 0.126800, 2.000000, -1.000000, 0.000000, 0.000000)\n-//     z = ex[2][1] * ex[-1][2]\n-//     DLAM  += 9.703 * z.imag\n-//     DS    += 11.67 * z.imag\n-//     GAM1C += -0.151 * z.real\n-//     SINPI += 0.1268 * z.real\n+//     z = ex[2][1] * ex[-1][2];\n+//     DLAM  += 9.703 * z.imag;\n+//     DS    += 11.67 * z.imag;\n+//     GAM1C += -0.151 * z.real;\n+//     SINPI += 0.1268 * z.real;\n \n //     # AddSol(-0.352000, -0.370000, 0.001000, -0.002800, 2.000000, -1.000000, 0.000000, -1.000000)\n-//     z = ex[2][1] * ex[-1][2] * ex[-1][4]\n-//     DLAM  += -0.352 * z.imag\n-//     DS    += -0.37 * z.imag\n-//     GAM1C += 0.001 * z.real\n-//     SINPI += -0.0028 * z.real\n+//     z = ex[2][1] * ex[-1][2] * ex[-1][4];\n+//     DLAM  += -0.352 * z.imag;\n+//     DS    += -0.37 * z.imag;\n+//     GAM1C += 0.001 * z.real;\n+//     SINPI += -0.0028 * z.real;\n \n //     # AddSol(-2.494000, -1.170000, -0.003000, -0.001700, 2.000000, -1.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[-1][2] * ex[-2][4]\n-//     DLAM  += -2.494 * z.imag\n-//     DS    += -1.17 * z.imag\n-//     GAM1C += -0.003 * z.real\n-//     SINPI += -0.0017 * z.real\n+//     z = ex[2][1] * ex[-1][2] * ex[-2][4];\n+//     DLAM  += -2.494 * z.imag;\n+//     DS    += -1.17 * z.imag;\n+//     GAM1C += -0.003 * z.real;\n+//     SINPI += -0.0017 * z.real;\n \n //     # AddSol(0.360000, 0.200000, -0.012000, -0.004300, 2.000000, -1.000000, 0.000000, -4.000000)\n-//     z = ex[2][1] * ex[-1][2] * ex[-4][4]\n-//     DLAM  += 0.360 * z.imag\n-//     DS    += 0.20 * z.imag\n-//     GAM1C += -0.012 * z.real\n-//     SINPI += -0.0043 * z.real\n+//     z = ex[2][1] * ex[-1][2] * ex[-4][4];\n+//     DLAM  += 0.360 * z.imag;\n+//     DS    += 0.20 * z.imag;\n+//     GAM1C += -0.012 * z.real;\n+//     SINPI += -0.0043 * z.real;\n \n //     # AddSol(-1.167000, -1.250000, 0.008000, -0.010600, 1.000000, 2.000000, 0.000000, 0.000000)\n-//     z = ex[1][1] * ex[2][2]\n-//     DLAM  += -1.167 * z.imag\n-//     DS    += -1.25 * z.imag\n-//     GAM1C += 0.008 * z.real\n-//     SINPI += -0.0106 * z.real\n+//     z = ex[1][1] * ex[2][2];\n+//     DLAM  += -1.167 * z.imag;\n+//     DS    += -1.25 * z.imag;\n+//     GAM1C += 0.008 * z.real;\n+//     SINPI += -0.0106 * z.real;\n \n //     # AddSol(-7.412000, -6.120000, 0.117000, 0.048400, 1.000000, 2.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[2][2] * ex[-2][4]\n-//     DLAM  += -7.412 * z.imag\n-//     DS    += -6.12 * z.imag\n-//     GAM1C += 0.117 * z.real\n-//     SINPI += 0.0484 * z.real\n+//     z = ex[1][1] * ex[2][2] * ex[-2][4];\n+//     DLAM  += -7.412 * z.imag;\n+//     DS    += -6.12 * z.imag;\n+//     GAM1C += 0.117 * z.real;\n+//     SINPI += 0.0484 * z.real;\n \n //     # AddSol(-0.311000, -0.650000, -0.032000, 0.004400, 1.000000, 2.000000, 0.000000, -4.000000)\n-//     z = ex[1][1] * ex[2][2] * ex[-4][4]\n-//     DLAM  += -0.311 * z.imag\n-//     DS    += -0.65 * z.imag\n-//     GAM1C += -0.032 * z.real\n-//     SINPI += 0.0044 * z.real\n+//     z = ex[1][1] * ex[2][2] * ex[-4][4];\n+//     DLAM  += -0.311 * z.imag;\n+//     DS    += -0.65 * z.imag;\n+//     GAM1C += -0.032 * z.real;\n+//     SINPI += 0.0044 * z.real;\n \n //     # AddSol(0.757000, 1.820000, -0.105000, 0.011200, 1.000000, -2.000000, 0.000000, 2.000000)\n-//     z = ex[1][1] * ex[-2][2] * ex[2][4]\n-//     DLAM  += 0.757 * z.imag\n-//     DS    += 1.82 * z.imag\n-//     GAM1C += -0.105 * z.real\n-//     SINPI += 0.0112 * z.real\n+//     z = ex[1][1] * ex[-2][2] * ex[2][4];\n+//     DLAM  += 0.757 * z.imag;\n+//     DS    += 1.82 * z.imag;\n+//     GAM1C += -0.105 * z.real;\n+//     SINPI += 0.0112 * z.real;\n \n //     # AddSol(2.580000, 2.320000, 0.027000, 0.019600, 1.000000, -2.000000, 0.000000, 0.000000)\n-//     z = ex[1][1] * ex[-2][2]\n-//     DLAM  += 2.580 * z.imag\n-//     DS    += 2.32 * z.imag\n-//     GAM1C += 0.027 * z.real\n-//     SINPI += 0.0196 * z.real\n+//     z = ex[1][1] * ex[-2][2];\n+//     DLAM  += 2.580 * z.imag;\n+//     DS    += 2.32 * z.imag;\n+//     GAM1C += 0.027 * z.real;\n+//     SINPI += 0.0196 * z.real;\n \n //     # AddSol(2.533000, 2.400000, -0.014000, -0.021200, 1.000000, -2.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[-2][2] * ex[-2][4]\n-//     DLAM  += 2.533 * z.imag\n-//     DS    += 2.40 * z.imag\n-//     GAM1C += -0.014 * z.real\n-//     SINPI += -0.0212 * z.real\n+//     z = ex[1][1] * ex[-2][2] * ex[-2][4];\n+//     DLAM  += 2.533 * z.imag;\n+//     DS    += 2.40 * z.imag;\n+//     GAM1C += -0.014 * z.real;\n+//     SINPI += -0.0212 * z.real;\n \n //     # AddSol(-0.344000, -0.570000, -0.025000, 0.003600, 0.000000, 3.000000, 0.000000, -2.000000)\n-//     z = ex[3][2] * ex[-2][4]\n-//     DLAM  += -0.344 * z.imag\n-//     DS    += -0.57 * z.imag\n-//     GAM1C += -0.025 * z.real\n-//     SINPI += 0.0036 * z.real\n+//     z = ex[3][2] * ex[-2][4];\n+//     DLAM  += -0.344 * z.imag;\n+//     DS    += -0.57 * z.imag;\n+//     GAM1C += -0.025 * z.real;\n+//     SINPI += 0.0036 * z.real;\n \n //     # AddSol(-0.992000, -0.020000, 0.000000, 0.000000, 1.000000, 0.000000, 2.000000, 2.000000)\n-//     z = ex[1][1] * ex[2][3] * ex[2][4]\n-//     DLAM  += -0.992 * z.imag\n-//     DS    += -0.02 * z.imag\n+//     z = ex[1][1] * ex[2][3] * ex[2][4];\n+//     DLAM  += -0.992 * z.imag;\n+//     DS    += -0.02 * z.imag;\n \n //     # AddSol(-45.099000, -0.020000, 0.000000, -0.001000, 1.000000, 0.000000, 2.000000, 0.000000)\n-//     z = ex[1][1] * ex[2][3]\n-//     DLAM  += -45.099 * z.imag\n-//     DS    += -0.02 * z.imag\n-//     SINPI += -0.0010 * z.real\n+//     z = ex[1][1] * ex[2][3];\n+//     DLAM  += -45.099 * z.imag;\n+//     DS    += -0.02 * z.imag;\n+//     SINPI += -0.0010 * z.real;\n \n //     # AddSol(-0.179000, -9.520000, 0.000000, -0.083300, 1.000000, 0.000000, 2.000000, -2.000000)\n-//     z = ex[1][1] * ex[2][3] * ex[-2][4]\n-//     DLAM  += -0.179 * z.imag\n-//     DS    += -9.52 * z.imag\n-//     SINPI += -0.0833 * z.real\n+//     z = ex[1][1] * ex[2][3] * ex[-2][4];\n+//     DLAM  += -0.179 * z.imag;\n+//     DS    += -9.52 * z.imag;\n+//     SINPI += -0.0833 * z.real;\n \n //     # AddSol(-0.301000, -0.330000, 0.000000, 0.001400, 1.000000, 0.000000, 2.000000, -4.000000)\n-//     z = ex[1][1] * ex[2][3] * ex[-4][4]\n-//     DLAM  += -0.301 * z.imag\n-//     DS    += -0.33 * z.imag\n-//     SINPI += 0.0014 * z.real\n+//     z = ex[1][1] * ex[2][3] * ex[-4][4];\n+//     DLAM  += -0.301 * z.imag;\n+//     DS    += -0.33 * z.imag;\n+//     SINPI += 0.0014 * z.real;\n \n //     # AddSol(-6.382000, -3.370000, 0.000000, -0.048100, 1.000000, 0.000000, -2.000000, 2.000000)\n-//     z = ex[1][1] * ex[-2][3] * ex[2][4]\n-//     DLAM  += -6.382 * z.imag\n-//     DS    += -3.37 * z.imag\n-//     SINPI += -0.0481 * z.real\n+//     z = ex[1][1] * ex[-2][3] * ex[2][4];\n+//     DLAM  += -6.382 * z.imag;\n+//     DS    += -3.37 * z.imag;\n+//     SINPI += -0.0481 * z.real;\n \n //     # AddSol(39.528000, 85.130000, 0.000000, -0.713600, 1.000000, 0.000000, -2.000000, 0.000000)\n-//     z = ex[1][1] * ex[-2][3]\n-//     DLAM  += 39.528 * z.imag\n-//     DS    += 85.13 * z.imag\n-//     SINPI += -0.7136 * z.real\n+//     z = ex[1][1] * ex[-2][3];\n+//     DLAM  += 39.528 * z.imag;\n+//     DS    += 85.13 * z.imag;\n+//     SINPI += -0.7136 * z.real;\n \n //     # AddSol(9.366000, 0.710000, 0.000000, -0.011200, 1.000000, 0.000000, -2.000000, -2.000000)\n-//     z = ex[1][1] * ex[-2][3] * ex[-2][4]\n-//     DLAM  += 9.366 * z.imag\n-//     DS    += 0.71 * z.imag\n-//     SINPI += -0.0112 * z.real\n+//     z = ex[1][1] * ex[-2][3] * ex[-2][4];\n+//     DLAM  += 9.366 * z.imag;\n+//     DS    += 0.71 * z.imag;\n+//     SINPI += -0.0112 * z.real;\n \n //     # AddSol(0.202000, 0.020000, 0.000000, 0.000000, 1.000000, 0.000000, -2.000000, -4.000000)\n-//     z = ex[1][1] * ex[-2][3] * ex[-4][4]\n-//     DLAM  += 0.202 * z.imag\n-//     DS    += 0.02 * z.imag\n+//     z = ex[1][1] * ex[-2][3] * ex[-4][4];\n+//     DLAM  += 0.202 * z.imag;\n+//     DS    += 0.02 * z.imag;\n \n //     # AddSol(0.415000, 0.100000, 0.000000, 0.001300, 0.000000, 1.000000, 2.000000, 0.000000)\n-//     z = ex[1][2] * ex[2][3]\n-//     DLAM  += 0.415 * z.imag\n-//     DS    += 0.10 * z.imag\n-//     SINPI += 0.0013 * z.real\n+//     z = ex[1][2] * ex[2][3];\n+//     DLAM  += 0.415 * z.imag;\n+//     DS    += 0.10 * z.imag;\n+//     SINPI += 0.0013 * z.real;\n \n //     # AddSol(-2.152000, -2.260000, 0.000000, -0.006600, 0.000000, 1.000000, 2.000000, -2.000000)\n-//     z = ex[1][2] * ex[2][3] * ex[-2][4]\n-//     DLAM  += -2.152 * z.imag\n-//     DS    += -2.26 * z.imag\n-//     SINPI += -0.0066 * z.real\n+//     z = ex[1][2] * ex[2][3] * ex[-2][4];\n+//     DLAM  += -2.152 * z.imag;\n+//     DS    += -2.26 * z.imag;\n+//     SINPI += -0.0066 * z.real;\n \n //     # AddSol(-1.440000, -1.300000, 0.000000, 0.001400, 0.000000, 1.000000, -2.000000, 2.000000)\n-//     z = ex[1][2] * ex[-2][3] * ex[2][4]\n-//     DLAM  += -1.440 * z.imag\n-//     DS    += -1.30 * z.imag\n-//     SINPI += 0.0014 * z.real\n+//     z = ex[1][2] * ex[-2][3] * ex[2][4];\n+//     DLAM  += -1.440 * z.imag;\n+//     DS    += -1.30 * z.imag;\n+//     SINPI += 0.0014 * z.real;\n \n //     # AddSol(0.384000, -0.040000, 0.000000, 0.000000, 0.000000, 1.000000, -2.000000, -2.000000)\n-//     z = ex[1][2] * ex[-2][3] * ex[-2][4]\n-//     DLAM  += 0.384 * z.imag\n-//     DS    += -0.04 * z.imag\n+//     z = ex[1][2] * ex[-2][3] * ex[-2][4];\n+//     DLAM  += 0.384 * z.imag;\n+//     DS    += -0.04 * z.imag;\n \n //     # AddSol(1.938000, 3.600000, -0.145000, 0.040100, 4.000000, 0.000000, 0.000000, 0.000000)\n-//     z = ex[4][1]\n-//     DLAM  += 1.938 * z.imag\n-//     DS    += 3.60 * z.imag\n-//     GAM1C += -0.145 * z.real\n-//     SINPI += 0.0401 * z.real\n+//     z = ex[4][1];\n+//     DLAM  += 1.938 * z.imag;\n+//     DS    += 3.60 * z.imag;\n+//     GAM1C += -0.145 * z.real;\n+//     SINPI += 0.0401 * z.real;\n \n //     # AddSol(-0.952000, -1.580000, 0.052000, -0.013000, 4.000000, 0.000000, 0.000000, -2.000000)\n-//     z = ex[4][1] * ex[-2][4]\n-//     DLAM  += -0.952 * z.imag\n-//     DS    += -1.58 * z.imag\n-//     GAM1C += 0.052 * z.real\n-//     SINPI += -0.0130 * z.real\n+//     z = ex[4][1] * ex[-2][4];\n+//     DLAM  += -0.952 * z.imag;\n+//     DS    += -1.58 * z.imag;\n+//     GAM1C += 0.052 * z.real;\n+//     SINPI += -0.0130 * z.real;\n \n //     # AddSol(-0.551000, -0.940000, 0.032000, -0.009700, 3.000000, 1.000000, 0.000000, 0.000000)\n-//     z = ex[3][1] * ex[1][2]\n-//     DLAM  += -0.551 * z.imag\n-//     DS    += -0.94 * z.imag\n-//     GAM1C += 0.032 * z.real\n-//     SINPI += -0.0097 * z.real\n+//     z = ex[3][1] * ex[1][2];\n+//     DLAM  += -0.551 * z.imag;\n+//     DS    += -0.94 * z.imag;\n+//     GAM1C += 0.032 * z.real;\n+//     SINPI += -0.0097 * z.real;\n \n //     # AddSol(-0.482000, -0.570000, 0.005000, -0.004500, 3.000000, 1.000000, 0.000000, -2.000000)\n-//     z = ex[3][1] * ex[1][2] * ex[-2][4]\n-//     DLAM  += -0.482 * z.imag\n-//     DS    += -0.57 * z.imag\n-//     GAM1C += 0.005 * z.real\n-//     SINPI += -0.0045 * z.real\n+//     z = ex[3][1] * ex[1][2] * ex[-2][4];\n+//     DLAM  += -0.482 * z.imag;\n+//     DS    += -0.57 * z.imag;\n+//     GAM1C += 0.005 * z.real;\n+//     SINPI += -0.0045 * z.real;\n \n //     # AddSol(0.681000, 0.960000, -0.026000, 0.011500, 3.000000, -1.000000, 0.000000, 0.000000)\n-//     z = ex[3][1] * ex[-1][2]\n-//     DLAM  += 0.681 * z.imag\n-//     DS    += 0.96 * z.imag\n-//     GAM1C += -0.026 * z.real\n-//     SINPI += 0.0115 * z.real\n+//     z = ex[3][1] * ex[-1][2];\n+//     DLAM  += 0.681 * z.imag;\n+//     DS    += 0.96 * z.imag;\n+//     GAM1C += -0.026 * z.real;\n+//     SINPI += 0.0115 * z.real;\n \n //     # AddSol(-0.297000, -0.270000, 0.002000, -0.000900, 2.000000, 2.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[2][2] * ex[-2][4]\n-//     DLAM  += -0.297 * z.imag\n-//     DS    += -0.27 * z.imag\n-//     GAM1C += 0.002 * z.real\n-//     SINPI += -0.0009 * z.real\n+//     z = ex[2][1] * ex[2][2] * ex[-2][4];\n+//     DLAM  += -0.297 * z.imag;\n+//     DS    += -0.27 * z.imag;\n+//     GAM1C += 0.002 * z.real;\n+//     SINPI += -0.0009 * z.real;\n \n //     # AddSol(0.254000, 0.210000, -0.003000, 0.000000, 2.000000, -2.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[-2][2] * ex[-2][4]\n-//     DLAM  += 0.254 * z.imag\n-//     DS    += 0.21 * z.imag\n-//     GAM1C += -0.003 * z.real\n+//     z = ex[2][1] * ex[-2][2] * ex[-2][4];\n+//     DLAM  += 0.254 * z.imag;\n+//     DS    += 0.21 * z.imag;\n+//     GAM1C += -0.003 * z.real;\n \n //     # AddSol(-0.250000, -0.220000, 0.004000, 0.001400, 1.000000, 3.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[3][2] * ex[-2][4]\n-//     DLAM  += -0.250 * z.imag\n-//     DS    += -0.22 * z.imag\n-//     GAM1C += 0.004 * z.real\n-//     SINPI += 0.0014 * z.real\n+//     z = ex[1][1] * ex[3][2] * ex[-2][4];\n+//     DLAM  += -0.250 * z.imag;\n+//     DS    += -0.22 * z.imag;\n+//     GAM1C += 0.004 * z.real;\n+//     SINPI += 0.0014 * z.real;\n \n //     # AddSol(-3.996000, 0.000000, 0.000000, 0.000400, 2.000000, 0.000000, 2.000000, 0.000000)\n-//     z = ex[2][1] * ex[2][3]\n-//     DLAM  += -3.996 * z.imag\n-//     SINPI += 0.0004 * z.real\n+//     z = ex[2][1] * ex[2][3];\n+//     DLAM  += -3.996 * z.imag;\n+//     SINPI += 0.0004 * z.real;\n \n //     # AddSol(0.557000, -0.750000, 0.000000, -0.009000, 2.000000, 0.000000, 2.000000, -2.000000)\n-//     z = ex[2][1] * ex[2][3] * ex[-2][4]\n-//     DLAM  += 0.557 * z.imag\n-//     DS    += -0.75 * z.imag\n-//     SINPI += -0.0090 * z.real\n+//     z = ex[2][1] * ex[2][3] * ex[-2][4];\n+//     DLAM  += 0.557 * z.imag;\n+//     DS    += -0.75 * z.imag;\n+//     SINPI += -0.0090 * z.real;\n \n //     # AddSol(-0.459000, -0.380000, 0.000000, -0.005300, 2.000000, 0.000000, -2.000000, 2.000000)\n-//     z = ex[2][1] * ex[-2][3] * ex[2][4]\n-//     DLAM  += -0.459 * z.imag\n-//     DS    += -0.38 * z.imag\n-//     SINPI += -0.0053 * z.real\n+//     z = ex[2][1] * ex[-2][3] * ex[2][4];\n+//     DLAM  += -0.459 * z.imag;\n+//     DS    += -0.38 * z.imag;\n+//     SINPI += -0.0053 * z.real;\n \n //     # AddSol(-1.298000, 0.740000, 0.000000, 0.000400, 2.000000, 0.000000, -2.000000, 0.000000)\n-//     z = ex[2][1] * ex[-2][3]\n-//     DLAM  += -1.298 * z.imag\n-//     DS    += 0.74 * z.imag\n-//     SINPI += 0.0004 * z.real\n+//     z = ex[2][1] * ex[-2][3];\n+//     DLAM  += -1.298 * z.imag;\n+//     DS    += 0.74 * z.imag;\n+//     SINPI += 0.0004 * z.real;\n \n //     # AddSol(0.538000, 1.140000, 0.000000, -0.014100, 2.000000, 0.000000, -2.000000, -2.000000)\n-//     z = ex[2][1] * ex[-2][3] * ex[-2][4]\n-//     DLAM  += 0.538 * z.imag\n-//     DS    += 1.14 * z.imag\n-//     SINPI += -0.0141 * z.real\n+//     z = ex[2][1] * ex[-2][3] * ex[-2][4];\n+//     DLAM  += 0.538 * z.imag;\n+//     DS    += 1.14 * z.imag;\n+//     SINPI += -0.0141 * z.real;\n \n //     # AddSol(0.263000, 0.020000, 0.000000, 0.000000, 1.000000, 1.000000, 2.000000, 0.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[2][3]\n-//     DLAM  += 0.263 * z.imag\n-//     DS    += 0.02 * z.imag\n+//     z = ex[1][1] * ex[1][2] * ex[2][3];\n+//     DLAM  += 0.263 * z.imag;\n+//     DS    += 0.02 * z.imag;\n \n //     # AddSol(0.426000, 0.070000, 0.000000, -0.000600, 1.000000, 1.000000, -2.000000, -2.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[-2][3] * ex[-2][4]\n-//     DLAM  += 0.426 * z.imag\n-//     DS    += 0.07 * z.imag\n-//     SINPI += -0.0006 * z.real\n+//     z = ex[1][1] * ex[1][2] * ex[-2][3] * ex[-2][4];\n+//     DLAM  += 0.426 * z.imag;\n+//     DS    += 0.07 * z.imag;\n+//     SINPI += -0.0006 * z.real;\n \n //     # AddSol(-0.304000, 0.030000, 0.000000, 0.000300, 1.000000, -1.000000, 2.000000, 0.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[2][3]\n-//     DLAM  += -0.304 * z.imag\n-//     DS    += 0.03 * z.imag\n-//     SINPI += 0.0003 * z.real\n+//     z = ex[1][1] * ex[-1][2] * ex[2][3];\n+//     DLAM  += -0.304 * z.imag;\n+//     DS    += 0.03 * z.imag;\n+//     SINPI += 0.0003 * z.real;\n \n //     # AddSol(-0.372000, -0.190000, 0.000000, -0.002700, 1.000000, -1.000000, -2.000000, 2.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-2][3] * ex[2][4]\n-//     DLAM  += -0.372 * z.imag\n-//     DS    += -0.19 * z.imag\n-//     SINPI += -0.0027 * z.real\n+//     z = ex[1][1] * ex[-1][2] * ex[-2][3] * ex[2][4];\n+//     DLAM  += -0.372 * z.imag;\n+//     DS    += -0.19 * z.imag;\n+//     SINPI += -0.0027 * z.real;\n \n //     # AddSol(0.418000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 4.000000, 0.000000)\n-//     z = ex[4][3]\n-//     DLAM  += 0.418 * z.imag\n+//     z = ex[4][3];\n+//     DLAM  += 0.418 * z.imag;\n \n //     # AddSol(-0.330000, -0.040000, 0.000000, 0.000000, 3.000000, 0.000000, 2.000000, 0.000000)\n-//     z = ex[3][1] * ex[2][3]\n-//     DLAM  += -0.330 * z.imag\n-//     DS    += -0.04 * z.imag\n+//     z = ex[3][1] * ex[2][3];\n+//     DLAM  += -0.330 * z.imag;\n+//     DS    += -0.04 * z.imag;\n \n //     def ADDN(coeffn, p, q, r, s):\n //         return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag\n \n"
                },
                {
                    "date": 1642138795836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n // # непосредственный расчет положения Луны\n dynamic CalcMoon(time) {\n   var T = time.tt / 36525;\n   var ex = _Array2(-6, 6, 1, 4);\n-  print(ex.runtimeType);\n+  // print(ex.runtimeType);\n \n   double Sine(double phi) => sin(_PI2 * phi);\n \n   double Frac(double x) => x - x.floor();\n"
                },
                {
                    "date": 1642139052049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,35 +150,35 @@\n   DS += 14.06 * z.imag;\n   GAM1C += -0.001 * z.real;\n   SINPI += 0.2607 * z.real;\n \n-//     # AddSol(0.403000, -4.010000, 0.394000, 0.002300, 0.000000, 0.000000, 0.000000, 3.000000)\n-  z = ex[3][4];\n-  DLAM += 0.403 * z.imag;\n-  DS += -4.01 * z.imag;\n-  GAM1C += 0.394 * z.real;\n-  SINPI += 0.0023 * z.real;\n+//     // AddSol(0.403000, -4.010000, 0.394000, 0.002300, 0.000000, 0.000000, 0.000000, 3.000000)\n+//   z = ex[3][4];\n+//   DLAM += 0.403 * z.imag;\n+//   DS += -4.01 * z.imag;\n+//   GAM1C += 0.394 * z.real;\n+//   SINPI += 0.0023 * z.real;\n \n-//     # AddSol(2369.912000, 2373.360000, 0.601000, 28.233300, 0.000000, 0.000000, 0.000000, 2.000000)\n-  z = ex[2][4];\n-  DLAM += 2369.912 * z.imag;\n-  DS += 2373.36 * z.imag;\n-  GAM1C += 0.601 * z.real;\n-  SINPI += 28.2333 * z.real;\n+//     //AddSol(2369.912000, 2373.360000, 0.601000, 28.233300, 0.000000, 0.000000, 0.000000, 2.000000)\n+//   z = ex[2][4];\n+//   DLAM += 2369.912 * z.imag;\n+//   DS += 2373.36 * z.imag;\n+//   GAM1C += 0.601 * z.real;\n+//   SINPI += 28.2333 * z.real;\n \n-//     # AddSol(-125.154000, -112.790000, -0.725000, -0.978100, 0.000000, 0.000000, 0.000000, 1.000000)\n-  z = ex[1][4];\n-  DLAM += -125.154 * z.imag;\n-  DS += -112.79 * z.imag;\n-  GAM1C += -0.725 * z.real;\n-  SINPI += -0.9781 * z.real;\n+// //     # AddSol(-125.154000, -112.790000, -0.725000, -0.978100, 0.000000, 0.000000, 0.000000, 1.000000)\n+//   z = ex[1][4];\n+//   DLAM += -125.154 * z.imag;\n+//   DS += -112.79 * z.imag;\n+//   GAM1C += -0.725 * z.real;\n+//   SINPI += -0.9781 * z.real;\n \n-//     # AddSol(1.979000, 6.980000, -0.445000, 0.043300, 1.000000, 0.000000, 0.000000, 4.000000)\n-  z = ex[1][1] * ex[4][4];\n-  DLAM += 1.979 * z.imag;\n-  DS += 6.98 * z.imag;\n-  GAM1C += -0.445 * z.real;\n-  SINPI += 0.0433 * z.real;\n+// //     # AddSol(1.979000, 6.980000, -0.445000, 0.043300, 1.000000, 0.000000, 0.000000, 4.000000)\n+//   z = ex[1][1] * ex[4][4];\n+//   DLAM += 1.979 * z.imag;\n+//   DS += 6.98 * z.imag;\n+//   GAM1C += -0.445 * z.real;\n+//   SINPI += 0.0433 * z.real;\n \n //     # AddSol(191.953000, 192.720000, 0.029000, 3.086100, 1.000000, 0.000000, 0.000000, 2.000000)\n //     z = ex[1][1] * ex[2][4];\n //     DLAM  += 191.953 * z.imag;\n@@ -829,35 +829,37 @@\n //     z = ex[3][1] * ex[2][3];\n //     DLAM  += -0.330 * z.imag;\n //     DS    += -0.04 * z.imag;\n \n-//     def ADDN(coeffn, p, q, r, s):\n-//         return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag\n+    double ADDN(coeffn, p, q, r, s) {\n+        return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag;}\n \n-//     N = 0\n-//     N += ADDN(-526.069, 0, 0,1,-2)\n-//     N += ADDN(  -3.352, 0, 0,1,-4)\n-//     N += ADDN( +44.297,+1, 0,1,-2)\n-//     N += ADDN(  -6.000,+1, 0,1,-4)\n-//     N += ADDN( +20.599,-1, 0,1, 0)\n-//     N += ADDN( -30.598,-1, 0,1,-2)\n-//     N += ADDN( -24.649,-2, 0,1, 0)\n-//     N += ADDN(  -2.000,-2, 0,1,-2)\n-//     N += ADDN( -22.571, 0,+1,1,-2)\n-//     N += ADDN( +10.985, 0,-1,1,-2)\n+    double N = 0;\n+    N += ADDN(-526.069, 0, 0,1,-2);\n+    N += ADDN(  -3.352, 0, 0,1,-4);\n+    N += ADDN( 44.297,1, 0,1,-2);\n+    N += ADDN(  -6.000,1, 0,1,-4);\n+    N += ADDN( 20.599,-1, 0,1, 0);\n+    N += ADDN( -30.598,-1, 0,1,-2);\n+    N += ADDN( -24.649,-2, 0,1, 0);\n+    N += ADDN(  -2.000,-2, 0,1,-2);\n+    N += ADDN( -22.571, 0,1,1,-2);\n+    N += ADDN( 10.985, 0,-1,1,-2);\n \n-//     DLAM += (\n-//         +0.82*Sine(0.7736  -62.5512*T)+0.31*Sine(0.0466 -125.1025*T)\n-//         +0.35*Sine(0.5785  -25.1042*T)+0.66*Sine(0.4591+1335.8075*T)\n-//         +0.64*Sine(0.3130  -91.5680*T)+1.14*Sine(0.1480+1331.2898*T)\n-//         +0.21*Sine(0.5918+1056.5859*T)+0.44*Sine(0.5784+1322.8595*T)\n-//         +0.24*Sine(0.2275   -5.7374*T)+0.28*Sine(0.2965   +2.6929*T)\n-//         +0.33*Sine(0.3132   +6.3368*T)\n-//     )\n-//     S = F + DS/ARC\n-//     lat_seconds = (1.000002708 + 139.978*DGAM)*(18518.511+1.189+GAM1C)*sin(S) - 6.24*sin(3*S) + N\n-//     return _moonpos(\n-//         PI2 * Frac((L0+DLAM/ARC) / PI2),\n-//         (pi / (180 * 3600)) * lat_seconds,\n-//         (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n-//     )\n+    DLAM += (\n+        +0.82*Sine(0.7736  -62.5512*T)+0.31*Sine(0.0466 -125.1025*T)\n+        +0.35*Sine(0.5785  -25.1042*T)+0.66*Sine(0.4591+1335.8075*T)\n+        +0.64*Sine(0.3130  -91.5680*T)+1.14*Sine(0.1480+1331.2898*T)\n+        +0.21*Sine(0.5918+1056.5859*T)+0.44*Sine(0.5784+1322.8595*T)\n+        +0.24*Sine(0.2275   -5.7374*T)+0.28*Sine(0.2965   +2.6929*T)\n+        +0.33*Sine(0.3132   +6.3368*T)\n+    );\n+\n+    var S = F + DS/ARC;\n+    var lat_seconds = (1.000002708 + 139.978*DGAM)*(18518.511+1.189+GAM1C)*sin(S) - 6.24*sin(3*S) + N;\n+\n+    return _moonpos(\n+        PI2 * Frac((L0+DLAM/ARC) / PI2),\n+        (pi / (180 * 3600)) * lat_seconds,\n+        (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n+    );\n }\n"
                },
                {
                    "date": 1642139116713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -829,37 +829,43 @@\n //     z = ex[3][1] * ex[2][3];\n //     DLAM  += -0.330 * z.imag;\n //     DS    += -0.04 * z.imag;\n \n-    double ADDN(coeffn, p, q, r, s) {\n-        return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag;}\n+  double ADDN(coeffn, p, q, r, s) {\n+    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag;\n+  }\n \n-    double N = 0;\n-    N += ADDN(-526.069, 0, 0,1,-2);\n-    N += ADDN(  -3.352, 0, 0,1,-4);\n-    N += ADDN( 44.297,1, 0,1,-2);\n-    N += ADDN(  -6.000,1, 0,1,-4);\n-    N += ADDN( 20.599,-1, 0,1, 0);\n-    N += ADDN( -30.598,-1, 0,1,-2);\n-    N += ADDN( -24.649,-2, 0,1, 0);\n-    N += ADDN(  -2.000,-2, 0,1,-2);\n-    N += ADDN( -22.571, 0,1,1,-2);\n-    N += ADDN( 10.985, 0,-1,1,-2);\n+  double N = 0;\n+  N += ADDN(-526.069, 0, 0, 1, -2);\n+  N += ADDN(-3.352, 0, 0, 1, -4);\n+  N += ADDN(44.297, 1, 0, 1, -2);\n+  N += ADDN(-6.000, 1, 0, 1, -4);\n+  N += ADDN(20.599, -1, 0, 1, 0);\n+  N += ADDN(-30.598, -1, 0, 1, -2);\n+  N += ADDN(-24.649, -2, 0, 1, 0);\n+  N += ADDN(-2.000, -2, 0, 1, -2);\n+  N += ADDN(-22.571, 0, 1, 1, -2);\n+  N += ADDN(10.985, 0, -1, 1, -2);\n \n-    DLAM += (\n-        +0.82*Sine(0.7736  -62.5512*T)+0.31*Sine(0.0466 -125.1025*T)\n-        +0.35*Sine(0.5785  -25.1042*T)+0.66*Sine(0.4591+1335.8075*T)\n-        +0.64*Sine(0.3130  -91.5680*T)+1.14*Sine(0.1480+1331.2898*T)\n-        +0.21*Sine(0.5918+1056.5859*T)+0.44*Sine(0.5784+1322.8595*T)\n-        +0.24*Sine(0.2275   -5.7374*T)+0.28*Sine(0.2965   +2.6929*T)\n-        +0.33*Sine(0.3132   +6.3368*T)\n-    );\n+  DLAM += (0.82 * Sine(0.7736 - 62.5512 * T) +\n+      0.31 * Sine(0.0466 - 125.1025 * T) +\n+      0.35 * Sine(0.5785 - 25.1042 * T) +\n+      0.66 * Sine(0.4591 + 1335.8075 * T) +\n+      0.64 * Sine(0.3130 - 91.5680 * T) +\n+      1.14 * Sine(0.1480 + 1331.2898 * T) +\n+      0.21 * Sine(0.5918 + 1056.5859 * T) +\n+      0.44 * Sine(0.5784 + 1322.8595 * T) +\n+      0.24 * Sine(0.2275 - 5.7374 * T) +\n+      0.28 * Sine(0.2965 + 2.6929 * T) +\n+      0.33 * Sine(0.3132 + 6.3368 * T));\n \n-    var S = F + DS/ARC;\n-    var lat_seconds = (1.000002708 + 139.978*DGAM)*(18518.511+1.189+GAM1C)*sin(S) - 6.24*sin(3*S) + N;\n+  var S = F + DS / ARC;\n+  var lat_seconds =\n+      (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * sin(S) -\n+          6.24 * sin(3 * S) +\n+          N;\n \n-    return _moonpos(\n-        PI2 * Frac((L0+DLAM/ARC) / PI2),\n-        (pi / (180 * 3600)) * lat_seconds,\n-        (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n-    );\n+  return _moonpos(\n+      PI2 * Frac((L0 + DLAM / ARC) / PI2),\n+      (pi / (180 * 3600)) * lat_seconds,\n+      (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI));\n }\n"
                },
                {
                    "date": 1642157578100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,15 +142,133 @@\n     }\n \n     I++;\n   }\n+  dynamic Term(p, q, r, s) {\n+    var x, y, k;\n+    dynamic result = {x: 1, y: 0};\n+    var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n+    return result;\n+  }\n \n+  dynamic AddSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n+    var result = Term(p, q, r, s);\n+    DLAM += coeffl * result.y;\n+    DS += coeffs * result.y;\n+    GAM1C += coeffg * result.x;\n+    SINPI += coeffp * result.x;\n+  }\n+\n+  AddSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n+  AddSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n+  AddSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);\n+  AddSol(-125.1540, -112.7900, -0.7250, -0.9781, 0, 0, 0, 1);\n+  AddSol(1.9790, 6.9800, -0.4450, 0.0433, 1, 0, 0, 4);\n+  AddSol(191.9530, 192.7200, 0.0290, 3.0861, 1, 0, 0, 2);\n+  AddSol(-8.4660, -13.5100, 0.4550, -0.1093, 1, 0, 0, 1);\n+  AddSol(22639.5000, 22609.0700, 0.0790, 186.5398, 1, 0, 0, 0);\n+  AddSol(18.6090, 3.5900, -0.0940, 0.0118, 1, 0, 0, -1);\n+  AddSol(-4586.4650, -4578.1300, -0.0770, 34.3117, 1, 0, 0, -2);\n+  AddSol(3.2150, 5.4400, 0.1920, -0.0386, 1, 0, 0, -3);\n+  AddSol(-38.4280, -38.6400, 0.0010, 0.6008, 1, 0, 0, -4);\n+  AddSol(-0.3930, -1.4300, -0.0920, 0.0086, 1, 0, 0, -6);\n+  AddSol(-0.2890, -1.5900, 0.1230, -0.0053, 0, 1, 0, 4);\n+  AddSol(-24.4200, -25.1000, 0.0400, -0.3000, 0, 1, 0, 2);\n+  AddSol(18.0230, 17.9300, 0.0070, 0.1494, 0, 1, 0, 1);\n+  AddSol(-668.1460, -126.9800, -1.3020, -0.3997, 0, 1, 0, 0);\n+  AddSol(0.5600, 0.3200, -0.0010, -0.0037, 0, 1, 0, -1);\n+  AddSol(-165.1450, -165.0600, 0.0540, 1.9178, 0, 1, 0, -2);\n+  AddSol(-1.8770, -6.4600, -0.4160, 0.0339, 0, 1, 0, -4);\n+  AddSol(0.2130, 1.0200, -0.0740, 0.0054, 2, 0, 0, 4);\n+  AddSol(14.3870, 14.7800, -0.0170, 0.2833, 2, 0, 0, 2);\n+  AddSol(-0.5860, -1.2000, 0.0540, -0.0100, 2, 0, 0, 1);\n+  AddSol(769.0160, 767.9600, 0.1070, 10.1657, 2, 0, 0, 0);\n+  AddSol(1.7500, 2.0100, -0.0180, 0.0155, 2, 0, 0, -1);\n+  AddSol(-211.6560, -152.5300, 5.6790, -0.3039, 2, 0, 0, -2);\n+  AddSol(1.2250, 0.9100, -0.0300, -0.0088, 2, 0, 0, -3);\n+  AddSol(-30.7730, -34.0700, -0.3080, 0.3722, 2, 0, 0, -4);\n+  AddSol(-0.5700, -1.4000, -0.0740, 0.0109, 2, 0, 0, -6);\n+  AddSol(-2.9210, -11.7500, 0.7870, -0.0484, 1, 1, 0, 2);\n+  AddSol(1.2670, 1.5200, -0.0220, 0.0164, 1, 1, 0, 1);\n+  AddSol(-109.6730, -115.1800, 0.4610, -0.9490, 1, 1, 0, 0);\n+  AddSol(-205.9620, -182.3600, 2.0560, 1.4437, 1, 1, 0, -2);\n+  AddSol(0.2330, 0.3600, 0.0120, -0.0025, 1, 1, 0, -3);\n+  AddSol(-4.3910, -9.6600, -0.4710, 0.0673, 1, 1, 0, -4);\n+  AddSol(0.2830, 1.5300, -0.1110, 0.0060, 1, -1, 0, 4);\n+  AddSol(14.5770, 31.7000, -1.5400, 0.2302, 1, -1, 0, 2);\n+  AddSol(147.6870, 138.7600, 0.6790, 1.1528, 1, -1, 0, 0);\n+  AddSol(-1.0890, 0.5500, 0.0210, 0.0000, 1, -1, 0, -1);\n+  AddSol(28.4750, 23.5900, -0.4430, -0.2257, 1, -1, 0, -2);\n+  AddSol(-0.2760, -0.3800, -0.0060, -0.0036, 1, -1, 0, -3);\n+  AddSol(0.6360, 2.2700, 0.1460, -0.0102, 1, -1, 0, -4);\n+  AddSol(-0.1890, -1.6800, 0.1310, -0.0028, 0, 2, 0, 2);\n+  AddSol(-7.4860, -0.6600, -0.0370, -0.0086, 0, 2, 0, 0);\n+  AddSol(-8.0960, -16.3500, -0.7400, 0.0918, 0, 2, 0, -2);\n+  AddSol(-5.7410, -0.0400, 0.0000, -0.0009, 0, 0, 2, 2);\n+  AddSol(0.2550, 0.0000, 0.0000, 0.0000, 0, 0, 2, 1);\n+  AddSol(-411.6080, -0.2000, 0.0000, -0.0124, 0, 0, 2, 0);\n+  AddSol(0.5840, 0.8400, 0.0000, 0.0071, 0, 0, 2, -1);\n+  AddSol(-55.1730, -52.1400, 0.0000, -0.1052, 0, 0, 2, -2);\n+  AddSol(0.2540, 0.2500, 0.0000, -0.0017, 0, 0, 2, -3);\n+  AddSol(0.0250, -1.6700, 0.0000, 0.0031, 0, 0, 2, -4);\n+  AddSol(1.0600, 2.9600, -0.1660, 0.0243, 3, 0, 0, 2);\n+  AddSol(36.1240, 50.6400, -1.3000, 0.6215, 3, 0, 0, 0);\n+  AddSol(-13.1930, -16.4000, 0.2580, -0.1187, 3, 0, 0, -2);\n+  AddSol(-1.1870, -0.7400, 0.0420, 0.0074, 3, 0, 0, -4);\n+  AddSol(-0.2930, -0.3100, -0.0020, 0.0046, 3, 0, 0, -6);\n+  AddSol(-0.2900, -1.4500, 0.1160, -0.0051, 2, 1, 0, 2);\n+  AddSol(-7.6490, -10.5600, 0.2590, -0.1038, 2, 1, 0, 0);\n+  AddSol(-8.6270, -7.5900, 0.0780, -0.0192, 2, 1, 0, -2);\n+  AddSol(-2.7400, -2.5400, 0.0220, 0.0324, 2, 1, 0, -4);\n+  AddSol(1.1810, 3.3200, -0.2120, 0.0213, 2, -1, 0, 2);\n+  AddSol(9.7030, 11.6700, -0.1510, 0.1268, 2, -1, 0, 0);\n+  AddSol(-0.3520, -0.3700, 0.0010, -0.0028, 2, -1, 0, -1);\n+  AddSol(-2.4940, -1.1700, -0.0030, -0.0017, 2, -1, 0, -2);\n+  AddSol(0.3600, 0.2000, -0.0120, -0.0043, 2, -1, 0, -4);\n+  AddSol(-1.1670, -1.2500, 0.0080, -0.0106, 1, 2, 0, 0);\n+  AddSol(-7.4120, -6.1200, 0.1170, 0.0484, 1, 2, 0, -2);\n+  AddSol(-0.3110, -0.6500, -0.0320, 0.0044, 1, 2, 0, -4);\n+  AddSol(0.7570, 1.8200, -0.1050, 0.0112, 1, -2, 0, 2);\n+  AddSol(2.5800, 2.3200, 0.0270, 0.0196, 1, -2, 0, 0);\n+  AddSol(2.5330, 2.4000, -0.0140, -0.0212, 1, -2, 0, -2);\n+  AddSol(-0.3440, -0.5700, -0.0250, 0.0036, 0, 3, 0, -2);\n+  AddSol(-0.9920, -0.0200, 0.0000, 0.0000, 1, 0, 2, 2);\n+  AddSol(-45.0990, -0.0200, 0.0000, -0.0010, 1, 0, 2, 0);\n+  AddSol(-0.1790, -9.5200, 0.0000, -0.0833, 1, 0, 2, -2);\n+  AddSol(-0.3010, -0.3300, 0.0000, 0.0014, 1, 0, 2, -4);\n+  AddSol(-6.3820, -3.3700, 0.0000, -0.0481, 1, 0, -2, 2);\n+  AddSol(39.5280, 85.1300, 0.0000, -0.7136, 1, 0, -2, 0);\n+  AddSol(9.3660, 0.7100, 0.0000, -0.0112, 1, 0, -2, -2);\n+  AddSol(0.2020, 0.0200, 0.0000, 0.0000, 1, 0, -2, -4);\n+  AddSol(0.4150, 0.1000, 0.0000, 0.0013, 0, 1, 2, 0);\n+  AddSol(-2.1520, -2.2600, 0.0000, -0.0066, 0, 1, 2, -2);\n+  AddSol(-1.4400, -1.3000, 0.0000, 0.0014, 0, 1, -2, 2);\n+  AddSol(0.3840, -0.0400, 0.0000, 0.0000, 0, 1, -2, -2);\n+  AddSol(1.9380, 3.6000, -0.1450, 0.0401, 4, 0, 0, 0);\n+  AddSol(-0.9520, -1.5800, 0.0520, -0.0130, 4, 0, 0, -2);\n+  AddSol(-0.5510, -0.9400, 0.0320, -0.0097, 3, 1, 0, 0);\n+  AddSol(-0.4820, -0.5700, 0.0050, -0.0045, 3, 1, 0, -2);\n+  AddSol(0.6810, 0.9600, -0.0260, 0.0115, 3, -1, 0, 0);\n+  AddSol(-0.2970, -0.2700, 0.0020, -0.0009, 2, 2, 0, -2);\n+  AddSol(0.2540, 0.2100, -0.0030, 0.0000, 2, -2, 0, -2);\n+  AddSol(-0.2500, -0.2200, 0.0040, 0.0014, 1, 3, 0, -2);\n+  AddSol(-3.9960, 0.0000, 0.0000, 0.0004, 2, 0, 2, 0);\n+  AddSol(0.5570, -0.7500, 0.0000, -0.0090, 2, 0, 2, -2);\n+  AddSol(-0.4590, -0.3800, 0.0000, -0.0053, 2, 0, -2, 2);\n+  AddSol(-1.2980, 0.7400, 0.0000, 0.0004, 2, 0, -2, 0);\n+  AddSol(0.5380, 1.1400, 0.0000, -0.0141, 2, 0, -2, -2);\n+  AddSol(0.2630, 0.0200, 0.0000, 0.0000, 1, 1, 2, 0);\n+  AddSol(0.4260, 0.0700, 0.0000, -0.0006, 1, 1, -2, -2);\n+  AddSol(-0.3040, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);\n+  AddSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n+  AddSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n+  AddSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n // AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n-  var z = ex[4][4];\n-  DLAM += 13.902 * z.imag;\n-  DS += 14.06 * z.imag;\n-  GAM1C += -0.001 * z.real;\n-  SINPI += 0.2607 * z.real;\n+  // var z = ex[4][4];\n+  // DLAM += 13.902 * z.imag;\n+  // DS += 14.06 * z.imag;\n+  // GAM1C += -0.001 * z.real;\n+  // SINPI += 0.2607 * z.real;\n \n //     // AddSol(0.403000, -4.010000, 0.394000, 0.002300, 0.000000, 0.000000, 0.000000, 3.000000)\n //   z = ex[3][4];\n //   DLAM += 0.403 * z.imag;\n"
                },
                {
                    "date": 1642380362563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,22 +5,22 @@\n import 'dart:math';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n-import 'src/complex.dart';\n+// import 'src/complex.dart';\n \n-double _PI2 = 2.0 * pi;\n-double _ARC = 3600.0 * 180.0 / pi;\n+double _pi2 = 2.0 * pi;\n+double _arc = 3600.0 * 180.0 / pi;\n \n-Vector GeoMoon(time) {\n+Vector geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n-  var m = CalcMoon(time);\n+  var m = calcMoon(time);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n-  double dist_cos_lat = m.distance_au * cos(m.geo_eclip_lat);\n+  double distCosLat = m.distance_au * cos(m.geo_eclip_lat);\n   List gepos = [\n-    dist_cos_lat * cos(m.geo_eclip_lon),\n-    dist_cos_lat * sin(m.geo_eclip_lon),\n+    distCosLat * cos(m.geo_eclip_lon),\n+    distCosLat * sin(m.geo_eclip_lon),\n     m.distance_au * sin(m.geo_eclip_lat)\n   ];\n \n   // Преобразование эклиптических координат в экваториальные'.\n@@ -32,131 +32,131 @@\n   return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n   // , degrees(m.geo_eclip_lon)\n }\n \n-Map _Array1(int xmin, int xmax) {\n+Map _array1(int xmin, int xmax) {\n   Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n   return arr1;\n }\n \n-Map _Array2(int xmin, int xmax, int ymin, int ymax) {\n-  Map _arr1 = _Array1(ymin, ymax);\n+Map _array2(int xmin, int xmax, int ymin, int ymax) {\n+  Map _arr1 = _array1(ymin, ymax);\n   Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n   return arr2;\n }\n \n-class _moonpos {\n+class MoonPos {\n   double lon, lat, dist;\n-  _moonpos(this.lon, this.lat, this.dist) {\n-    var geo_eclip_lon = lon;\n-    var geo_eclip_lat = lat;\n-    var distance_au = dist;\n+  MoonPos(this.lon, this.lat, this.dist) {\n+    var geoEclipLon = lon;\n+    var geoEclipLat = lat;\n+    var distanceAu = dist;\n   }\n }\n \n // # непосредственный расчет положения Луны\n-dynamic CalcMoon(time) {\n+dynamic calcMoon(time) {\n   var T = time.tt / 36525;\n-  var ex = _Array2(-6, 6, 1, 4);\n+  var ex = _array2(-6, 6, 1, 4);\n   // print(ex.runtimeType);\n \n-  double Sine(double phi) => sin(_PI2 * phi);\n+  double sine(double phi) => sin(_pi2 * phi);\n \n-  double Frac(double x) => x - x.floor();\n+  double frac(double x) => x - x.floor();\n \n-  var T2 = T * T;\n-  double DLAM = 0;\n-  double DS = 0;\n-  double GAM1C = 0;\n-  double SINPI = 3422.7000;\n-  var S1 = Sine(0.19833 + 0.05611 * T);\n-  var S2 = Sine(0.27869 + 0.04508 * T);\n-  var S3 = Sine(0.16827 - 0.36903 * T);\n-  var S4 = Sine(0.34734 - 5.37261 * T);\n-  var S5 = Sine(0.10498 - 5.37899 * T);\n-  var S6 = Sine(0.42681 - 0.41855 * T);\n-  var S7 = Sine(0.14943 - 5.37511 * T);\n-  var DL0 =\n-      0.84 * S1 + 0.31 * S2 + 14.27 * S3 + 7.26 * S4 + 0.28 * S5 + 0.24 * S6;\n-  var DL =\n-      2.94 * S1 + 0.31 * S2 + 14.27 * S3 + 9.34 * S4 + 1.12 * S5 + 0.83 * S6;\n-  var DLS = -6.40 * S1 - 1.89 * S6;\n-  var DF = 0.21 * S1 +\n-      0.31 * S2 +\n-      14.27 * S3 -\n-      88.70 * S4 -\n-      15.30 * S5 +\n-      0.24 * S6 -\n-      1.86 * S7;\n-  var DD = DL0 - DLS;\n-  var DGAM = ((-3332E-9 * Sine(0.59734 - 5.37261 * T) -\n-      539E-9 * Sine(0.35498 - 5.37899 * T) -\n-      64E-9 * Sine(0.39943 - 5.37511 * T)));\n+  var t2 = T * T;\n+  double dlam = 0;\n+  double ds = 0;\n+  double gam1c = 0;\n+  double sinpi = 3422.7000;\n+  var s1 = sine(0.19833 + 0.05611 * T);\n+  var s2 = sine(0.27869 + 0.04508 * T);\n+  var s3 = sine(0.16827 - 0.36903 * T);\n+  var s4 = sine(0.34734 - 5.37261 * T);\n+  var s5 = sine(0.10498 - 5.37899 * T);\n+  var s6 = sine(0.42681 - 0.41855 * T);\n+  var s7 = sine(0.14943 - 5.37511 * T);\n+  var dl0 =\n+      0.84 * s1 + 0.31 * s2 + 14.27 * s3 + 7.26 * s4 + 0.28 * s5 + 0.24 * s6;\n+  var dl =\n+      2.94 * s1 + 0.31 * s2 + 14.27 * s3 + 9.34 * s4 + 1.12 * s5 + 0.83 * s6;\n+  var dls = -6.40 * s1 - 1.89 * s6;\n+  var df = 0.21 * s1 +\n+      0.31 * s2 +\n+      14.27 * s3 -\n+      88.70 * s4 -\n+      15.30 * s5 +\n+      0.24 * s6 -\n+      1.86 * s7;\n+  var dd = dl0 - dls;\n+  var dgam = ((-3332E-9 * sine(0.59734 - 5.37261 * T) -\n+      539E-9 * sine(0.35498 - 5.37899 * T) -\n+      64E-9 * sine(0.39943 - 5.37511 * T)));\n \n-  var L0 = _PI2 * Frac(0.60643382 + 1336.85522467 * T - 0.00000313 * T2) +\n-      DL0 / _ARC;\n+  var l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n+      dl0 / _arc;\n   var L =\n-      _PI2 * Frac(0.37489701 + 1325.55240982 * T + 0.00002565 * T2) + DL / _ARC;\n-  var LS =\n-      _PI2 * Frac(0.99312619 + 99.99735956 * T - 0.00000044 * T2) + DLS / _ARC;\n+      _pi2 * frac(0.37489701 + 1325.55240982 * T + 0.00002565 * t2) + dl / _arc;\n+  var ls =\n+      _pi2 * frac(0.99312619 + 99.99735956 * T - 0.00000044 * t2) + dls / _arc;\n   var F =\n-      _PI2 * Frac(0.25909118 + 1342.22782980 * T - 0.00000892 * T2) + DF / _ARC;\n+      _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n-      _PI2 * Frac(0.82736186 + 1236.85308708 * T - 0.00000397 * T2) + DD / _ARC;\n+      _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n   var I = 1;\n-  var ARG, MAX, FAC, J;\n+  var arg, max, fac, J;\n   while (I <= 4) {\n     if (I == 1) {\n-      ARG = L;\n-      MAX = 4;\n-      FAC = 1.000002208;\n+      arg = L;\n+      max = 4;\n+      fac = 1.000002208;\n     }\n     if (I == 2) {\n-      ARG = LS;\n-      MAX = 3;\n-      FAC = 0.997504612 - 0.002495388 * T;\n+      arg = ls;\n+      max = 3;\n+      fac = 0.997504612 - 0.002495388 * T;\n     }\n     if (I == 3) {\n-      ARG = F;\n-      MAX = 4;\n-      FAC = 1.000002708 + 139.978 * DGAM;\n+      arg = F;\n+      max = 4;\n+      fac = 1.000002708 + 139.978 * dgam;\n     } else {\n-      ARG = D;\n-      MAX = 6;\n-      FAC = 1.0;\n+      arg = D;\n+      max = 6;\n+      fac = 1.0;\n     }\n \n     // var ex[0][I] = complex(1, 0);\n     // var ex[1][I] = complex(FAC * cos(ARG), FAC * sin(ARG));\n \n     J = 2;\n-    while (J <= MAX) {\n+    while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n \n     J = 1;\n-    while (J <= MAX) {\n+    while (J <= max) {\n       ex[-J][I] = ex[J][I].conjugate();\n       J += 1;\n     }\n \n     I++;\n   }\n-  dynamic Term(p, q, r, s) {\n+  dynamic term(p, q, r, s) {\n     var x, y, k;\n     dynamic result = {x: 1, y: 0};\n     var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n     return result;\n   }\n \n   dynamic AddSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n-    var result = Term(p, q, r, s);\n-    DLAM += coeffl * result.y;\n-    DS += coeffs * result.y;\n-    GAM1C += coeffg * result.x;\n-    SINPI += coeffp * result.x;\n+    var result = term(p, q, r, s);\n+    dlam += coeffl * result.y;\n+    ds += coeffs * result.y;\n+    gam1c += coeffg * result.x;\n+    sinpi += coeffp * result.x;\n   }\n \n   AddSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n   AddSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n@@ -963,27 +963,27 @@\n   N += ADDN(-2.000, -2, 0, 1, -2);\n   N += ADDN(-22.571, 0, 1, 1, -2);\n   N += ADDN(10.985, 0, -1, 1, -2);\n \n-  DLAM += (0.82 * Sine(0.7736 - 62.5512 * T) +\n-      0.31 * Sine(0.0466 - 125.1025 * T) +\n-      0.35 * Sine(0.5785 - 25.1042 * T) +\n-      0.66 * Sine(0.4591 + 1335.8075 * T) +\n-      0.64 * Sine(0.3130 - 91.5680 * T) +\n-      1.14 * Sine(0.1480 + 1331.2898 * T) +\n-      0.21 * Sine(0.5918 + 1056.5859 * T) +\n-      0.44 * Sine(0.5784 + 1322.8595 * T) +\n-      0.24 * Sine(0.2275 - 5.7374 * T) +\n-      0.28 * Sine(0.2965 + 2.6929 * T) +\n-      0.33 * Sine(0.3132 + 6.3368 * T));\n+  dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n+      0.31 * sine(0.0466 - 125.1025 * T) +\n+      0.35 * sine(0.5785 - 25.1042 * T) +\n+      0.66 * sine(0.4591 + 1335.8075 * T) +\n+      0.64 * sine(0.3130 - 91.5680 * T) +\n+      1.14 * sine(0.1480 + 1331.2898 * T) +\n+      0.21 * sine(0.5918 + 1056.5859 * T) +\n+      0.44 * sine(0.5784 + 1322.8595 * T) +\n+      0.24 * sine(0.2275 - 5.7374 * T) +\n+      0.28 * sine(0.2965 + 2.6929 * T) +\n+      0.33 * sine(0.3132 + 6.3368 * T));\n \n-  var S = F + DS / ARC;\n-  var lat_seconds =\n-      (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * sin(S) -\n+  var S = F + ds / ARC;\n+  var latSeconds =\n+      (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n \n-  return _moonpos(\n-      PI2 * Frac((L0 + DLAM / ARC) / PI2),\n-      (pi / (180 * 3600)) * lat_seconds,\n-      (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI));\n+  return MoonPos(\n+      PI2 * frac((l0 + dlam / ARC) / PI2),\n+      (pi / (180 * 3600)) * latSeconds,\n+      (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n }\n"
                },
                {
                    "date": 1642380434302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,120 +149,120 @@\n     var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n     return result;\n   }\n \n-  dynamic AddSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n+  dynamic addSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n     var result = term(p, q, r, s);\n     dlam += coeffl * result.y;\n     ds += coeffs * result.y;\n     gam1c += coeffg * result.x;\n     sinpi += coeffp * result.x;\n   }\n \n-  AddSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n-  AddSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n-  AddSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);\n-  AddSol(-125.1540, -112.7900, -0.7250, -0.9781, 0, 0, 0, 1);\n-  AddSol(1.9790, 6.9800, -0.4450, 0.0433, 1, 0, 0, 4);\n-  AddSol(191.9530, 192.7200, 0.0290, 3.0861, 1, 0, 0, 2);\n-  AddSol(-8.4660, -13.5100, 0.4550, -0.1093, 1, 0, 0, 1);\n-  AddSol(22639.5000, 22609.0700, 0.0790, 186.5398, 1, 0, 0, 0);\n-  AddSol(18.6090, 3.5900, -0.0940, 0.0118, 1, 0, 0, -1);\n-  AddSol(-4586.4650, -4578.1300, -0.0770, 34.3117, 1, 0, 0, -2);\n-  AddSol(3.2150, 5.4400, 0.1920, -0.0386, 1, 0, 0, -3);\n-  AddSol(-38.4280, -38.6400, 0.0010, 0.6008, 1, 0, 0, -4);\n-  AddSol(-0.3930, -1.4300, -0.0920, 0.0086, 1, 0, 0, -6);\n-  AddSol(-0.2890, -1.5900, 0.1230, -0.0053, 0, 1, 0, 4);\n-  AddSol(-24.4200, -25.1000, 0.0400, -0.3000, 0, 1, 0, 2);\n-  AddSol(18.0230, 17.9300, 0.0070, 0.1494, 0, 1, 0, 1);\n-  AddSol(-668.1460, -126.9800, -1.3020, -0.3997, 0, 1, 0, 0);\n-  AddSol(0.5600, 0.3200, -0.0010, -0.0037, 0, 1, 0, -1);\n-  AddSol(-165.1450, -165.0600, 0.0540, 1.9178, 0, 1, 0, -2);\n-  AddSol(-1.8770, -6.4600, -0.4160, 0.0339, 0, 1, 0, -4);\n-  AddSol(0.2130, 1.0200, -0.0740, 0.0054, 2, 0, 0, 4);\n-  AddSol(14.3870, 14.7800, -0.0170, 0.2833, 2, 0, 0, 2);\n-  AddSol(-0.5860, -1.2000, 0.0540, -0.0100, 2, 0, 0, 1);\n-  AddSol(769.0160, 767.9600, 0.1070, 10.1657, 2, 0, 0, 0);\n-  AddSol(1.7500, 2.0100, -0.0180, 0.0155, 2, 0, 0, -1);\n-  AddSol(-211.6560, -152.5300, 5.6790, -0.3039, 2, 0, 0, -2);\n-  AddSol(1.2250, 0.9100, -0.0300, -0.0088, 2, 0, 0, -3);\n-  AddSol(-30.7730, -34.0700, -0.3080, 0.3722, 2, 0, 0, -4);\n-  AddSol(-0.5700, -1.4000, -0.0740, 0.0109, 2, 0, 0, -6);\n-  AddSol(-2.9210, -11.7500, 0.7870, -0.0484, 1, 1, 0, 2);\n-  AddSol(1.2670, 1.5200, -0.0220, 0.0164, 1, 1, 0, 1);\n-  AddSol(-109.6730, -115.1800, 0.4610, -0.9490, 1, 1, 0, 0);\n-  AddSol(-205.9620, -182.3600, 2.0560, 1.4437, 1, 1, 0, -2);\n-  AddSol(0.2330, 0.3600, 0.0120, -0.0025, 1, 1, 0, -3);\n-  AddSol(-4.3910, -9.6600, -0.4710, 0.0673, 1, 1, 0, -4);\n-  AddSol(0.2830, 1.5300, -0.1110, 0.0060, 1, -1, 0, 4);\n-  AddSol(14.5770, 31.7000, -1.5400, 0.2302, 1, -1, 0, 2);\n-  AddSol(147.6870, 138.7600, 0.6790, 1.1528, 1, -1, 0, 0);\n-  AddSol(-1.0890, 0.5500, 0.0210, 0.0000, 1, -1, 0, -1);\n-  AddSol(28.4750, 23.5900, -0.4430, -0.2257, 1, -1, 0, -2);\n-  AddSol(-0.2760, -0.3800, -0.0060, -0.0036, 1, -1, 0, -3);\n-  AddSol(0.6360, 2.2700, 0.1460, -0.0102, 1, -1, 0, -4);\n-  AddSol(-0.1890, -1.6800, 0.1310, -0.0028, 0, 2, 0, 2);\n-  AddSol(-7.4860, -0.6600, -0.0370, -0.0086, 0, 2, 0, 0);\n-  AddSol(-8.0960, -16.3500, -0.7400, 0.0918, 0, 2, 0, -2);\n-  AddSol(-5.7410, -0.0400, 0.0000, -0.0009, 0, 0, 2, 2);\n-  AddSol(0.2550, 0.0000, 0.0000, 0.0000, 0, 0, 2, 1);\n-  AddSol(-411.6080, -0.2000, 0.0000, -0.0124, 0, 0, 2, 0);\n-  AddSol(0.5840, 0.8400, 0.0000, 0.0071, 0, 0, 2, -1);\n-  AddSol(-55.1730, -52.1400, 0.0000, -0.1052, 0, 0, 2, -2);\n-  AddSol(0.2540, 0.2500, 0.0000, -0.0017, 0, 0, 2, -3);\n-  AddSol(0.0250, -1.6700, 0.0000, 0.0031, 0, 0, 2, -4);\n-  AddSol(1.0600, 2.9600, -0.1660, 0.0243, 3, 0, 0, 2);\n-  AddSol(36.1240, 50.6400, -1.3000, 0.6215, 3, 0, 0, 0);\n-  AddSol(-13.1930, -16.4000, 0.2580, -0.1187, 3, 0, 0, -2);\n-  AddSol(-1.1870, -0.7400, 0.0420, 0.0074, 3, 0, 0, -4);\n-  AddSol(-0.2930, -0.3100, -0.0020, 0.0046, 3, 0, 0, -6);\n-  AddSol(-0.2900, -1.4500, 0.1160, -0.0051, 2, 1, 0, 2);\n-  AddSol(-7.6490, -10.5600, 0.2590, -0.1038, 2, 1, 0, 0);\n-  AddSol(-8.6270, -7.5900, 0.0780, -0.0192, 2, 1, 0, -2);\n-  AddSol(-2.7400, -2.5400, 0.0220, 0.0324, 2, 1, 0, -4);\n-  AddSol(1.1810, 3.3200, -0.2120, 0.0213, 2, -1, 0, 2);\n-  AddSol(9.7030, 11.6700, -0.1510, 0.1268, 2, -1, 0, 0);\n-  AddSol(-0.3520, -0.3700, 0.0010, -0.0028, 2, -1, 0, -1);\n-  AddSol(-2.4940, -1.1700, -0.0030, -0.0017, 2, -1, 0, -2);\n-  AddSol(0.3600, 0.2000, -0.0120, -0.0043, 2, -1, 0, -4);\n-  AddSol(-1.1670, -1.2500, 0.0080, -0.0106, 1, 2, 0, 0);\n-  AddSol(-7.4120, -6.1200, 0.1170, 0.0484, 1, 2, 0, -2);\n-  AddSol(-0.3110, -0.6500, -0.0320, 0.0044, 1, 2, 0, -4);\n-  AddSol(0.7570, 1.8200, -0.1050, 0.0112, 1, -2, 0, 2);\n-  AddSol(2.5800, 2.3200, 0.0270, 0.0196, 1, -2, 0, 0);\n-  AddSol(2.5330, 2.4000, -0.0140, -0.0212, 1, -2, 0, -2);\n-  AddSol(-0.3440, -0.5700, -0.0250, 0.0036, 0, 3, 0, -2);\n-  AddSol(-0.9920, -0.0200, 0.0000, 0.0000, 1, 0, 2, 2);\n-  AddSol(-45.0990, -0.0200, 0.0000, -0.0010, 1, 0, 2, 0);\n-  AddSol(-0.1790, -9.5200, 0.0000, -0.0833, 1, 0, 2, -2);\n-  AddSol(-0.3010, -0.3300, 0.0000, 0.0014, 1, 0, 2, -4);\n-  AddSol(-6.3820, -3.3700, 0.0000, -0.0481, 1, 0, -2, 2);\n-  AddSol(39.5280, 85.1300, 0.0000, -0.7136, 1, 0, -2, 0);\n-  AddSol(9.3660, 0.7100, 0.0000, -0.0112, 1, 0, -2, -2);\n-  AddSol(0.2020, 0.0200, 0.0000, 0.0000, 1, 0, -2, -4);\n-  AddSol(0.4150, 0.1000, 0.0000, 0.0013, 0, 1, 2, 0);\n-  AddSol(-2.1520, -2.2600, 0.0000, -0.0066, 0, 1, 2, -2);\n-  AddSol(-1.4400, -1.3000, 0.0000, 0.0014, 0, 1, -2, 2);\n-  AddSol(0.3840, -0.0400, 0.0000, 0.0000, 0, 1, -2, -2);\n-  AddSol(1.9380, 3.6000, -0.1450, 0.0401, 4, 0, 0, 0);\n-  AddSol(-0.9520, -1.5800, 0.0520, -0.0130, 4, 0, 0, -2);\n-  AddSol(-0.5510, -0.9400, 0.0320, -0.0097, 3, 1, 0, 0);\n-  AddSol(-0.4820, -0.5700, 0.0050, -0.0045, 3, 1, 0, -2);\n-  AddSol(0.6810, 0.9600, -0.0260, 0.0115, 3, -1, 0, 0);\n-  AddSol(-0.2970, -0.2700, 0.0020, -0.0009, 2, 2, 0, -2);\n-  AddSol(0.2540, 0.2100, -0.0030, 0.0000, 2, -2, 0, -2);\n-  AddSol(-0.2500, -0.2200, 0.0040, 0.0014, 1, 3, 0, -2);\n-  AddSol(-3.9960, 0.0000, 0.0000, 0.0004, 2, 0, 2, 0);\n-  AddSol(0.5570, -0.7500, 0.0000, -0.0090, 2, 0, 2, -2);\n-  AddSol(-0.4590, -0.3800, 0.0000, -0.0053, 2, 0, -2, 2);\n-  AddSol(-1.2980, 0.7400, 0.0000, 0.0004, 2, 0, -2, 0);\n-  AddSol(0.5380, 1.1400, 0.0000, -0.0141, 2, 0, -2, -2);\n-  AddSol(0.2630, 0.0200, 0.0000, 0.0000, 1, 1, 2, 0);\n-  AddSol(0.4260, 0.0700, 0.0000, -0.0006, 1, 1, -2, -2);\n-  AddSol(-0.3040, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);\n-  AddSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n-  AddSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n-  AddSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n+  addSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n+  addSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n+  addSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);\n+  addSol(-125.1540, -112.7900, -0.7250, -0.9781, 0, 0, 0, 1);\n+  addSol(1.9790, 6.9800, -0.4450, 0.0433, 1, 0, 0, 4);\n+  addSol(191.9530, 192.7200, 0.0290, 3.0861, 1, 0, 0, 2);\n+  addSol(-8.4660, -13.5100, 0.4550, -0.1093, 1, 0, 0, 1);\n+  addSol(22639.5000, 22609.0700, 0.0790, 186.5398, 1, 0, 0, 0);\n+  addSol(18.6090, 3.5900, -0.0940, 0.0118, 1, 0, 0, -1);\n+  addSol(-4586.4650, -4578.1300, -0.0770, 34.3117, 1, 0, 0, -2);\n+  addSol(3.2150, 5.4400, 0.1920, -0.0386, 1, 0, 0, -3);\n+  addSol(-38.4280, -38.6400, 0.0010, 0.6008, 1, 0, 0, -4);\n+  addSol(-0.3930, -1.4300, -0.0920, 0.0086, 1, 0, 0, -6);\n+  addSol(-0.2890, -1.5900, 0.1230, -0.0053, 0, 1, 0, 4);\n+  addSol(-24.4200, -25.1000, 0.0400, -0.3000, 0, 1, 0, 2);\n+  addSol(18.0230, 17.9300, 0.0070, 0.1494, 0, 1, 0, 1);\n+  addSol(-668.1460, -126.9800, -1.3020, -0.3997, 0, 1, 0, 0);\n+  addSol(0.5600, 0.3200, -0.0010, -0.0037, 0, 1, 0, -1);\n+  addSol(-165.1450, -165.0600, 0.0540, 1.9178, 0, 1, 0, -2);\n+  addSol(-1.8770, -6.4600, -0.4160, 0.0339, 0, 1, 0, -4);\n+  addSol(0.2130, 1.0200, -0.0740, 0.0054, 2, 0, 0, 4);\n+  addSol(14.3870, 14.7800, -0.0170, 0.2833, 2, 0, 0, 2);\n+  addSol(-0.5860, -1.2000, 0.0540, -0.0100, 2, 0, 0, 1);\n+  addSol(769.0160, 767.9600, 0.1070, 10.1657, 2, 0, 0, 0);\n+  addSol(1.7500, 2.0100, -0.0180, 0.0155, 2, 0, 0, -1);\n+  addSol(-211.6560, -152.5300, 5.6790, -0.3039, 2, 0, 0, -2);\n+  addSol(1.2250, 0.9100, -0.0300, -0.0088, 2, 0, 0, -3);\n+  addSol(-30.7730, -34.0700, -0.3080, 0.3722, 2, 0, 0, -4);\n+  addSol(-0.5700, -1.4000, -0.0740, 0.0109, 2, 0, 0, -6);\n+  addSol(-2.9210, -11.7500, 0.7870, -0.0484, 1, 1, 0, 2);\n+  addSol(1.2670, 1.5200, -0.0220, 0.0164, 1, 1, 0, 1);\n+  addSol(-109.6730, -115.1800, 0.4610, -0.9490, 1, 1, 0, 0);\n+  addSol(-205.9620, -182.3600, 2.0560, 1.4437, 1, 1, 0, -2);\n+  addSol(0.2330, 0.3600, 0.0120, -0.0025, 1, 1, 0, -3);\n+  addSol(-4.3910, -9.6600, -0.4710, 0.0673, 1, 1, 0, -4);\n+  addSol(0.2830, 1.5300, -0.1110, 0.0060, 1, -1, 0, 4);\n+  addSol(14.5770, 31.7000, -1.5400, 0.2302, 1, -1, 0, 2);\n+  addSol(147.6870, 138.7600, 0.6790, 1.1528, 1, -1, 0, 0);\n+  addSol(-1.0890, 0.5500, 0.0210, 0.0000, 1, -1, 0, -1);\n+  addSol(28.4750, 23.5900, -0.4430, -0.2257, 1, -1, 0, -2);\n+  addSol(-0.2760, -0.3800, -0.0060, -0.0036, 1, -1, 0, -3);\n+  addSol(0.6360, 2.2700, 0.1460, -0.0102, 1, -1, 0, -4);\n+  addSol(-0.1890, -1.6800, 0.1310, -0.0028, 0, 2, 0, 2);\n+  addSol(-7.4860, -0.6600, -0.0370, -0.0086, 0, 2, 0, 0);\n+  addSol(-8.0960, -16.3500, -0.7400, 0.0918, 0, 2, 0, -2);\n+  addSol(-5.7410, -0.0400, 0.0000, -0.0009, 0, 0, 2, 2);\n+  addSol(0.2550, 0.0000, 0.0000, 0.0000, 0, 0, 2, 1);\n+  addSol(-411.6080, -0.2000, 0.0000, -0.0124, 0, 0, 2, 0);\n+  addSol(0.5840, 0.8400, 0.0000, 0.0071, 0, 0, 2, -1);\n+  addSol(-55.1730, -52.1400, 0.0000, -0.1052, 0, 0, 2, -2);\n+  addSol(0.2540, 0.2500, 0.0000, -0.0017, 0, 0, 2, -3);\n+  addSol(0.0250, -1.6700, 0.0000, 0.0031, 0, 0, 2, -4);\n+  addSol(1.0600, 2.9600, -0.1660, 0.0243, 3, 0, 0, 2);\n+  addSol(36.1240, 50.6400, -1.3000, 0.6215, 3, 0, 0, 0);\n+  addSol(-13.1930, -16.4000, 0.2580, -0.1187, 3, 0, 0, -2);\n+  addSol(-1.1870, -0.7400, 0.0420, 0.0074, 3, 0, 0, -4);\n+  addSol(-0.2930, -0.3100, -0.0020, 0.0046, 3, 0, 0, -6);\n+  addSol(-0.2900, -1.4500, 0.1160, -0.0051, 2, 1, 0, 2);\n+  addSol(-7.6490, -10.5600, 0.2590, -0.1038, 2, 1, 0, 0);\n+  addSol(-8.6270, -7.5900, 0.0780, -0.0192, 2, 1, 0, -2);\n+  addSol(-2.7400, -2.5400, 0.0220, 0.0324, 2, 1, 0, -4);\n+  addSol(1.1810, 3.3200, -0.2120, 0.0213, 2, -1, 0, 2);\n+  addSol(9.7030, 11.6700, -0.1510, 0.1268, 2, -1, 0, 0);\n+  addSol(-0.3520, -0.3700, 0.0010, -0.0028, 2, -1, 0, -1);\n+  addSol(-2.4940, -1.1700, -0.0030, -0.0017, 2, -1, 0, -2);\n+  addSol(0.3600, 0.2000, -0.0120, -0.0043, 2, -1, 0, -4);\n+  addSol(-1.1670, -1.2500, 0.0080, -0.0106, 1, 2, 0, 0);\n+  addSol(-7.4120, -6.1200, 0.1170, 0.0484, 1, 2, 0, -2);\n+  addSol(-0.3110, -0.6500, -0.0320, 0.0044, 1, 2, 0, -4);\n+  addSol(0.7570, 1.8200, -0.1050, 0.0112, 1, -2, 0, 2);\n+  addSol(2.5800, 2.3200, 0.0270, 0.0196, 1, -2, 0, 0);\n+  addSol(2.5330, 2.4000, -0.0140, -0.0212, 1, -2, 0, -2);\n+  addSol(-0.3440, -0.5700, -0.0250, 0.0036, 0, 3, 0, -2);\n+  addSol(-0.9920, -0.0200, 0.0000, 0.0000, 1, 0, 2, 2);\n+  addSol(-45.0990, -0.0200, 0.0000, -0.0010, 1, 0, 2, 0);\n+  addSol(-0.1790, -9.5200, 0.0000, -0.0833, 1, 0, 2, -2);\n+  addSol(-0.3010, -0.3300, 0.0000, 0.0014, 1, 0, 2, -4);\n+  addSol(-6.3820, -3.3700, 0.0000, -0.0481, 1, 0, -2, 2);\n+  addSol(39.5280, 85.1300, 0.0000, -0.7136, 1, 0, -2, 0);\n+  addSol(9.3660, 0.7100, 0.0000, -0.0112, 1, 0, -2, -2);\n+  addSol(0.2020, 0.0200, 0.0000, 0.0000, 1, 0, -2, -4);\n+  addSol(0.4150, 0.1000, 0.0000, 0.0013, 0, 1, 2, 0);\n+  addSol(-2.1520, -2.2600, 0.0000, -0.0066, 0, 1, 2, -2);\n+  addSol(-1.4400, -1.3000, 0.0000, 0.0014, 0, 1, -2, 2);\n+  addSol(0.3840, -0.0400, 0.0000, 0.0000, 0, 1, -2, -2);\n+  addSol(1.9380, 3.6000, -0.1450, 0.0401, 4, 0, 0, 0);\n+  addSol(-0.9520, -1.5800, 0.0520, -0.0130, 4, 0, 0, -2);\n+  addSol(-0.5510, -0.9400, 0.0320, -0.0097, 3, 1, 0, 0);\n+  addSol(-0.4820, -0.5700, 0.0050, -0.0045, 3, 1, 0, -2);\n+  addSol(0.6810, 0.9600, -0.0260, 0.0115, 3, -1, 0, 0);\n+  addSol(-0.2970, -0.2700, 0.0020, -0.0009, 2, 2, 0, -2);\n+  addSol(0.2540, 0.2100, -0.0030, 0.0000, 2, -2, 0, -2);\n+  addSol(-0.2500, -0.2200, 0.0040, 0.0014, 1, 3, 0, -2);\n+  addSol(-3.9960, 0.0000, 0.0000, 0.0004, 2, 0, 2, 0);\n+  addSol(0.5570, -0.7500, 0.0000, -0.0090, 2, 0, 2, -2);\n+  addSol(-0.4590, -0.3800, 0.0000, -0.0053, 2, 0, -2, 2);\n+  addSol(-1.2980, 0.7400, 0.0000, 0.0004, 2, 0, -2, 0);\n+  addSol(0.5380, 1.1400, 0.0000, -0.0141, 2, 0, -2, -2);\n+  addSol(0.2630, 0.0200, 0.0000, 0.0000, 1, 1, 2, 0);\n+  addSol(0.4260, 0.0700, 0.0000, -0.0006, 1, 1, -2, -2);\n+  addSol(-0.3040, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);\n+  addSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n+  addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n+  addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n // AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n   // var z = ex[4][4];\n   // DLAM += 13.902 * z.imag;\n   // DS += 14.06 * z.imag;\n@@ -947,23 +947,23 @@\n //     z = ex[3][1] * ex[2][3];\n //     DLAM  += -0.330 * z.imag;\n //     DS    += -0.04 * z.imag;\n \n-  double ADDN(coeffn, p, q, r, s) {\n+  double addn(coeffn, p, q, r, s) {\n     return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag;\n   }\n \n   double N = 0;\n-  N += ADDN(-526.069, 0, 0, 1, -2);\n-  N += ADDN(-3.352, 0, 0, 1, -4);\n-  N += ADDN(44.297, 1, 0, 1, -2);\n-  N += ADDN(-6.000, 1, 0, 1, -4);\n-  N += ADDN(20.599, -1, 0, 1, 0);\n-  N += ADDN(-30.598, -1, 0, 1, -2);\n-  N += ADDN(-24.649, -2, 0, 1, 0);\n-  N += ADDN(-2.000, -2, 0, 1, -2);\n-  N += ADDN(-22.571, 0, 1, 1, -2);\n-  N += ADDN(10.985, 0, -1, 1, -2);\n+  N += addn(-526.069, 0, 0, 1, -2);\n+  N += addn(-3.352, 0, 0, 1, -4);\n+  N += addn(44.297, 1, 0, 1, -2);\n+  N += addn(-6.000, 1, 0, 1, -4);\n+  N += addn(20.599, -1, 0, 1, 0);\n+  N += addn(-30.598, -1, 0, 1, -2);\n+  N += addn(-24.649, -2, 0, 1, 0);\n+  N += addn(-2.000, -2, 0, 1, -2);\n+  N += addn(-22.571, 0, 1, 1, -2);\n+  N += addn(10.985, 0, -1, 1, -2);\n \n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n       0.35 * sine(0.5785 - 25.1042 * T) +\n"
                },
                {
                    "date": 1642478873217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,8 +261,52 @@\n   addSol(-0.3040, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);\n   addSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n   addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n   addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n+\n+  double addn(coeffn, p, q, r, s) {\n+    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag;\n+  }\n+\n+  double N = 0;\n+  N += addn(-526.069, 0, 0, 1, -2);\n+  N += addn(-3.352, 0, 0, 1, -4);\n+  N += addn(44.297, 1, 0, 1, -2);\n+  N += addn(-6.000, 1, 0, 1, -4);\n+  N += addn(20.599, -1, 0, 1, 0);\n+  N += addn(-30.598, -1, 0, 1, -2);\n+  N += addn(-24.649, -2, 0, 1, 0);\n+  N += addn(-2.000, -2, 0, 1, -2);\n+  N += addn(-22.571, 0, 1, 1, -2);\n+  N += addn(10.985, 0, -1, 1, -2);\n+\n+  dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n+      0.31 * sine(0.0466 - 125.1025 * T) +\n+      0.35 * sine(0.5785 - 25.1042 * T) +\n+      0.66 * sine(0.4591 + 1335.8075 * T) +\n+      0.64 * sine(0.3130 - 91.5680 * T) +\n+      1.14 * sine(0.1480 + 1331.2898 * T) +\n+      0.21 * sine(0.5918 + 1056.5859 * T) +\n+      0.44 * sine(0.5784 + 1322.8595 * T) +\n+      0.24 * sine(0.2275 - 5.7374 * T) +\n+      0.28 * sine(0.2965 + 2.6929 * T) +\n+      0.33 * sine(0.3132 + 6.3368 * T));\n+\n+  var S = F + ds / ARC;\n+  var latSeconds =\n+      (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n+          6.24 * sin(3 * S) +\n+          N;\n+\n+  return MoonPos(\n+      PI2 * frac((l0 + dlam / ARC) / PI2),\n+      (pi / (180 * 3600)) * latSeconds,\n+      (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n+}\n+\n+\n+\n+\n // AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n   // var z = ex[4][4];\n   // DLAM += 13.902 * z.imag;\n   // DS += 14.06 * z.imag;\n@@ -945,45 +989,5 @@\n \n //     # AddSol(-0.330000, -0.040000, 0.000000, 0.000000, 3.000000, 0.000000, 2.000000, 0.000000)\n //     z = ex[3][1] * ex[2][3];\n //     DLAM  += -0.330 * z.imag;\n-//     DS    += -0.04 * z.imag;\n-\n-  double addn(coeffn, p, q, r, s) {\n-    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag;\n-  }\n-\n-  double N = 0;\n-  N += addn(-526.069, 0, 0, 1, -2);\n-  N += addn(-3.352, 0, 0, 1, -4);\n-  N += addn(44.297, 1, 0, 1, -2);\n-  N += addn(-6.000, 1, 0, 1, -4);\n-  N += addn(20.599, -1, 0, 1, 0);\n-  N += addn(-30.598, -1, 0, 1, -2);\n-  N += addn(-24.649, -2, 0, 1, 0);\n-  N += addn(-2.000, -2, 0, 1, -2);\n-  N += addn(-22.571, 0, 1, 1, -2);\n-  N += addn(10.985, 0, -1, 1, -2);\n-\n-  dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n-      0.31 * sine(0.0466 - 125.1025 * T) +\n-      0.35 * sine(0.5785 - 25.1042 * T) +\n-      0.66 * sine(0.4591 + 1335.8075 * T) +\n-      0.64 * sine(0.3130 - 91.5680 * T) +\n-      1.14 * sine(0.1480 + 1331.2898 * T) +\n-      0.21 * sine(0.5918 + 1056.5859 * T) +\n-      0.44 * sine(0.5784 + 1322.8595 * T) +\n-      0.24 * sine(0.2275 - 5.7374 * T) +\n-      0.28 * sine(0.2965 + 2.6929 * T) +\n-      0.33 * sine(0.3132 + 6.3368 * T));\n-\n-  var S = F + ds / ARC;\n-  var latSeconds =\n-      (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n-          6.24 * sin(3 * S) +\n-          N;\n-\n-  return MoonPos(\n-      PI2 * frac((l0 + dlam / ARC) / PI2),\n-      (pi / (180 * 3600)) * latSeconds,\n-      (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n-}\n+//     DS    += -0.04 * z.imag;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642479011738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,22 +46,21 @@\n \n class MoonPos {\n   double lon, lat, dist;\n   MoonPos(this.lon, this.lat, this.dist) {\n-    var geoEclipLon = lon;\n-    var geoEclipLat = lat;\n-    var distanceAu = dist;\n+    double geoEclipLon = lon;\n+    double geoEclipLat = lat;\n+    double distanceAu = dist;\n   }\n }\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n-  var T = time.tt / 36525;\n+  double T = time.tt / 36525;\n   var ex = _array2(-6, 6, 1, 4);\n   // print(ex.runtimeType);\n \n   double sine(double phi) => sin(_pi2 * phi);\n-\n   double frac(double x) => x - x.floor();\n \n   var t2 = T * T;\n   double dlam = 0;\n"
                },
                {
                    "date": 1642480800279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n }\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n-  double T = time.tt / 36525;\n+  double T = time / 36525;\n   var ex = _array2(-6, 6, 1, 4);\n   // print(ex.runtimeType);\n \n   double sine(double phi) => sin(_pi2 * phi);\n"
                },
                {
                    "date": 1642480820327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n+  print(T);\n   var ex = _array2(-6, 6, 1, 4);\n   // print(ex.runtimeType);\n \n   double sine(double phi) => sin(_pi2 * phi);\n"
                },
                {
                    "date": 1642480909738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n }\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n-  double T = time / 36525;\n+  double T = time.tt / 36525;\n   print(T);\n   var ex = _array2(-6, 6, 1, 4);\n   // print(ex.runtimeType);\n \n"
                },
                {
                    "date": 1642481193675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n }\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n-  double T = time.tt / 36525;\n+  double T = time / 36525;\n   print(T);\n   var ex = _array2(-6, 6, 1, 4);\n   // print(ex.runtimeType);\n \n"
                },
                {
                    "date": 1642481300031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   print(T);\n-  var ex = _array2(-6, 6, 1, 4);\n+  dynamic ex = _array2(-6, 6, 1, 4);\n   // print(ex.runtimeType);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n"
                },
                {
                    "date": 1642481407033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import 'dart:math';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n-// import 'src/complex.dart';\n+import 'src/complex.dart';\n \n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n@@ -125,10 +125,10 @@\n       max = 6;\n       fac = 1.0;\n     }\n \n-    // var ex[0][I] = complex(1, 0);\n-    // var ex[1][I] = complex(FAC * cos(ARG), FAC * sin(ARG));\n+    var ex[0][I] = complex(1, 0);\n+    var ex[1][I] = complex(FAC * cos(ARG), FAC * sin(ARG));\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642481680894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,10 @@\n       max = 6;\n       fac = 1.0;\n     }\n \n-    var ex[0][I] = complex(1, 0);\n-    var ex[1][I] = complex(FAC * cos(ARG), FAC * sin(ARG));\n+    // Complex ex[0][I] = Complex(1, 0);\n+    // var ex[1][I] = complex(FAC * cos(ARG), FAC * sin(ARG));\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642483320372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   print(T);\n-  dynamic ex = _array2(-6, 6, 1, 4);\n+  Map ex = _array2(-6, 6, 1, 4);\n   // print(ex.runtimeType);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n@@ -125,10 +125,10 @@\n       max = 6;\n       fac = 1.0;\n     }\n \n-    // Complex ex[0][I] = Complex(1, 0);\n-    // var ex[1][I] = complex(FAC * cos(ARG), FAC * sin(ARG));\n+    ex[0][I] = Complex(1, 0);\n+    ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642484835778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,27 @@\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   print(T);\n   Map ex = _array2(-6, 6, 1, 4);\n-  // print(ex.runtimeType);\n \n+// coArray = DeclareArray2(-6, 6, 1, 4);\n+// siArray = DeclareArray2(-6, 6, 1, 4);\n+//   function CO(x, y) {\n+//     return ArrayGet2(coArray, x, y);\n+//   }\n+\n+//   function SI(x, y) {\n+//     return ArrayGet2(siArray, x, y);\n+//   }\n+\n+//   function SetCO(x, y, v) {\n+//     return ArraySet2(coArray, x, y, v);\n+//   }\n+\n+//   function SetSI(x, y, v) {\n+//     return ArraySet2(siArray, x, y, v);\n+//   }\n+\n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n   var t2 = T * T;\n@@ -136,9 +153,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      ex[-J][I] = ex[J][I].conjugate();\n+      ex[-J][I] = ex[J][I]; //.conjugate();\n       J += 1;\n     }\n \n     I++;\n"
                },
                {
                    "date": 1642484928333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,8 +168,9 @@\n   }\n \n   dynamic addSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n     var result = term(p, q, r, s);\n+    print(result);\n     dlam += coeffl * result.y;\n     ds += coeffs * result.y;\n     gam1c += coeffg * result.x;\n     sinpi += coeffp * result.x;\n"
                },
                {
                    "date": 1642485008592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,10 +160,10 @@\n \n     I++;\n   }\n   dynamic term(p, q, r, s) {\n-    var x, y, k;\n-    dynamic result = {x: 1, y: 0};\n+    double? x, y, k;\n+    Map result = {x: 1, y: 0};\n     var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n     return result;\n   }\n \n"
                },
                {
                    "date": 1642485331375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,129 +159,137 @@\n     }\n \n     I++;\n   }\n-  dynamic term(p, q, r, s) {\n-    double? x, y, k;\n-    Map result = {x: 1, y: 0};\n-    var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n-    return result;\n-  }\n \n-  dynamic addSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n-    var result = term(p, q, r, s);\n-    print(result);\n-    dlam += coeffl * result.y;\n-    ds += coeffs * result.y;\n-    gam1c += coeffg * result.x;\n-    sinpi += coeffp * result.x;\n-  }\n+  Complex z = ex[4][4];\n+  dlam += 13.902 * z.imag;\n+  ds += 14.06 * z.imag;\n+  gam1c += -0.001 * z.real;\n+  sinpi += 0.2607 * z.real;\n+  print(z);\n \n-  addSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n-  addSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n-  addSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);\n-  addSol(-125.1540, -112.7900, -0.7250, -0.9781, 0, 0, 0, 1);\n-  addSol(1.9790, 6.9800, -0.4450, 0.0433, 1, 0, 0, 4);\n-  addSol(191.9530, 192.7200, 0.0290, 3.0861, 1, 0, 0, 2);\n-  addSol(-8.4660, -13.5100, 0.4550, -0.1093, 1, 0, 0, 1);\n-  addSol(22639.5000, 22609.0700, 0.0790, 186.5398, 1, 0, 0, 0);\n-  addSol(18.6090, 3.5900, -0.0940, 0.0118, 1, 0, 0, -1);\n-  addSol(-4586.4650, -4578.1300, -0.0770, 34.3117, 1, 0, 0, -2);\n-  addSol(3.2150, 5.4400, 0.1920, -0.0386, 1, 0, 0, -3);\n-  addSol(-38.4280, -38.6400, 0.0010, 0.6008, 1, 0, 0, -4);\n-  addSol(-0.3930, -1.4300, -0.0920, 0.0086, 1, 0, 0, -6);\n-  addSol(-0.2890, -1.5900, 0.1230, -0.0053, 0, 1, 0, 4);\n-  addSol(-24.4200, -25.1000, 0.0400, -0.3000, 0, 1, 0, 2);\n-  addSol(18.0230, 17.9300, 0.0070, 0.1494, 0, 1, 0, 1);\n-  addSol(-668.1460, -126.9800, -1.3020, -0.3997, 0, 1, 0, 0);\n-  addSol(0.5600, 0.3200, -0.0010, -0.0037, 0, 1, 0, -1);\n-  addSol(-165.1450, -165.0600, 0.0540, 1.9178, 0, 1, 0, -2);\n-  addSol(-1.8770, -6.4600, -0.4160, 0.0339, 0, 1, 0, -4);\n-  addSol(0.2130, 1.0200, -0.0740, 0.0054, 2, 0, 0, 4);\n-  addSol(14.3870, 14.7800, -0.0170, 0.2833, 2, 0, 0, 2);\n-  addSol(-0.5860, -1.2000, 0.0540, -0.0100, 2, 0, 0, 1);\n-  addSol(769.0160, 767.9600, 0.1070, 10.1657, 2, 0, 0, 0);\n-  addSol(1.7500, 2.0100, -0.0180, 0.0155, 2, 0, 0, -1);\n-  addSol(-211.6560, -152.5300, 5.6790, -0.3039, 2, 0, 0, -2);\n-  addSol(1.2250, 0.9100, -0.0300, -0.0088, 2, 0, 0, -3);\n-  addSol(-30.7730, -34.0700, -0.3080, 0.3722, 2, 0, 0, -4);\n-  addSol(-0.5700, -1.4000, -0.0740, 0.0109, 2, 0, 0, -6);\n-  addSol(-2.9210, -11.7500, 0.7870, -0.0484, 1, 1, 0, 2);\n-  addSol(1.2670, 1.5200, -0.0220, 0.0164, 1, 1, 0, 1);\n-  addSol(-109.6730, -115.1800, 0.4610, -0.9490, 1, 1, 0, 0);\n-  addSol(-205.9620, -182.3600, 2.0560, 1.4437, 1, 1, 0, -2);\n-  addSol(0.2330, 0.3600, 0.0120, -0.0025, 1, 1, 0, -3);\n-  addSol(-4.3910, -9.6600, -0.4710, 0.0673, 1, 1, 0, -4);\n-  addSol(0.2830, 1.5300, -0.1110, 0.0060, 1, -1, 0, 4);\n-  addSol(14.5770, 31.7000, -1.5400, 0.2302, 1, -1, 0, 2);\n-  addSol(147.6870, 138.7600, 0.6790, 1.1528, 1, -1, 0, 0);\n-  addSol(-1.0890, 0.5500, 0.0210, 0.0000, 1, -1, 0, -1);\n-  addSol(28.4750, 23.5900, -0.4430, -0.2257, 1, -1, 0, -2);\n-  addSol(-0.2760, -0.3800, -0.0060, -0.0036, 1, -1, 0, -3);\n-  addSol(0.6360, 2.2700, 0.1460, -0.0102, 1, -1, 0, -4);\n-  addSol(-0.1890, -1.6800, 0.1310, -0.0028, 0, 2, 0, 2);\n-  addSol(-7.4860, -0.6600, -0.0370, -0.0086, 0, 2, 0, 0);\n-  addSol(-8.0960, -16.3500, -0.7400, 0.0918, 0, 2, 0, -2);\n-  addSol(-5.7410, -0.0400, 0.0000, -0.0009, 0, 0, 2, 2);\n-  addSol(0.2550, 0.0000, 0.0000, 0.0000, 0, 0, 2, 1);\n-  addSol(-411.6080, -0.2000, 0.0000, -0.0124, 0, 0, 2, 0);\n-  addSol(0.5840, 0.8400, 0.0000, 0.0071, 0, 0, 2, -1);\n-  addSol(-55.1730, -52.1400, 0.0000, -0.1052, 0, 0, 2, -2);\n-  addSol(0.2540, 0.2500, 0.0000, -0.0017, 0, 0, 2, -3);\n-  addSol(0.0250, -1.6700, 0.0000, 0.0031, 0, 0, 2, -4);\n-  addSol(1.0600, 2.9600, -0.1660, 0.0243, 3, 0, 0, 2);\n-  addSol(36.1240, 50.6400, -1.3000, 0.6215, 3, 0, 0, 0);\n-  addSol(-13.1930, -16.4000, 0.2580, -0.1187, 3, 0, 0, -2);\n-  addSol(-1.1870, -0.7400, 0.0420, 0.0074, 3, 0, 0, -4);\n-  addSol(-0.2930, -0.3100, -0.0020, 0.0046, 3, 0, 0, -6);\n-  addSol(-0.2900, -1.4500, 0.1160, -0.0051, 2, 1, 0, 2);\n-  addSol(-7.6490, -10.5600, 0.2590, -0.1038, 2, 1, 0, 0);\n-  addSol(-8.6270, -7.5900, 0.0780, -0.0192, 2, 1, 0, -2);\n-  addSol(-2.7400, -2.5400, 0.0220, 0.0324, 2, 1, 0, -4);\n-  addSol(1.1810, 3.3200, -0.2120, 0.0213, 2, -1, 0, 2);\n-  addSol(9.7030, 11.6700, -0.1510, 0.1268, 2, -1, 0, 0);\n-  addSol(-0.3520, -0.3700, 0.0010, -0.0028, 2, -1, 0, -1);\n-  addSol(-2.4940, -1.1700, -0.0030, -0.0017, 2, -1, 0, -2);\n-  addSol(0.3600, 0.2000, -0.0120, -0.0043, 2, -1, 0, -4);\n-  addSol(-1.1670, -1.2500, 0.0080, -0.0106, 1, 2, 0, 0);\n-  addSol(-7.4120, -6.1200, 0.1170, 0.0484, 1, 2, 0, -2);\n-  addSol(-0.3110, -0.6500, -0.0320, 0.0044, 1, 2, 0, -4);\n-  addSol(0.7570, 1.8200, -0.1050, 0.0112, 1, -2, 0, 2);\n-  addSol(2.5800, 2.3200, 0.0270, 0.0196, 1, -2, 0, 0);\n-  addSol(2.5330, 2.4000, -0.0140, -0.0212, 1, -2, 0, -2);\n-  addSol(-0.3440, -0.5700, -0.0250, 0.0036, 0, 3, 0, -2);\n-  addSol(-0.9920, -0.0200, 0.0000, 0.0000, 1, 0, 2, 2);\n-  addSol(-45.0990, -0.0200, 0.0000, -0.0010, 1, 0, 2, 0);\n-  addSol(-0.1790, -9.5200, 0.0000, -0.0833, 1, 0, 2, -2);\n-  addSol(-0.3010, -0.3300, 0.0000, 0.0014, 1, 0, 2, -4);\n-  addSol(-6.3820, -3.3700, 0.0000, -0.0481, 1, 0, -2, 2);\n-  addSol(39.5280, 85.1300, 0.0000, -0.7136, 1, 0, -2, 0);\n-  addSol(9.3660, 0.7100, 0.0000, -0.0112, 1, 0, -2, -2);\n-  addSol(0.2020, 0.0200, 0.0000, 0.0000, 1, 0, -2, -4);\n-  addSol(0.4150, 0.1000, 0.0000, 0.0013, 0, 1, 2, 0);\n-  addSol(-2.1520, -2.2600, 0.0000, -0.0066, 0, 1, 2, -2);\n-  addSol(-1.4400, -1.3000, 0.0000, 0.0014, 0, 1, -2, 2);\n-  addSol(0.3840, -0.0400, 0.0000, 0.0000, 0, 1, -2, -2);\n-  addSol(1.9380, 3.6000, -0.1450, 0.0401, 4, 0, 0, 0);\n-  addSol(-0.9520, -1.5800, 0.0520, -0.0130, 4, 0, 0, -2);\n-  addSol(-0.5510, -0.9400, 0.0320, -0.0097, 3, 1, 0, 0);\n-  addSol(-0.4820, -0.5700, 0.0050, -0.0045, 3, 1, 0, -2);\n-  addSol(0.6810, 0.9600, -0.0260, 0.0115, 3, -1, 0, 0);\n-  addSol(-0.2970, -0.2700, 0.0020, -0.0009, 2, 2, 0, -2);\n-  addSol(0.2540, 0.2100, -0.0030, 0.0000, 2, -2, 0, -2);\n-  addSol(-0.2500, -0.2200, 0.0040, 0.0014, 1, 3, 0, -2);\n-  addSol(-3.9960, 0.0000, 0.0000, 0.0004, 2, 0, 2, 0);\n-  addSol(0.5570, -0.7500, 0.0000, -0.0090, 2, 0, 2, -2);\n-  addSol(-0.4590, -0.3800, 0.0000, -0.0053, 2, 0, -2, 2);\n-  addSol(-1.2980, 0.7400, 0.0000, 0.0004, 2, 0, -2, 0);\n-  addSol(0.5380, 1.1400, 0.0000, -0.0141, 2, 0, -2, -2);\n-  addSol(0.2630, 0.0200, 0.0000, 0.0000, 1, 1, 2, 0);\n-  addSol(0.4260, 0.0700, 0.0000, -0.0006, 1, 1, -2, -2);\n-  addSol(-0.3040, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);\n-  addSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n-  addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n-  addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n+  // dynamic term(p, q, r, s) {\n+  //   double? x, y, k;\n+  //   Map result = {x: 1, y: 0};\n+  //   var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n+  //   return result;\n+  // }\n \n+  // dynamic addSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n+  //   var result = term(p, q, r, s);\n+  //   print(result);\n+  //   dlam += coeffl * result.y;\n+  //   ds += coeffs * result.y;\n+  //   gam1c += coeffg * result.x;\n+  //   sinpi += coeffp * result.x;\n+  // }\n+\n+  // addSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n+  // addSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n+  // addSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);\n+  // addSol(-125.1540, -112.7900, -0.7250, -0.9781, 0, 0, 0, 1);\n+  // addSol(1.9790, 6.9800, -0.4450, 0.0433, 1, 0, 0, 4);\n+  // addSol(191.9530, 192.7200, 0.0290, 3.0861, 1, 0, 0, 2);\n+  // addSol(-8.4660, -13.5100, 0.4550, -0.1093, 1, 0, 0, 1);\n+  // addSol(22639.5000, 22609.0700, 0.0790, 186.5398, 1, 0, 0, 0);\n+  // addSol(18.6090, 3.5900, -0.0940, 0.0118, 1, 0, 0, -1);\n+  // addSol(-4586.4650, -4578.1300, -0.0770, 34.3117, 1, 0, 0, -2);\n+  // addSol(3.2150, 5.4400, 0.1920, -0.0386, 1, 0, 0, -3);\n+  // addSol(-38.4280, -38.6400, 0.0010, 0.6008, 1, 0, 0, -4);\n+  // addSol(-0.3930, -1.4300, -0.0920, 0.0086, 1, 0, 0, -6);\n+  // addSol(-0.2890, -1.5900, 0.1230, -0.0053, 0, 1, 0, 4);\n+  // addSol(-24.4200, -25.1000, 0.0400, -0.3000, 0, 1, 0, 2);\n+  // addSol(18.0230, 17.9300, 0.0070, 0.1494, 0, 1, 0, 1);\n+  // addSol(-668.1460, -126.9800, -1.3020, -0.3997, 0, 1, 0, 0);\n+  // addSol(0.5600, 0.3200, -0.0010, -0.0037, 0, 1, 0, -1);\n+  // addSol(-165.1450, -165.0600, 0.0540, 1.9178, 0, 1, 0, -2);\n+  // addSol(-1.8770, -6.4600, -0.4160, 0.0339, 0, 1, 0, -4);\n+  // addSol(0.2130, 1.0200, -0.0740, 0.0054, 2, 0, 0, 4);\n+  // addSol(14.3870, 14.7800, -0.0170, 0.2833, 2, 0, 0, 2);\n+  // addSol(-0.5860, -1.2000, 0.0540, -0.0100, 2, 0, 0, 1);\n+  // addSol(769.0160, 767.9600, 0.1070, 10.1657, 2, 0, 0, 0);\n+  // addSol(1.7500, 2.0100, -0.0180, 0.0155, 2, 0, 0, -1);\n+  // addSol(-211.6560, -152.5300, 5.6790, -0.3039, 2, 0, 0, -2);\n+  // addSol(1.2250, 0.9100, -0.0300, -0.0088, 2, 0, 0, -3);\n+  // addSol(-30.7730, -34.0700, -0.3080, 0.3722, 2, 0, 0, -4);\n+  // addSol(-0.5700, -1.4000, -0.0740, 0.0109, 2, 0, 0, -6);\n+  // addSol(-2.9210, -11.7500, 0.7870, -0.0484, 1, 1, 0, 2);\n+  // addSol(1.2670, 1.5200, -0.0220, 0.0164, 1, 1, 0, 1);\n+  // addSol(-109.6730, -115.1800, 0.4610, -0.9490, 1, 1, 0, 0);\n+  // addSol(-205.9620, -182.3600, 2.0560, 1.4437, 1, 1, 0, -2);\n+  // addSol(0.2330, 0.3600, 0.0120, -0.0025, 1, 1, 0, -3);\n+  // addSol(-4.3910, -9.6600, -0.4710, 0.0673, 1, 1, 0, -4);\n+  // addSol(0.2830, 1.5300, -0.1110, 0.0060, 1, -1, 0, 4);\n+  // addSol(14.5770, 31.7000, -1.5400, 0.2302, 1, -1, 0, 2);\n+  // addSol(147.6870, 138.7600, 0.6790, 1.1528, 1, -1, 0, 0);\n+  // addSol(-1.0890, 0.5500, 0.0210, 0.0000, 1, -1, 0, -1);\n+  // addSol(28.4750, 23.5900, -0.4430, -0.2257, 1, -1, 0, -2);\n+  // addSol(-0.2760, -0.3800, -0.0060, -0.0036, 1, -1, 0, -3);\n+  // addSol(0.6360, 2.2700, 0.1460, -0.0102, 1, -1, 0, -4);\n+  // addSol(-0.1890, -1.6800, 0.1310, -0.0028, 0, 2, 0, 2);\n+  // addSol(-7.4860, -0.6600, -0.0370, -0.0086, 0, 2, 0, 0);\n+  // addSol(-8.0960, -16.3500, -0.7400, 0.0918, 0, 2, 0, -2);\n+  // addSol(-5.7410, -0.0400, 0.0000, -0.0009, 0, 0, 2, 2);\n+  // addSol(0.2550, 0.0000, 0.0000, 0.0000, 0, 0, 2, 1);\n+  // addSol(-411.6080, -0.2000, 0.0000, -0.0124, 0, 0, 2, 0);\n+  // addSol(0.5840, 0.8400, 0.0000, 0.0071, 0, 0, 2, -1);\n+  // addSol(-55.1730, -52.1400, 0.0000, -0.1052, 0, 0, 2, -2);\n+  // addSol(0.2540, 0.2500, 0.0000, -0.0017, 0, 0, 2, -3);\n+  // addSol(0.0250, -1.6700, 0.0000, 0.0031, 0, 0, 2, -4);\n+  // addSol(1.0600, 2.9600, -0.1660, 0.0243, 3, 0, 0, 2);\n+  // addSol(36.1240, 50.6400, -1.3000, 0.6215, 3, 0, 0, 0);\n+  // addSol(-13.1930, -16.4000, 0.2580, -0.1187, 3, 0, 0, -2);\n+  // addSol(-1.1870, -0.7400, 0.0420, 0.0074, 3, 0, 0, -4);\n+  // addSol(-0.2930, -0.3100, -0.0020, 0.0046, 3, 0, 0, -6);\n+  // addSol(-0.2900, -1.4500, 0.1160, -0.0051, 2, 1, 0, 2);\n+  // addSol(-7.6490, -10.5600, 0.2590, -0.1038, 2, 1, 0, 0);\n+  // addSol(-8.6270, -7.5900, 0.0780, -0.0192, 2, 1, 0, -2);\n+  // addSol(-2.7400, -2.5400, 0.0220, 0.0324, 2, 1, 0, -4);\n+  // addSol(1.1810, 3.3200, -0.2120, 0.0213, 2, -1, 0, 2);\n+  // addSol(9.7030, 11.6700, -0.1510, 0.1268, 2, -1, 0, 0);\n+  // addSol(-0.3520, -0.3700, 0.0010, -0.0028, 2, -1, 0, -1);\n+  // addSol(-2.4940, -1.1700, -0.0030, -0.0017, 2, -1, 0, -2);\n+  // addSol(0.3600, 0.2000, -0.0120, -0.0043, 2, -1, 0, -4);\n+  // addSol(-1.1670, -1.2500, 0.0080, -0.0106, 1, 2, 0, 0);\n+  // addSol(-7.4120, -6.1200, 0.1170, 0.0484, 1, 2, 0, -2);\n+  // addSol(-0.3110, -0.6500, -0.0320, 0.0044, 1, 2, 0, -4);\n+  // addSol(0.7570, 1.8200, -0.1050, 0.0112, 1, -2, 0, 2);\n+  // addSol(2.5800, 2.3200, 0.0270, 0.0196, 1, -2, 0, 0);\n+  // addSol(2.5330, 2.4000, -0.0140, -0.0212, 1, -2, 0, -2);\n+  // addSol(-0.3440, -0.5700, -0.0250, 0.0036, 0, 3, 0, -2);\n+  // addSol(-0.9920, -0.0200, 0.0000, 0.0000, 1, 0, 2, 2);\n+  // addSol(-45.0990, -0.0200, 0.0000, -0.0010, 1, 0, 2, 0);\n+  // addSol(-0.1790, -9.5200, 0.0000, -0.0833, 1, 0, 2, -2);\n+  // addSol(-0.3010, -0.3300, 0.0000, 0.0014, 1, 0, 2, -4);\n+  // addSol(-6.3820, -3.3700, 0.0000, -0.0481, 1, 0, -2, 2);\n+  // addSol(39.5280, 85.1300, 0.0000, -0.7136, 1, 0, -2, 0);\n+  // addSol(9.3660, 0.7100, 0.0000, -0.0112, 1, 0, -2, -2);\n+  // addSol(0.2020, 0.0200, 0.0000, 0.0000, 1, 0, -2, -4);\n+  // addSol(0.4150, 0.1000, 0.0000, 0.0013, 0, 1, 2, 0);\n+  // addSol(-2.1520, -2.2600, 0.0000, -0.0066, 0, 1, 2, -2);\n+  // addSol(-1.4400, -1.3000, 0.0000, 0.0014, 0, 1, -2, 2);\n+  // addSol(0.3840, -0.0400, 0.0000, 0.0000, 0, 1, -2, -2);\n+  // addSol(1.9380, 3.6000, -0.1450, 0.0401, 4, 0, 0, 0);\n+  // addSol(-0.9520, -1.5800, 0.0520, -0.0130, 4, 0, 0, -2);\n+  // addSol(-0.5510, -0.9400, 0.0320, -0.0097, 3, 1, 0, 0);\n+  // addSol(-0.4820, -0.5700, 0.0050, -0.0045, 3, 1, 0, -2);\n+  // addSol(0.6810, 0.9600, -0.0260, 0.0115, 3, -1, 0, 0);\n+  // addSol(-0.2970, -0.2700, 0.0020, -0.0009, 2, 2, 0, -2);\n+  // addSol(0.2540, 0.2100, -0.0030, 0.0000, 2, -2, 0, -2);\n+  // addSol(-0.2500, -0.2200, 0.0040, 0.0014, 1, 3, 0, -2);\n+  // addSol(-3.9960, 0.0000, 0.0000, 0.0004, 2, 0, 2, 0);\n+  // addSol(0.5570, -0.7500, 0.0000, -0.0090, 2, 0, 2, -2);\n+  // addSol(-0.4590, -0.3800, 0.0000, -0.0053, 2, 0, -2, 2);\n+  // addSol(-1.2980, 0.7400, 0.0000, 0.0004, 2, 0, -2, 0);\n+  // addSol(0.5380, 1.1400, 0.0000, -0.0141, 2, 0, -2, -2);\n+  // addSol(0.2630, 0.0200, 0.0000, 0.0000, 1, 1, 2, 0);\n+  // addSol(0.4260, 0.0700, 0.0000, -0.0006, 1, 1, -2, -2);\n+  // addSol(-0.3040, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);\n+  // addSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n+  // addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n+  // addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n+\n   double addn(coeffn, p, q, r, s) {\n     return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag;\n   }\n \n"
                },
                {
                    "date": 1642485395684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   //Вычисление геоцентрической позиции Луны\n   var m = calcMoon(time);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n-  double distCosLat = m.distance_au * cos(m.geo_eclip_lat);\n+  double distCosLat = m.dist * cos(m.geo_eclip_lat);\n   List gepos = [\n     distCosLat * cos(m.geo_eclip_lon),\n     distCosLat * sin(m.geo_eclip_lon),\n     m.distance_au * sin(m.geo_eclip_lat)\n"
                },
                {
                    "date": 1642485449645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,20 @@\n   //Вычисление геоцентрической позиции Луны\n   var m = calcMoon(time);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n-  double distCosLat = m.dist * cos(m.geo_eclip_lat);\n+  double distCosLat = m.dist * cos(m.lat);\n   List gepos = [\n-    distCosLat * cos(m.geo_eclip_lon),\n-    distCosLat * sin(m.geo_eclip_lon),\n-    m.distance_au * sin(m.geo_eclip_lat)\n+    distCosLat * cos(m.lon),\n+    distCosLat * sin(m.lon),\n+    m.dist * sin(m.lat)\n   ];\n+  //  double distCosLat = m.distance_au * cos(m.geo_eclip_lat);\n+  // List gepos = [\n+  //   distCosLat * cos(m.geo_eclip_lon),\n+  //   distCosLat * sin(m.geo_eclip_lon),\n+  //   m.distance_au * sin(m.geo_eclip_lat)\n+  // ];\n \n   // Преобразование эклиптических координат в экваториальные'.\n   var mpos1 = ecl2equ_vec(time, gepos);\n \n"
                },
                {
                    "date": 1642485772671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n-  print(T);\n+  // print(T);\n   Map ex = _array2(-6, 6, 1, 4);\n \n // coArray = DeclareArray2(-6, 6, 1, 4);\n // siArray = DeclareArray2(-6, 6, 1, 4);\n@@ -159,9 +159,10 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      ex[-J][I] = ex[J][I]; //.conjugate();\n+      print(ex[-J][I]);\n+      ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n \n     I++;\n@@ -171,9 +172,9 @@\n   dlam += 13.902 * z.imag;\n   ds += 14.06 * z.imag;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n-  print(z);\n+  // print(z);\n \n   // dynamic term(p, q, r, s) {\n   //   double? x, y, k;\n   //   Map result = {x: 1, y: 0};\n"
                },
                {
                    "date": 1642485852162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,9 @@\n     }\n \n     ex[0][I] = Complex(1, 0);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n+    print(ex[0][I]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n@@ -159,9 +160,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      print(ex[-J][I]);\n+      // print(ex[-J][I]);\n       ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642486115032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   // print(T);\n   Map ex = _array2(-6, 6, 1, 4);\n+  print(ex);\n \n // coArray = DeclareArray2(-6, 6, 1, 4);\n // siArray = DeclareArray2(-6, 6, 1, 4);\n //   function CO(x, y) {\n@@ -150,9 +151,9 @@\n     }\n \n     ex[0][I] = Complex(1, 0);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n-    print(ex[0][I]);\n+    // print(ex[0][I]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642486461591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n+  print(ex[0][1]);\n   var I = 1;\n   var arg, max, fac, J;\n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642486971446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  print(ex[0][1]);\n+  print(ex[1][1]);\n   var I = 1;\n   var arg, max, fac, J;\n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642487009924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   // print(T);\n   Map ex = _array2(-6, 6, 1, 4);\n-  print(ex);\n+  // print(ex);\n \n // coArray = DeclareArray2(-6, 6, 1, 4);\n // siArray = DeclareArray2(-6, 6, 1, 4);\n //   function CO(x, y) {\n"
                },
                {
                    "date": 1642487030816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  print(ex[1][1]);\n+  print(ex[0][1]);\n   var I = 1;\n   var arg, max, fac, J;\n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642487049321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  print(ex[0][1]);\n+  print(ex[0][1].runtimeType);\n   var I = 1;\n   var arg, max, fac, J;\n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642487122167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,8 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  print(ex[0][1].runtimeType);\n   var I = 1;\n   var arg, max, fac, J;\n   while (I <= 4) {\n     if (I == 1) {\n@@ -149,10 +148,11 @@\n       arg = D;\n       max = 6;\n       fac = 1.0;\n     }\n-\n+    print(ex[0][I]);\n     ex[0][I] = Complex(1, 0);\n+    print(ex[0][I]);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642487348758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n       fac = 1.0;\n     }\n     print(ex[0][I]);\n     ex[0][I] = Complex(1, 0);\n-    print(ex[0][I]);\n+    print(ex[0][I].runtimeType);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642487432452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n       fac = 1.0;\n     }\n     print(ex[0][I]);\n     ex[0][I] = Complex(1, 0);\n-    print(ex[0][I].runtimeType);\n+    print(ex[0][I]);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642487559149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n       fac = 1.0;\n     }\n     print(ex[0][I]);\n     ex[0][I] = Complex(1, 0);\n-    print(ex[0][I]);\n+    print(ex[0][I] + 1);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642513853534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,10 @@\n-// from math import cos, sin, pi, degrees, radians, floor\n-// from vsop.src.classes import Vector, PrecessDir\n-// from vsop.src.constants import ARC, EARTH_EQUATORIAL_RADIUS_AU, PI2\n-// from vsop.src.func import ecl2equ_vec, precession\n import 'dart:math';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n-import 'src/complex.dart';\n+// import 'src/complex.dart';\n+import 'package:complex/complex.dart';\n \n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n@@ -163,18 +160,18 @@\n \n     J = 1;\n     while (J <= max) {\n       // print(ex[-J][I]);\n-      ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+      ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n       J += 1;\n     }\n \n     I++;\n   }\n \n   Complex z = ex[4][4];\n-  dlam += 13.902 * z.imag;\n-  ds += 14.06 * z.imag;\n+  dlam += 13.902 * z.imaginary;\n+  ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n   // print(z);\n \n"
                },
                {
                    "date": 1642513946999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n   // addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n   // addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n \n   double addn(coeffn, p, q, r, s) {\n-    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag;\n+    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imaginery;\n   }\n \n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n"
                },
                {
                    "date": 1642561046864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,10 +123,11 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  var I = 1;\n-  var arg, max, fac, J;\n+  int I = 1;\n+  int max, J;\n+  var arg, fac;\n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n       max = 4;\n@@ -159,9 +160,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      // print(ex[-J][I]);\n+      print(ex[-J][I]);\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642561170014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n       fac = 1.0;\n     }\n     print(ex[0][I]);\n     ex[0][I] = Complex(1, 0);\n-    print(ex[0][I] + 1);\n+    // print(ex[0][I]);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n@@ -160,9 +160,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      print(ex[-J][I]);\n+      // print(ex[-J][I]);\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642561220643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,9 +297,9 @@\n   // addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n   // addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n \n   double addn(coeffn, p, q, r, s) {\n-    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imaginery;\n+    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n"
                },
                {
                    "date": 1642561266795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n   // addSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n   // addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n   // addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n \n-  double addn(coeffn, p, q, r, s) {\n+  dynamic addn(coeffn, p, q, r, s) {\n     return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n   double N = 0;\n"
                },
                {
                    "date": 1642561436967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,11 +146,11 @@\n       arg = D;\n       max = 6;\n       fac = 1.0;\n     }\n+    // print(ex[0][I]);\n+    ex[0][I] = Complex(1, 0);\n     print(ex[0][I]);\n-    ex[0][I] = Complex(1, 0);\n-    // print(ex[0][I]);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642561477225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,11 +148,11 @@\n       fac = 1.0;\n     }\n     // print(ex[0][I]);\n     ex[0][I] = Complex(1, 0);\n+    // print(ex[0][I]);\n+    ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     print(ex[0][I]);\n-    ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n-    // print(ex[0][I]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642561531116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n     // print(ex[0][I]);\n     ex[0][I] = Complex(1, 0);\n     // print(ex[0][I]);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n-    print(ex[0][I]);\n+    // print(ex[0][I]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n@@ -160,10 +160,10 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      // print(ex[-J][I]);\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n+      print(ex[-J][I]);\n       J += 1;\n     }\n \n     I++;\n"
                },
                {
                    "date": 1642561570670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n       arg = D;\n       max = 6;\n       fac = 1.0;\n     }\n-    // print(ex[0][I]);\n+    print(ex[0][I]);\n     ex[0][I] = Complex(1, 0);\n     // print(ex[0][I]);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n@@ -161,9 +161,9 @@\n \n     J = 1;\n     while (J <= max) {\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n-      print(ex[-J][I]);\n+      // print(ex[-J][I]);\n       J += 1;\n     }\n \n     I++;\n"
                },
                {
                    "date": 1642561678344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  int I = 1;\n+  double I = 1;\n   int max, J;\n   var arg, fac;\n   while (I <= 4) {\n     if (I == 1) {\n@@ -146,11 +146,11 @@\n       arg = D;\n       max = 6;\n       fac = 1.0;\n     }\n+    // print(ex[0][I]);\n+    ex[0][I] = Complex(I, 0);\n     print(ex[0][I]);\n-    ex[0][I] = Complex(1, 0);\n-    // print(ex[0][I]);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642561716173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n       fac = 1.0;\n     }\n     // print(ex[0][I]);\n     ex[0][I] = Complex(I, 0);\n-    print(ex[0][I]);\n+    print(Complex(I, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642561815088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n       fac = 1.0;\n     }\n     // print(ex[0][I]);\n     ex[0][I] = Complex(I, 0);\n-    print(Complex(I, 0));\n+    // print(Complex(I, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n@@ -161,9 +161,9 @@\n \n     J = 1;\n     while (J <= max) {\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n-      // print(ex[-J][I]);\n+      print(ex[-J][I]);\n       J += 1;\n     }\n \n     I++;\n"
                },
                {
                    "date": 1642563345542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,9 +297,10 @@\n   // addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n   // addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n \n   dynamic addn(coeffn, p, q, r, s) {\n-    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n+    return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n+        .imaginery; //.imaginery\n   }\n \n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n"
                },
                {
                    "date": 1642563404121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,12 +161,12 @@\n \n     J = 1;\n     while (J <= max) {\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n-      print(ex[-J][I]);\n+\n       J += 1;\n     }\n-\n+    print(ex[-J][I]);\n     I++;\n   }\n \n   Complex z = ex[4][4];\n"
                },
                {
                    "date": 1642563559199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,14 +159,16 @@\n       J += 1;\n     }\n \n     J = 1;\n+    var tmp;\n     while (J <= max) {\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n-\n+      var tmp = ex[-J][I];\n       J += 1;\n+      return tmp;\n     }\n-    print(ex[-J][I]);\n+    print(tmp);\n     I++;\n   }\n \n   Complex z = ex[4][4];\n"
                },
                {
                    "date": 1642563709352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,17 @@\n import 'src/func.dart';\n // import 'src/complex.dart';\n import 'package:complex/complex.dart';\n \n+class MoonPos {\n+  double lon, lat, dist;\n+  MoonPos(this.lon, this.lat, this.dist) {\n+    double geoEclipLon = lon;\n+    double geoEclipLat = lat;\n+    double distanceAu = dist;\n+  }\n+}\n+\n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n Vector geoMoon(time) {\n@@ -46,17 +55,8 @@\n   Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n   return arr2;\n }\n \n-class MoonPos {\n-  double lon, lat, dist;\n-  MoonPos(this.lon, this.lat, this.dist) {\n-    double geoEclipLon = lon;\n-    double geoEclipLat = lat;\n-    double distanceAu = dist;\n-  }\n-}\n-\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   // print(T);\n"
                },
                {
                    "date": 1642563961139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,9 +335,9 @@\n           N;\n \n   return MoonPos(\n       PI2 * frac((l0 + dlam / ARC) / PI2),\n-      (pi / (180 * 3600)) * latSeconds,\n+      pi / (180 * 3600) * latSeconds,\n       (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n }\n \n \n"
                },
                {
                    "date": 1642563991532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n double _arc = 3600.0 * 180.0 / pi;\n \n Vector geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n-  var m = calcMoon(time);\n+  MoonPos m = calcMoon(time);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n   double distCosLat = m.dist * cos(m.lat);\n   List gepos = [\n"
                },
                {
                    "date": 1642564044201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,9 +332,9 @@\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-\n+  print(PI2 * frac((l0 + dlam / ARC) / PI2));\n   return MoonPos(\n       PI2 * frac((l0 + dlam / ARC) / PI2),\n       pi / (180 * 3600) * latSeconds,\n       (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642564108390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n double _arc = 3600.0 * 180.0 / pi;\n \n Vector geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n-  MoonPos m = calcMoon(time);\n+  dynamic m = calcMoon(time);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n   double distCosLat = m.dist * cos(m.lat);\n   List gepos = [\n"
                },
                {
                    "date": 1642564175761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,16 +18,16 @@\n double _arc = 3600.0 * 180.0 / pi;\n \n Vector geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n-  dynamic m = calcMoon(time);\n+  dynamic m0 = calcMoon(time);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n-  double distCosLat = m.dist * cos(m.lat);\n+  double distCosLat = m0.dist * cos(m0.lat);\n   List gepos = [\n-    distCosLat * cos(m.lon),\n-    distCosLat * sin(m.lon),\n-    m.dist * sin(m.lat)\n+    distCosLat * cos(m0.lon),\n+    distCosLat * sin(m0.lon),\n+    m0.dist * sin(m0.lat)\n   ];\n   //  double distCosLat = m.distance_au * cos(m.geo_eclip_lat);\n   // List gepos = [\n   //   distCosLat * cos(m.geo_eclip_lon),\n"
                },
                {
                    "date": 1642564199861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n \n Vector geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n   dynamic m0 = calcMoon(time);\n+  print(m0);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n   double distCosLat = m0.dist * cos(m0.lat);\n   List gepos = [\n"
                },
                {
                    "date": 1642564284224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,9 +333,9 @@\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-  print(PI2 * frac((l0 + dlam / ARC) / PI2));\n+  print('проверка');\n   return MoonPos(\n       PI2 * frac((l0 + dlam / ARC) / PI2),\n       pi / (180 * 3600) * latSeconds,\n       (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642564568771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -334,17 +334,17 @@\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n   print('проверка');\n-  return MoonPos(\n-      PI2 * frac((l0 + dlam / ARC) / PI2),\n-      pi / (180 * 3600) * latSeconds,\n-      (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n+  return MoonPos(1, 2, 3);\n }\n+// return MoonPos(\n+//       PI2 * frac((l0 + dlam / ARC) / PI2),\n+//       pi / (180 * 3600) * latSeconds,\n+//       (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n \n \n \n-\n // AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n   // var z = ex[4][4];\n   // DLAM += 13.902 * z.imag;\n   // DS += 14.06 * z.imag;\n"
                },
                {
                    "date": 1642564617713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n-  // print(z);\n+  print(z);\n \n   // dynamic term(p, q, r, s) {\n   //   double? x, y, k;\n   //   Map result = {x: 1, y: 0};\n"
                },
                {
                    "date": 1642564657799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n       var tmp = ex[-J][I];\n       J += 1;\n       return tmp;\n     }\n-    print(tmp);\n+    print('tmp');\n     I++;\n   }\n \n   Complex z = ex[4][4];\n"
                },
                {
                    "date": 1642564688993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n-  // print(T);\n+  print(T);\n   Map ex = _array2(-6, 6, 1, 4);\n   // print(ex);\n \n // coArray = DeclareArray2(-6, 6, 1, 4);\n"
                },
                {
                    "date": 1642564841631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,26 +63,8 @@\n   print(T);\n   Map ex = _array2(-6, 6, 1, 4);\n   // print(ex);\n \n-// coArray = DeclareArray2(-6, 6, 1, 4);\n-// siArray = DeclareArray2(-6, 6, 1, 4);\n-//   function CO(x, y) {\n-//     return ArrayGet2(coArray, x, y);\n-//   }\n-\n-//   function SI(x, y) {\n-//     return ArrayGet2(siArray, x, y);\n-//   }\n-\n-//   function SetCO(x, y, v) {\n-//     return ArraySet2(coArray, x, y, v);\n-//   }\n-\n-//   function SetSI(x, y, v) {\n-//     return ArraySet2(siArray, x, y, v);\n-//   }\n-\n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n   var t2 = T * T;\n@@ -160,19 +142,15 @@\n       J += 1;\n     }\n \n     J = 1;\n-    var tmp;\n     while (J <= max) {\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n-      var tmp = ex[-J][I];\n       J += 1;\n-      return tmp;\n     }\n-    print('tmp');\n     I++;\n   }\n-\n+  print('tmp');\n   Complex z = ex[4][4];\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n"
                },
                {
                    "date": 1642564904042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,142 +148,22 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print('tmp');\n+\n   Complex z = ex[4][4];\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n   print(z);\n \n-  // dynamic term(p, q, r, s) {\n-  //   double? x, y, k;\n-  //   Map result = {x: 1, y: 0};\n-  //   var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder\n-  //   return result;\n-  // }\n-\n-  // dynamic addSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {\n-  //   var result = term(p, q, r, s);\n-  //   print(result);\n-  //   dlam += coeffl * result.y;\n-  //   ds += coeffs * result.y;\n-  //   gam1c += coeffg * result.x;\n-  //   sinpi += coeffp * result.x;\n-  // }\n-\n-  // addSol(13.9020, 14.0600, -0.0010, 0.2607, 0, 0, 0, 4);\n-  // addSol(0.4030, -4.0100, 0.3940, 0.0023, 0, 0, 0, 3);\n-  // addSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);\n-  // addSol(-125.1540, -112.7900, -0.7250, -0.9781, 0, 0, 0, 1);\n-  // addSol(1.9790, 6.9800, -0.4450, 0.0433, 1, 0, 0, 4);\n-  // addSol(191.9530, 192.7200, 0.0290, 3.0861, 1, 0, 0, 2);\n-  // addSol(-8.4660, -13.5100, 0.4550, -0.1093, 1, 0, 0, 1);\n-  // addSol(22639.5000, 22609.0700, 0.0790, 186.5398, 1, 0, 0, 0);\n-  // addSol(18.6090, 3.5900, -0.0940, 0.0118, 1, 0, 0, -1);\n-  // addSol(-4586.4650, -4578.1300, -0.0770, 34.3117, 1, 0, 0, -2);\n-  // addSol(3.2150, 5.4400, 0.1920, -0.0386, 1, 0, 0, -3);\n-  // addSol(-38.4280, -38.6400, 0.0010, 0.6008, 1, 0, 0, -4);\n-  // addSol(-0.3930, -1.4300, -0.0920, 0.0086, 1, 0, 0, -6);\n-  // addSol(-0.2890, -1.5900, 0.1230, -0.0053, 0, 1, 0, 4);\n-  // addSol(-24.4200, -25.1000, 0.0400, -0.3000, 0, 1, 0, 2);\n-  // addSol(18.0230, 17.9300, 0.0070, 0.1494, 0, 1, 0, 1);\n-  // addSol(-668.1460, -126.9800, -1.3020, -0.3997, 0, 1, 0, 0);\n-  // addSol(0.5600, 0.3200, -0.0010, -0.0037, 0, 1, 0, -1);\n-  // addSol(-165.1450, -165.0600, 0.0540, 1.9178, 0, 1, 0, -2);\n-  // addSol(-1.8770, -6.4600, -0.4160, 0.0339, 0, 1, 0, -4);\n-  // addSol(0.2130, 1.0200, -0.0740, 0.0054, 2, 0, 0, 4);\n-  // addSol(14.3870, 14.7800, -0.0170, 0.2833, 2, 0, 0, 2);\n-  // addSol(-0.5860, -1.2000, 0.0540, -0.0100, 2, 0, 0, 1);\n-  // addSol(769.0160, 767.9600, 0.1070, 10.1657, 2, 0, 0, 0);\n-  // addSol(1.7500, 2.0100, -0.0180, 0.0155, 2, 0, 0, -1);\n-  // addSol(-211.6560, -152.5300, 5.6790, -0.3039, 2, 0, 0, -2);\n-  // addSol(1.2250, 0.9100, -0.0300, -0.0088, 2, 0, 0, -3);\n-  // addSol(-30.7730, -34.0700, -0.3080, 0.3722, 2, 0, 0, -4);\n-  // addSol(-0.5700, -1.4000, -0.0740, 0.0109, 2, 0, 0, -6);\n-  // addSol(-2.9210, -11.7500, 0.7870, -0.0484, 1, 1, 0, 2);\n-  // addSol(1.2670, 1.5200, -0.0220, 0.0164, 1, 1, 0, 1);\n-  // addSol(-109.6730, -115.1800, 0.4610, -0.9490, 1, 1, 0, 0);\n-  // addSol(-205.9620, -182.3600, 2.0560, 1.4437, 1, 1, 0, -2);\n-  // addSol(0.2330, 0.3600, 0.0120, -0.0025, 1, 1, 0, -3);\n-  // addSol(-4.3910, -9.6600, -0.4710, 0.0673, 1, 1, 0, -4);\n-  // addSol(0.2830, 1.5300, -0.1110, 0.0060, 1, -1, 0, 4);\n-  // addSol(14.5770, 31.7000, -1.5400, 0.2302, 1, -1, 0, 2);\n-  // addSol(147.6870, 138.7600, 0.6790, 1.1528, 1, -1, 0, 0);\n-  // addSol(-1.0890, 0.5500, 0.0210, 0.0000, 1, -1, 0, -1);\n-  // addSol(28.4750, 23.5900, -0.4430, -0.2257, 1, -1, 0, -2);\n-  // addSol(-0.2760, -0.3800, -0.0060, -0.0036, 1, -1, 0, -3);\n-  // addSol(0.6360, 2.2700, 0.1460, -0.0102, 1, -1, 0, -4);\n-  // addSol(-0.1890, -1.6800, 0.1310, -0.0028, 0, 2, 0, 2);\n-  // addSol(-7.4860, -0.6600, -0.0370, -0.0086, 0, 2, 0, 0);\n-  // addSol(-8.0960, -16.3500, -0.7400, 0.0918, 0, 2, 0, -2);\n-  // addSol(-5.7410, -0.0400, 0.0000, -0.0009, 0, 0, 2, 2);\n-  // addSol(0.2550, 0.0000, 0.0000, 0.0000, 0, 0, 2, 1);\n-  // addSol(-411.6080, -0.2000, 0.0000, -0.0124, 0, 0, 2, 0);\n-  // addSol(0.5840, 0.8400, 0.0000, 0.0071, 0, 0, 2, -1);\n-  // addSol(-55.1730, -52.1400, 0.0000, -0.1052, 0, 0, 2, -2);\n-  // addSol(0.2540, 0.2500, 0.0000, -0.0017, 0, 0, 2, -3);\n-  // addSol(0.0250, -1.6700, 0.0000, 0.0031, 0, 0, 2, -4);\n-  // addSol(1.0600, 2.9600, -0.1660, 0.0243, 3, 0, 0, 2);\n-  // addSol(36.1240, 50.6400, -1.3000, 0.6215, 3, 0, 0, 0);\n-  // addSol(-13.1930, -16.4000, 0.2580, -0.1187, 3, 0, 0, -2);\n-  // addSol(-1.1870, -0.7400, 0.0420, 0.0074, 3, 0, 0, -4);\n-  // addSol(-0.2930, -0.3100, -0.0020, 0.0046, 3, 0, 0, -6);\n-  // addSol(-0.2900, -1.4500, 0.1160, -0.0051, 2, 1, 0, 2);\n-  // addSol(-7.6490, -10.5600, 0.2590, -0.1038, 2, 1, 0, 0);\n-  // addSol(-8.6270, -7.5900, 0.0780, -0.0192, 2, 1, 0, -2);\n-  // addSol(-2.7400, -2.5400, 0.0220, 0.0324, 2, 1, 0, -4);\n-  // addSol(1.1810, 3.3200, -0.2120, 0.0213, 2, -1, 0, 2);\n-  // addSol(9.7030, 11.6700, -0.1510, 0.1268, 2, -1, 0, 0);\n-  // addSol(-0.3520, -0.3700, 0.0010, -0.0028, 2, -1, 0, -1);\n-  // addSol(-2.4940, -1.1700, -0.0030, -0.0017, 2, -1, 0, -2);\n-  // addSol(0.3600, 0.2000, -0.0120, -0.0043, 2, -1, 0, -4);\n-  // addSol(-1.1670, -1.2500, 0.0080, -0.0106, 1, 2, 0, 0);\n-  // addSol(-7.4120, -6.1200, 0.1170, 0.0484, 1, 2, 0, -2);\n-  // addSol(-0.3110, -0.6500, -0.0320, 0.0044, 1, 2, 0, -4);\n-  // addSol(0.7570, 1.8200, -0.1050, 0.0112, 1, -2, 0, 2);\n-  // addSol(2.5800, 2.3200, 0.0270, 0.0196, 1, -2, 0, 0);\n-  // addSol(2.5330, 2.4000, -0.0140, -0.0212, 1, -2, 0, -2);\n-  // addSol(-0.3440, -0.5700, -0.0250, 0.0036, 0, 3, 0, -2);\n-  // addSol(-0.9920, -0.0200, 0.0000, 0.0000, 1, 0, 2, 2);\n-  // addSol(-45.0990, -0.0200, 0.0000, -0.0010, 1, 0, 2, 0);\n-  // addSol(-0.1790, -9.5200, 0.0000, -0.0833, 1, 0, 2, -2);\n-  // addSol(-0.3010, -0.3300, 0.0000, 0.0014, 1, 0, 2, -4);\n-  // addSol(-6.3820, -3.3700, 0.0000, -0.0481, 1, 0, -2, 2);\n-  // addSol(39.5280, 85.1300, 0.0000, -0.7136, 1, 0, -2, 0);\n-  // addSol(9.3660, 0.7100, 0.0000, -0.0112, 1, 0, -2, -2);\n-  // addSol(0.2020, 0.0200, 0.0000, 0.0000, 1, 0, -2, -4);\n-  // addSol(0.4150, 0.1000, 0.0000, 0.0013, 0, 1, 2, 0);\n-  // addSol(-2.1520, -2.2600, 0.0000, -0.0066, 0, 1, 2, -2);\n-  // addSol(-1.4400, -1.3000, 0.0000, 0.0014, 0, 1, -2, 2);\n-  // addSol(0.3840, -0.0400, 0.0000, 0.0000, 0, 1, -2, -2);\n-  // addSol(1.9380, 3.6000, -0.1450, 0.0401, 4, 0, 0, 0);\n-  // addSol(-0.9520, -1.5800, 0.0520, -0.0130, 4, 0, 0, -2);\n-  // addSol(-0.5510, -0.9400, 0.0320, -0.0097, 3, 1, 0, 0);\n-  // addSol(-0.4820, -0.5700, 0.0050, -0.0045, 3, 1, 0, -2);\n-  // addSol(0.6810, 0.9600, -0.0260, 0.0115, 3, -1, 0, 0);\n-  // addSol(-0.2970, -0.2700, 0.0020, -0.0009, 2, 2, 0, -2);\n-  // addSol(0.2540, 0.2100, -0.0030, 0.0000, 2, -2, 0, -2);\n-  // addSol(-0.2500, -0.2200, 0.0040, 0.0014, 1, 3, 0, -2);\n-  // addSol(-3.9960, 0.0000, 0.0000, 0.0004, 2, 0, 2, 0);\n-  // addSol(0.5570, -0.7500, 0.0000, -0.0090, 2, 0, 2, -2);\n-  // addSol(-0.4590, -0.3800, 0.0000, -0.0053, 2, 0, -2, 2);\n-  // addSol(-1.2980, 0.7400, 0.0000, 0.0004, 2, 0, -2, 0);\n-  // addSol(0.5380, 1.1400, 0.0000, -0.0141, 2, 0, -2, -2);\n-  // addSol(0.2630, 0.0200, 0.0000, 0.0000, 1, 1, 2, 0);\n-  // addSol(0.4260, 0.0700, 0.0000, -0.0006, 1, 1, -2, -2);\n-  // addSol(-0.3040, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);\n-  // addSol(-0.3720, -0.1900, 0.0000, -0.0027, 1, -1, -2, 2);\n-  // addSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);\n-  // addSol(-0.3300, -0.0400, 0.0000, 0.0000, 3, 0, 2, 0);\n-\n   dynamic addn(coeffn, p, q, r, s) {\n     return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n         .imaginery; //.imaginery\n   }\n \n+  print('tmp');\n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n   N += addn(-3.352, 0, 0, 1, -4);\n   N += addn(44.297, 1, 0, 1, -2);\n"
                },
                {
                    "date": 1642564919981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n     return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n         .imaginery; //.imaginery\n   }\n \n-  print('tmp');\n+  print('checking...');\n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n   N += addn(-3.352, 0, 0, 1, -4);\n   N += addn(44.297, 1, 0, 1, -2);\n"
                },
                {
                    "date": 1642564947131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,8 @@\n     return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n         .imaginery; //.imaginery\n   }\n \n-  print('checking...');\n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n   N += addn(-3.352, 0, 0, 1, -4);\n   N += addn(44.297, 1, 0, 1, -2);\n"
                },
                {
                    "date": 1642564974910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n   N += addn(-24.649, -2, 0, 1, 0);\n   N += addn(-2.000, -2, 0, 1, -2);\n   N += addn(-22.571, 0, 1, 1, -2);\n   N += addn(10.985, 0, -1, 1, -2);\n-\n+  print('checking...');\n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n       0.35 * sine(0.5785 - 25.1042 * T) +\n       0.66 * sine(0.4591 + 1335.8075 * T) +\n@@ -184,9 +184,9 @@\n       0.44 * sine(0.5784 + 1322.8595 * T) +\n       0.24 * sine(0.2275 - 5.7374 * T) +\n       0.28 * sine(0.2965 + 2.6929 * T) +\n       0.33 * sine(0.3132 + 6.3368 * T));\n-\n+  print('checking...');\n   var S = F + ds / ARC;\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n"
                },
                {
                    "date": 1642565004184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,8 +161,9 @@\n     return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n         .imaginery; //.imaginery\n   }\n \n+  print('checking...');\n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n   N += addn(-3.352, 0, 0, 1, -4);\n   N += addn(44.297, 1, 0, 1, -2);\n"
                },
                {
                    "date": 1642565114932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,13 +157,13 @@\n   sinpi += 0.2607 * z.real;\n   print(z);\n \n   dynamic addn(coeffn, p, q, r, s) {\n+    print(coeffn);\n     return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n         .imaginery; //.imaginery\n   }\n \n-  print('checking...');\n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n   N += addn(-3.352, 0, 0, 1, -4);\n   N += addn(44.297, 1, 0, 1, -2);\n@@ -173,9 +173,9 @@\n   N += addn(-24.649, -2, 0, 1, 0);\n   N += addn(-2.000, -2, 0, 1, -2);\n   N += addn(-22.571, 0, 1, 1, -2);\n   N += addn(10.985, 0, -1, 1, -2);\n-  print('checking...');\n+\n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n       0.35 * sine(0.5785 - 25.1042 * T) +\n       0.66 * sine(0.4591 + 1335.8075 * T) +\n@@ -185,15 +185,15 @@\n       0.44 * sine(0.5784 + 1322.8595 * T) +\n       0.24 * sine(0.2275 - 5.7374 * T) +\n       0.28 * sine(0.2965 + 2.6929 * T) +\n       0.33 * sine(0.3132 + 6.3368 * T));\n-  print('checking...');\n+\n   var S = F + ds / ARC;\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-  print('проверка');\n+\n   return MoonPos(1, 2, 3);\n }\n // return MoonPos(\n //       PI2 * frac((l0 + dlam / ARC) / PI2),\n"
                },
                {
                    "date": 1642565135769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n   sinpi += 0.2607 * z.real;\n   print(z);\n \n   dynamic addn(coeffn, p, q, r, s) {\n-    print(coeffn);\n+    print(ex[p][1]);\n     return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n         .imaginery; //.imaginery\n   }\n \n"
                },
                {
                    "date": 1642565163935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n   sinpi += 0.2607 * z.real;\n   print(z);\n \n   dynamic addn(coeffn, p, q, r, s) {\n-    print(ex[p][1]);\n+    print(ex[q][2]);\n     return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n         .imaginery; //.imaginery\n   }\n \n"
                },
                {
                    "date": 1642565347123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,10 +158,10 @@\n   print(z);\n \n   dynamic addn(coeffn, p, q, r, s) {\n     print(ex[q][2]);\n-    return (coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))\n-        .imaginery; //.imaginery\n+    return (coeffn *\n+        (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n   }\n \n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n"
                },
                {
                    "date": 1642565610299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,25 +156,25 @@\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n   print(z);\n \n-  dynamic addn(coeffn, p, q, r, s) {\n-    print(ex[q][2]);\n-    return (coeffn *\n-        (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n-  }\n+  // dynamic addn(coeffn, p, q, r, s) {\n+  //   print(ex[q][2]);\n+  //   return (coeffn *\n+  //       (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n+  // }\n \n-  double N = 0;\n-  N += addn(-526.069, 0, 0, 1, -2);\n-  N += addn(-3.352, 0, 0, 1, -4);\n-  N += addn(44.297, 1, 0, 1, -2);\n-  N += addn(-6.000, 1, 0, 1, -4);\n-  N += addn(20.599, -1, 0, 1, 0);\n-  N += addn(-30.598, -1, 0, 1, -2);\n-  N += addn(-24.649, -2, 0, 1, 0);\n-  N += addn(-2.000, -2, 0, 1, -2);\n-  N += addn(-22.571, 0, 1, 1, -2);\n-  N += addn(10.985, 0, -1, 1, -2);\n+  double N = -477.8936;\n+  // N += addn(-526.069, 0, 0, 1, -2);\n+  // N += addn(-3.352, 0, 0, 1, -4);\n+  // N += addn(44.297, 1, 0, 1, -2);\n+  // N += addn(-6.000, 1, 0, 1, -4);\n+  // N += addn(20.599, -1, 0, 1, 0);\n+  // N += addn(-30.598, -1, 0, 1, -2);\n+  // N += addn(-24.649, -2, 0, 1, 0);\n+  // N += addn(-2.000, -2, 0, 1, -2);\n+  // N += addn(-22.571, 0, 1, 1, -2);\n+  // N += addn(10.985, 0, -1, 1, -2);\n \n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n       0.35 * sine(0.5785 - 25.1042 * T) +\n"
                },
                {
                    "date": 1642565686416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,14 +192,17 @@\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n \n-  return MoonPos(1, 2, 3);\n+  return MoonPos(\n+      PI2 * frac((l0 + dlam / ARC) / PI2),\n+      pi / (180 * 3600) * latSeconds,\n+      (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n }\n // return MoonPos(\n-//       PI2 * frac((l0 + dlam / ARC) / PI2),\n-//       pi / (180 * 3600) * latSeconds,\n-//       (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n+      // PI2 * frac((l0 + dlam / ARC) / PI2),\n+      // pi / (180 * 3600) * latSeconds,\n+      // (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n \n \n \n // AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n"
                },
                {
                    "date": 1642565797886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,9 @@\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n-  print(T);\n   Map ex = _array2(-6, 6, 1, 4);\n-  // print(ex);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n"
                },
                {
                    "date": 1642567158700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n }\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n-  double T = time / 36525;\n+  double T = time.tt / 36525;\n   Map ex = _array2(-6, 6, 1, 4);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n"
                },
                {
                    "date": 1642567536306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n }\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n-  double T = time.tt / 36525;\n+  double T = time / 36525;\n   Map ex = _array2(-6, 6, 1, 4);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n"
                },
                {
                    "date": 1642578569099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n \n class MoonPos {\n   double lon, lat, dist;\n   MoonPos(this.lon, this.lat, this.dist) {\n-    double geoEclipLon = lon;\n-    double geoEclipLat = lat;\n-    double distanceAu = dist;\n+    // double geoEclipLon = lon;\n+    // double geoEclipLat = lat;\n+    // double distanceAu = dist;\n   }\n }\n \n double _pi2 = 2.0 * pi;\n"
                },
                {
                    "date": 1642578700276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// ignore_for_file: prefer_typing_uninitialized_variables\n+\n import 'dart:math';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n@@ -39,9 +41,9 @@\n   // Преобразование эклиптических координат в экваториальные'.\n   var mpos1 = ecl2equ_vec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n-  var mpos2 = precession(mpos1, time, PrecessDir.Into2000);\n+  var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n \n   return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n   // , degrees(m.geo_eclip_lon)\n }\n"
                },
                {
                    "date": 1642608539501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   //   m.distance_au * sin(m.geo_eclip_lat)\n   // ];\n \n   // Преобразование эклиптических координат в экваториальные'.\n-  var mpos1 = ecl2equ_vec(time, gepos);\n+  var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n \n@@ -186,18 +186,18 @@\n       0.24 * sine(0.2275 - 5.7374 * T) +\n       0.28 * sine(0.2965 + 2.6929 * T) +\n       0.33 * sine(0.3132 + 6.3368 * T));\n \n-  var S = F + ds / ARC;\n+  var S = F + ds / arc;\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n \n   return MoonPos(\n-      PI2 * frac((l0 + dlam / ARC) / PI2),\n+      pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n-      (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n+      (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n }\n // return MoonPos(\n       // PI2 * frac((l0 + dlam / ARC) / PI2),\n       // pi / (180 * 3600) * latSeconds,\n"
                },
                {
                    "date": 1642615767989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,15 @@\n \n class MoonPos {\n   double lon, lat, dist;\n   MoonPos(this.lon, this.lat, this.dist) {\n-    // double geoEclipLon = lon;\n-    // double geoEclipLat = lat;\n-    // double distanceAu = dist;\n+    double geoEclipLon = lon;\n+    double geoEclipLat = lat;\n+    double distanceAu = dist;\n   }\n }\n \n+dynamic m = MoonPos;\n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n Vector geoMoon(time) {\n@@ -24,20 +25,20 @@\n   dynamic m0 = calcMoon(time);\n   print(m0);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n-  double distCosLat = m0.dist * cos(m0.lat);\n-  List gepos = [\n-    distCosLat * cos(m0.lon),\n-    distCosLat * sin(m0.lon),\n-    m0.dist * sin(m0.lat)\n-  ];\n-  //  double distCosLat = m.distance_au * cos(m.geo_eclip_lat);\n+  // double distCosLat = m0.dist * cos(m0.lat);\n   // List gepos = [\n-  //   distCosLat * cos(m.geo_eclip_lon),\n-  //   distCosLat * sin(m.geo_eclip_lon),\n-  //   m.distance_au * sin(m.geo_eclip_lat)\n+  //   distCosLat * cos(m0.lon),\n+  //   distCosLat * sin(m0.lon),\n+  //   m0.dist * sin(m0.lat)\n   // ];\n+  double distCosLat = m.distanceAU * cos(m.geoEclipLat);\n+  dynamic gepos = [\n+    distCosLat * cos(m.geoEclipLon),\n+    distCosLat * sin(m.geoEclipLon),\n+    m.distanceAu * sin(m.geoEclipLat)\n+  ];\n \n   // Преобразование эклиптических координат в экваториальные'.\n   var mpos1 = ecl2equVec(time, gepos);\n \n"
                },
                {
                    "date": 1642615856475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,36 +9,35 @@\n \n class MoonPos {\n   double lon, lat, dist;\n   MoonPos(this.lon, this.lat, this.dist) {\n-    double geoEclipLon = lon;\n-    double geoEclipLat = lat;\n-    double distanceAu = dist;\n+    // double geoEclipLon = lon;\n+    // double geoEclipLat = lat;\n+    // double distanceAu = dist;\n   }\n }\n \n-dynamic m = MoonPos;\n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n Vector geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n-  dynamic m0 = calcMoon(time);\n-  print(m0);\n+  MoonPos m0 = calcMoon(time);\n+  print(m0.lon);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n-  // double distCosLat = m0.dist * cos(m0.lat);\n-  // List gepos = [\n-  //   distCosLat * cos(m0.lon),\n-  //   distCosLat * sin(m0.lon),\n-  //   m0.dist * sin(m0.lat)\n+  double distCosLat = m0.dist * cos(m0.lat);\n+  List gepos = [\n+    distCosLat * cos(m0.lon),\n+    distCosLat * sin(m0.lon),\n+    m0.dist * sin(m0.lat)\n+  ];\n+  // double distCosLat = m.distanceAU * cos(m.geoEclipLat);\n+  // dynamic gepos = [\n+  //   distCosLat * cos(m.geoEclipLon),\n+  //   distCosLat * sin(m.geoEclipLon),\n+  //   m.distanceAu * sin(m.geoEclipLat)\n   // ];\n-  double distCosLat = m.distanceAU * cos(m.geoEclipLat);\n-  dynamic gepos = [\n-    distCosLat * cos(m.geoEclipLon),\n-    distCosLat * sin(m.geoEclipLon),\n-    m.distanceAu * sin(m.geoEclipLat)\n-  ];\n \n   // Преобразование эклиптических координат в экваториальные'.\n   var mpos1 = ecl2equVec(time, gepos);\n \n"
                },
                {
                    "date": 1642615942289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     distCosLat * cos(m0.lon),\n     distCosLat * sin(m0.lon),\n     m0.dist * sin(m0.lat)\n   ];\n+  print(gepos);\n   // double distCosLat = m.distanceAU * cos(m.geoEclipLat);\n   // dynamic gepos = [\n   //   distCosLat * cos(m.geoEclipLon),\n   //   distCosLat * sin(m.geoEclipLon),\n"
                },
                {
                    "date": 1642616207319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n-  print(z);\n+  // print(z);\n \n   // dynamic addn(coeffn, p, q, r, s) {\n   //   print(ex[q][2]);\n   //   return (coeffn *\n"
                },
                {
                    "date": 1642616270769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,31 +8,27 @@\n import 'package:complex/complex.dart';\n \n class MoonPos {\n   double lon, lat, dist;\n-  MoonPos(this.lon, this.lat, this.dist) {\n-    // double geoEclipLon = lon;\n-    // double geoEclipLat = lat;\n-    // double distanceAu = dist;\n-  }\n+  MoonPos(this.lon, this.lat, this.dist) {}\n }\n \n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n Vector geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n   MoonPos m0 = calcMoon(time);\n-  print(m0.lon);\n+  // print(m0.lon);\n \n   // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n   double distCosLat = m0.dist * cos(m0.lat);\n   List gepos = [\n     distCosLat * cos(m0.lon),\n     distCosLat * sin(m0.lon),\n     m0.dist * sin(m0.lat)\n   ];\n-  print(gepos);\n+\n   // double distCosLat = m.distanceAU * cos(m.geoEclipLat);\n   // dynamic gepos = [\n   //   distCosLat * cos(m.geoEclipLon),\n   //   distCosLat * sin(m.geoEclipLon),\n"
                },
                {
                    "date": 1642616283850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import 'package:complex/complex.dart';\n \n class MoonPos {\n   double lon, lat, dist;\n-  MoonPos(this.lon, this.lat, this.dist) {}\n+  MoonPos(this.lon, this.lat, this.dist);\n }\n \n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n"
                },
                {
                    "date": 1642616741915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-\n+  print('$N $dlam $arc $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642616862059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,8 +188,9 @@\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n+\n   print('$N $dlam $arc $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n"
                },
                {
                    "date": 1642616927645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,11 @@\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-\n+  dlam = -26560.02894438416;\n+  arc = 206264.80624709636;\n+  latSeconds = -8727.275114246811;\n   print('$N $dlam $arc $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n"
                },
                {
                    "date": 1642616954864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,12 +188,13 @@\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n+\n   dlam = -26560.02894438416;\n   arc = 206264.80624709636;\n   latSeconds = -8727.275114246811;\n-  print('$N $dlam $arc $latSeconds');\n+\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642617202741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,12 +189,12 @@\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n \n-  dlam = -26560.02894438416;\n-  arc = 206264.80624709636;\n-  latSeconds = -8727.275114246811;\n-\n+  // dlam = -26560.02894438416;\n+  // arc = 206264.80624709636;\n+  // latSeconds = -8727.275114246811;\n+  print('$dlam $arc $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642617239788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,8 +192,10 @@\n \n   // dlam = -26560.02894438416;\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n+// -477.8936 -26560.0289 206264.8062 -8727.27511 //\n+\n   print('$dlam $arc $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n"
                },
                {
                    "date": 1642617321717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,8 +152,9 @@\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n   // print(z);\n+  print(dlam);\n \n   // dynamic addn(coeffn, p, q, r, s) {\n   //   print(ex[q][2]);\n   //   return (coeffn *\n"
                },
                {
                    "date": 1642617409484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n-  // print(z);\n+  print(z);\n   print(dlam);\n \n   // dynamic addn(coeffn, p, q, r, s) {\n   //   print(ex[q][2]);\n"
                },
                {
                    "date": 1642617982484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n \n Map _array2(int xmin, int xmax, int ymin, int ymax) {\n   Map _arr1 = _array1(ymin, ymax);\n   Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n+  print(arr2);\n   return arr2;\n }\n \n // # непосредственный расчет положения Луны\n"
                },
                {
                    "date": 1642618110501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n Map _array2(int xmin, int xmax, int ymin, int ymax) {\n   Map _arr1 = _array1(ymin, ymax);\n   Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n-  print(arr2);\n+\n   return arr2;\n }\n \n // # непосредственный расчет положения Луны\n"
                },
                {
                    "date": 1642618139286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n \n Map _array2(int xmin, int xmax, int ymin, int ymax) {\n   Map _arr1 = _array1(ymin, ymax);\n   Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n-\n   return arr2;\n }\n \n // # непосредственный расчет положения Луны\n@@ -103,9 +102,9 @@\n   var F =\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n-\n+  print(dgam);\n   double I = 1;\n   int max, J;\n   var arg, fac;\n   while (I <= 4) {\n"
                },
                {
                    "date": 1642618162486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,10 +151,10 @@\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n-  print(z);\n-  print(dlam);\n+  // print(z);\n+  // print(dlam);\n \n   // dynamic addn(coeffn, p, q, r, s) {\n   //   print(ex[q][2]);\n   //   return (coeffn *\n"
                },
                {
                    "date": 1642618175580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  print('$dlam $arc $latSeconds');\n+  // print('$dlam $arc $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642618221087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,10 @@\n   var F =\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n-  print(dgam);\n+  print('dgam $dgam');\n+\n   double I = 1;\n   int max, J;\n   var arg, fac;\n   while (I <= 4) {\n"
                },
                {
                    "date": 1642618285504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,9 @@\n   var dd = dl0 - dls;\n   var dgam = ((-3332E-9 * sine(0.59734 - 5.37261 * T) -\n       539E-9 * sine(0.35498 - 5.37899 * T) -\n       64E-9 * sine(0.39943 - 5.37511 * T)));\n+  print('dgam $dgam T $T');\n \n   var l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n       dl0 / _arc;\n   var L =\n@@ -102,9 +103,8 @@\n   var F =\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n-  print('dgam $dgam');\n \n   double I = 1;\n   int max, J;\n   var arg, fac;\n"
                },
                {
                    "date": 1642618563800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,12 +88,13 @@\n       15.30 * s5 +\n       0.24 * s6 -\n       1.86 * s7;\n   var dd = dl0 - dls;\n-  var dgam = ((-3332E-9 * sine(0.59734 - 5.37261 * T) -\n+  var dgam = (-3332E-9 * sine(0.59734 - 5.37261 * T) -\n       539E-9 * sine(0.35498 - 5.37899 * T) -\n-      64E-9 * sine(0.39943 - 5.37511 * T)));\n-  print('dgam $dgam T $T');\n+      64E-9 * sine(0.39943 - 5.37511 * T));\n+  print(-3332E-9 * sine(0.59734 - 5.37261 * T));\n+  // print('dgam $dgam T $T');\n \n   var l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n       dl0 / _arc;\n   var L =\n"
                },
                {
                    "date": 1642618644541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n   var dd = dl0 - dls;\n   var dgam = (-3332E-9 * sine(0.59734 - 5.37261 * T) -\n       539E-9 * sine(0.35498 - 5.37899 * T) -\n       64E-9 * sine(0.39943 - 5.37511 * T));\n-  print(-3332E-9 * sine(0.59734 - 5.37261 * T));\n+  print('check ${-3332E-9 * sine(0.59734 - 5.37261 * T)}');\n   // print('dgam $dgam T $T');\n \n   var l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n       dl0 / _arc;\n"
                },
                {
                    "date": 1642618697583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n   var dgam = (-3332E-9 * sine(0.59734 - 5.37261 * T) -\n       539E-9 * sine(0.35498 - 5.37899 * T) -\n       64E-9 * sine(0.39943 - 5.37511 * T));\n   print('check ${-3332E-9 * sine(0.59734 - 5.37261 * T)}');\n-  // print('dgam $dgam T $T');\n+  print('dgam $dgam T $T');\n \n   var l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n       dl0 / _arc;\n   var L =\n"
                },
                {
                    "date": 1642618772233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,11 +91,11 @@\n   var dd = dl0 - dls;\n   var dgam = (-3332E-9 * sine(0.59734 - 5.37261 * T) -\n       539E-9 * sine(0.35498 - 5.37899 * T) -\n       64E-9 * sine(0.39943 - 5.37511 * T));\n-  print('check ${-3332E-9 * sine(0.59734 - 5.37261 * T)}');\n-  print('dgam $dgam T $T');\n \n+  print('dl $dl df $df');\n+\n   var l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n       dl0 / _arc;\n   var L =\n       _pi2 * frac(0.37489701 + 1325.55240982 * T + 0.00002565 * t2) + dl / _arc;\n"
                },
                {
                    "date": 1642618893736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,8 @@\n   var dgam = (-3332E-9 * sine(0.59734 - 5.37261 * T) -\n       539E-9 * sine(0.35498 - 5.37899 * T) -\n       64E-9 * sine(0.39943 - 5.37511 * T));\n \n-  print('dl $dl df $df');\n-\n   var l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n       dl0 / _arc;\n   var L =\n       _pi2 * frac(0.37489701 + 1325.55240982 * T + 0.00002565 * t2) + dl / _arc;\n@@ -105,8 +103,9 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   var D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n+  print('D $D ls $ls');\n   double I = 1;\n   int max, J;\n   var arg, fac;\n   while (I <= 4) {\n"
                },
                {
                    "date": 1642618968582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,41 +68,41 @@\n   double dlam = 0;\n   double ds = 0;\n   double gam1c = 0;\n   double sinpi = 3422.7000;\n-  var s1 = sine(0.19833 + 0.05611 * T);\n-  var s2 = sine(0.27869 + 0.04508 * T);\n-  var s3 = sine(0.16827 - 0.36903 * T);\n-  var s4 = sine(0.34734 - 5.37261 * T);\n-  var s5 = sine(0.10498 - 5.37899 * T);\n-  var s6 = sine(0.42681 - 0.41855 * T);\n-  var s7 = sine(0.14943 - 5.37511 * T);\n-  var dl0 =\n+  double s1 = sine(0.19833 + 0.05611 * T);\n+  double s2 = sine(0.27869 + 0.04508 * T);\n+  double s3 = sine(0.16827 - 0.36903 * T);\n+  double s4 = sine(0.34734 - 5.37261 * T);\n+  double s5 = sine(0.10498 - 5.37899 * T);\n+  double s6 = sine(0.42681 - 0.41855 * T);\n+  double s7 = sine(0.14943 - 5.37511 * T);\n+  double dl0 =\n       0.84 * s1 + 0.31 * s2 + 14.27 * s3 + 7.26 * s4 + 0.28 * s5 + 0.24 * s6;\n-  var dl =\n+  double dl =\n       2.94 * s1 + 0.31 * s2 + 14.27 * s3 + 9.34 * s4 + 1.12 * s5 + 0.83 * s6;\n-  var dls = -6.40 * s1 - 1.89 * s6;\n-  var df = 0.21 * s1 +\n+  double dls = -6.40 * s1 - 1.89 * s6;\n+  double df = 0.21 * s1 +\n       0.31 * s2 +\n       14.27 * s3 -\n       88.70 * s4 -\n       15.30 * s5 +\n       0.24 * s6 -\n       1.86 * s7;\n-  var dd = dl0 - dls;\n-  var dgam = (-3332E-9 * sine(0.59734 - 5.37261 * T) -\n+  double dd = dl0 - dls;\n+  double dgam = (-3332E-9 * sine(0.59734 - 5.37261 * T) -\n       539E-9 * sine(0.35498 - 5.37899 * T) -\n       64E-9 * sine(0.39943 - 5.37511 * T));\n \n-  var l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n+  double l0 = _pi2 * frac(0.60643382 + 1336.85522467 * T - 0.00000313 * t2) +\n       dl0 / _arc;\n-  var L =\n+  double L =\n       _pi2 * frac(0.37489701 + 1325.55240982 * T + 0.00002565 * t2) + dl / _arc;\n-  var ls =\n+  double ls =\n       _pi2 * frac(0.99312619 + 99.99735956 * T - 0.00000044 * t2) + dls / _arc;\n-  var F =\n+  double F =\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n-  var D =\n+  double D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n   print('D $D ls $ls');\n   double I = 1;\n"
                },
                {
                    "date": 1642619098135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n-  var t2 = T * T;\n+  double t2 = T * T;\n   double dlam = 0;\n   double ds = 0;\n   double gam1c = 0;\n   double sinpi = 3422.7000;\n@@ -102,9 +102,9 @@\n   double F =\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   double D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n-\n+  print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2));\n   print('D $D ls $ls');\n   double I = 1;\n   int max, J;\n   var arg, fac;\n"
                },
                {
                    "date": 1642647574511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,10 +102,12 @@\n   double F =\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   double D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n+\n   print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2));\n-  print('D $D ls $ls');\n+  print('$l0 $L $ls $F $D');\n+\n   double I = 1;\n   int max, J;\n   var arg, fac;\n   while (I <= 4) {\n"
                },
                {
                    "date": 1642647760230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   double D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n+  print('$s1 $s2 $s6 $s7');\n   print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2));\n   print('$l0 $L $ls $F $D');\n \n   double I = 1;\n"
                },
                {
                    "date": 1642647923918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,11 +103,12 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   double D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  print('$s1 $s2 $s6 $s7');\n-  print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2));\n-  print('$l0 $L $ls $F $D');\n+  print('$dl0 $dl $dls $df $dd $dgam');\n+  // print('$s1 $s2 $s6 $s7'); // правильно\n+  // print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2)); // неправильно\n+  // print('$l0 $L $ls $F $D');\n \n   double I = 1;\n   int max, J;\n   var arg, fac;\n"
                },
                {
                    "date": 1642648109933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n-  Map ex = _array2(-6, 6, 1, 4);\n+  Map ex = _array2(-6, 6, 1, 4); // правильно\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n@@ -103,11 +103,11 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   double D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  print('$dl0 $dl $dls $df $dd $dgam');\n+  // print('$dl0 $dl $dls $df $dd $dgam'); // правильно\n   // print('$s1 $s2 $s6 $s7'); // правильно\n-  // print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2)); // неправильно\n+  print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2)); // неправильно\n   // print('$l0 $L $ls $F $D');\n \n   double I = 1;\n   int max, J;\n"
                },
                {
                    "date": 1642648167519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,9 @@\n \n   // print('$dl0 $dl $dls $df $dd $dgam'); // правильно\n   // print('$s1 $s2 $s6 $s7'); // правильно\n   print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2)); // неправильно\n+  print(1236.85308708 * T);\n   // print('$l0 $L $ls $F $D');\n \n   double I = 1;\n   int max, J;\n"
                },
                {
                    "date": 1642648266295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n   // print('$dl0 $dl $dls $df $dd $dgam'); // правильно\n   // print('$s1 $s2 $s6 $s7'); // правильно\n   print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2)); // неправильно\n-  print(1236.85308708 * T);\n+  print('${1236.85308708 * T} ${0.00000397 * t2}');\n   // print('$l0 $L $ls $F $D');\n \n   double I = 1;\n   int max, J;\n"
                },
                {
                    "date": 1642648350558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n   // print('$dl0 $dl $dls $df $dd $dgam'); // правильно\n   // print('$s1 $s2 $s6 $s7'); // правильно\n   print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2)); // неправильно\n-  print('${1236.85308708 * T} ${0.00000397 * t2}');\n+  print(dd / _arc);\n   // print('$l0 $L $ls $F $D');\n \n   double I = 1;\n   int max, J;\n"
                },
                {
                    "date": 1642648375151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n   // print('$dl0 $dl $dls $df $dd $dgam'); // правильно\n   // print('$s1 $s2 $s6 $s7'); // правильно\n   print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2)); // неправильно\n-  print(dd / _arc);\n+  print(0.82736186 + 1236.85308708 * T - 0.00000397 * t2);\n   // print('$l0 $L $ls $F $D');\n \n   double I = 1;\n   int max, J;\n"
                },
                {
                    "date": 1642648486094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n   // print('$dl0 $dl $dls $df $dd $dgam'); // правильно\n   // print('$s1 $s2 $s6 $s7'); // правильно\n-  print(frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2)); // неправильно\n+  print(frac(0.82736186)); // неправильно\n   print(0.82736186 + 1236.85308708 * T - 0.00000397 * t2);\n   // print('$l0 $L $ls $F $D');\n \n   double I = 1;\n"
                },
                {
                    "date": 1642648796896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,35 +105,34 @@\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n   // print('$dl0 $dl $dls $df $dd $dgam'); // правильно\n   // print('$s1 $s2 $s6 $s7'); // правильно\n-  print(frac(0.82736186)); // неправильно\n-  print(0.82736186 + 1236.85308708 * T - 0.00000397 * t2);\n+  // print(frac(0.82736186)); // ~правильно\n+  // print(0.82736186 + 1236.85308708 * T - 0.00000397 * t2); // чуток неправильно\n   // print('$l0 $L $ls $F $D');\n \n   double I = 1;\n   int max, J;\n-  var arg, fac;\n+  double arg, fac;\n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n       max = 4;\n       fac = 1.000002208;\n-    }\n-    if (I == 2) {\n+    } else if (I == 2) {\n       arg = ls;\n       max = 3;\n       fac = 0.997504612 - 0.002495388 * T;\n-    }\n-    if (I == 3) {\n+    } else if (I == 3) {\n       arg = F;\n       max = 4;\n       fac = 1.000002708 + 139.978 * dgam;\n     } else {\n       arg = D;\n       max = 6;\n       fac = 1.0;\n     }\n+    print(fac);\n     // print(ex[0][I]);\n     ex[0][I] = Complex(I, 0);\n     // print(Complex(I, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n"
                },
                {
                    "date": 1642648950535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,10 +130,10 @@\n       arg = D;\n       max = 6;\n       fac = 1.0;\n     }\n-    print(fac);\n-    // print(ex[0][I]);\n+\n+    print(ex[0][I]);\n     ex[0][I] = Complex(I, 0);\n     // print(Complex(I, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n"
                },
                {
                    "date": 1642649042340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,11 +131,11 @@\n       max = 6;\n       fac = 1.0;\n     }\n \n-    print(ex[0][I]);\n+    // print(ex[0][I]); // правильно 0j\n     ex[0][I] = Complex(I, 0);\n-    // print(Complex(I, 0));\n+    print(Complex(I, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642649094564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,10 +132,10 @@\n       fac = 1.0;\n     }\n \n     // print(ex[0][I]); // правильно 0j\n-    ex[0][I] = Complex(I, 0);\n-    print(Complex(I, 0));\n+    ex[0][I] = Complex(1, 0);\n+    print(Complex(1, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642649281926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n import 'dart:math';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n-// import 'src/complex.dart';\n-import 'package:complex/complex.dart';\n+import 'src/complex.dart';\n+// import 'package:complex/complex.dart';\n \n class MoonPos {\n   double lon, lat, dist;\n   MoonPos(this.lon, this.lat, this.dist);\n"
                },
                {
                    "date": 1642650286972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,10 +145,11 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n+      ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n+      print(ex[J][I]);\n     }\n     I++;\n   }\n \n"
                },
                {
                    "date": 1642650312988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n     }\n \n     // print(ex[0][I]); // правильно 0j\n     ex[0][I] = Complex(1, 0);\n-    print(Complex(1, 0));\n+    // print(Complex(1, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642650364621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n import 'dart:math';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n-import 'src/complex.dart';\n-// import 'package:complex/complex.dart';\n+// import 'src/complex.dart';\n+import 'package:complex/complex.dart';\n \n class MoonPos {\n   double lon, lat, dist;\n   MoonPos(this.lon, this.lat, this.dist);\n@@ -145,9 +145,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+      ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n       J += 1;\n       print(ex[J][I]);\n     }\n     I++;\n"
                },
                {
                    "date": 1642650465265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     J = 1;\n     while (J <= max) {\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n       J += 1;\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n     }\n     I++;\n   }\n \n@@ -207,15 +207,10 @@\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n }\n-// return MoonPos(\n-      // PI2 * frac((l0 + dlam / ARC) / PI2),\n-      // pi / (180 * 3600) * latSeconds,\n-      // (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * sinpi));\n \n \n-\n // AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n   // var z = ex[4][4];\n   // DLAM += 13.902 * z.imag;\n   // DS += 14.06 * z.imag;\n"
                },
                {
                    "date": 1642650489126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     J = 1;\n     while (J <= max) {\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n       J += 1;\n-      // print(ex[J][I]);\n+      print(ex[J][I]);\n     }\n     I++;\n   }\n \n"
                },
                {
                    "date": 1642650671201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n import 'dart:math';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n-// import 'src/complex.dart';\n-import 'package:complex/complex.dart';\n+import 'src/complex.dart';\n+// import 'package:complex/complex.dart';\n \n class MoonPos {\n   double lon, lat, dist;\n   MoonPos(this.lon, this.lat, this.dist);\n"
                },
                {
                    "date": 1642650754892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,11 +145,11 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n+      print(ex[-J][I]);\n       ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n       J += 1;\n-      print(ex[J][I]);\n     }\n     I++;\n   }\n \n"
                },
                {
                    "date": 1642651006409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,13 +144,13 @@\n       J += 1;\n     }\n \n     J = 1;\n-    while (J <= max) {\n-      print(ex[-J][I]);\n-      ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n-      J += 1;\n-    }\n+    // while (J <= max) {\n+    //   print(ex[-J][I]);\n+    //   ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   Complex z = ex[4][4];\n"
                },
                {
                    "date": 1642651026253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n-\n+    print(ex[-J][I]);\n     J = 1;\n     // while (J <= max) {\n     //   print(ex[-J][I]);\n     //   ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n"
                },
                {
                    "date": 1642651047952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n-    print(ex[-J][I]);\n+    print(ex[J][I]);\n     J = 1;\n     // while (J <= max) {\n     //   print(ex[-J][I]);\n     //   ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n"
                },
                {
                    "date": 1642651182766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,12 +139,13 @@\n     // print(ex[0][I]);\n \n     J = 2;\n     while (J <= max) {\n+      print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n-    print(ex[J][I]);\n+    // print(ex[J][I]);\n     J = 1;\n     // while (J <= max) {\n     //   print(ex[-J][I]);\n     //   ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n"
                },
                {
                    "date": 1642652376239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,19 +139,19 @@\n     // print(ex[0][I]);\n \n     J = 2;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n     // print(ex[J][I]);\n     J = 1;\n-    // while (J <= max) {\n-    //   print(ex[-J][I]);\n-    //   ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n-    //   J += 1;\n-    // }\n+    while (J <= max) {\n+      print(ex[-J][I]);\n+      ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n+      J += 1;\n+    }\n     I++;\n   }\n \n   Complex z = ex[4][4];\n"
                },
                {
                    "date": 1642652575835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     // print(ex[J][I]);\n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      ex[-J][I] = ex[J][I].conjugate(); //.conjugate(); !!!\n+      ex[-J][I] = ex[J][I].toString(); //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642653795118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     // print(ex[J][I]);\n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      ex[-J][I] = ex[J][I].toString(); //.conjugate(); !!!\n+      ex[-J][I] = ex[J][I].toString2(); //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642653940573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     // print(ex[J][I]);\n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      ex[-J][I] = ex[J][I].toString2(); //.conjugate(); !!!\n+      ex[-J][I] = ex[J][I].toString(); //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642653955090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     // print(ex[J][I]);\n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      ex[-J][I] = ex[J][I].toString(); //.conjugate(); !!!\n+      ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642654063277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,12 +143,12 @@\n       // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n-    // print(ex[J][I]);\n+    print(ex[J][I]);\n     J = 1;\n     while (J <= max) {\n-      print(ex[-J][I]);\n+      // print(ex[-J][I]);\n       ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642654090549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,13 +139,13 @@\n     // print(ex[0][I]);\n \n     J = 2;\n     while (J <= max) {\n-      // print(ex[J][I]);\n+      print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n-    print(ex[J][I]);\n+    // print(ex[J][I]);\n     J = 1;\n     while (J <= max) {\n       // print(ex[-J][I]);\n       ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n"
                },
                {
                    "date": 1642654112681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n     }\n     // print(ex[J][I]);\n     J = 1;\n     while (J <= max) {\n-      // print(ex[-J][I]);\n+      print(ex[-J][I]);\n       ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642654463888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,20 +136,22 @@\n     ex[0][I] = Complex(1, 0);\n     // print(Complex(1, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n+    Complex tmp;\n \n     J = 2;\n     while (J <= max) {\n       print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      // tmp = ex[J][I];\n       J += 1;\n     }\n-    // print(ex[J][I]);\n+\n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+      ex[-J][I] = ex[J][I].add(); //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642656610183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n import 'src/complex.dart';\n+import 'src/complex_new.dart';\n // import 'package:complex/complex.dart';\n \n class MoonPos {\n   double lon, lat, dist;\n@@ -149,9 +150,10 @@\n \n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      ex[-J][I] = ex[J][I].add(); //.conjugate(); !!!\n+      ex[-J][I] = ComplexN(ex[J][I]);\n+      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642656762797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     ex[0][I] = Complex(1, 0);\n     // print(Complex(1, 0));\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n-    Complex tmp;\n+    // Complex tmp;\n \n     J = 2;\n     while (J <= max) {\n       print(ex[J][I]);\n"
                },
                {
                    "date": 1642656800711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,14 +148,14 @@\n       J += 1;\n     }\n \n     J = 1;\n-    while (J <= max) {\n-      print(ex[-J][I]);\n-      ex[-J][I] = ComplexN(ex[J][I]);\n-      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-      J += 1;\n-    }\n+    // while (J <= max) {\n+    //   print(ex[-J][I]);\n+    //   ex[-J][I] = ComplexN(ex[J][I]);\n+    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   Complex z = ex[4][4];\n"
                },
                {
                    "date": 1642656928241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,21 +141,21 @@\n     // Complex tmp;\n \n     J = 2;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       // tmp = ex[J][I];\n       J += 1;\n     }\n \n     J = 1;\n-    // while (J <= max) {\n-    //   print(ex[-J][I]);\n-    //   ex[-J][I] = ComplexN(ex[J][I]);\n-    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-    //   J += 1;\n-    // }\n+    while (J <= max) {\n+      // print(ex[-J][I]);\n+      ex[J][I] = ComplexN(ex[J][I]);\n+      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+      J += 1;\n+    }\n     I++;\n   }\n \n   Complex z = ex[4][4];\n"
                },
                {
                    "date": 1642657009403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,14 +148,14 @@\n       J += 1;\n     }\n \n     J = 1;\n-    while (J <= max) {\n-      // print(ex[-J][I]);\n-      ex[J][I] = ComplexN(ex[J][I]);\n-      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-      J += 1;\n-    }\n+    // while (J <= max) {\n+    //   // print(ex[-J][I]);\n+    //   ex[J][I] = ComplexN(ex[J][I]);\n+    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   Complex z = ex[4][4];\n"
                },
                {
                    "date": 1642657020458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // Complex tmp;\n \n     J = 2;\n     while (J <= max) {\n-      // print(ex[J][I]);\n+      print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       // tmp = ex[J][I];\n       J += 1;\n     }\n"
                },
                {
                    "date": 1642657444952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,8 +172,9 @@\n   //       (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n   // }\n \n   double N = -477.8936;\n+  // double N = 0;\n   // N += addn(-526.069, 0, 0, 1, -2);\n   // N += addn(-3.352, 0, 0, 1, -4);\n   // N += addn(44.297, 1, 0, 1, -2);\n   // N += addn(-6.000, 1, 0, 1, -4);\n"
                },
                {
                    "date": 1642657700935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,22 +156,22 @@\n     //   J += 1;\n     // }\n     I++;\n   }\n-\n-  Complex z = ex[4][4];\n+  Complex z;\n+  z = ex[4][4];\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n   // print(z);\n   // print(dlam);\n \n-  // dynamic addn(coeffn, p, q, r, s) {\n-  //   print(ex[q][2]);\n-  //   return (coeffn *\n-  //       (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n-  // }\n+  dynamic addn(coeffn, p, q, r, s) {\n+    print(ex[q][2]);\n+    return (coeffn *\n+        (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n+  }\n \n   double N = -477.8936;\n   // double N = 0;\n   // N += addn(-526.069, 0, 0, 1, -2);\n"
                },
                {
                    "date": 1642657843048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,14 @@\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n   gam1c += -0.001 * z.real;\n   sinpi += 0.2607 * z.real;\n+\n+  z = ex[3][4];\n+  dlam += 0.403 * z.imaginary;\n+  ds += -4.01 * z.imaginary;\n+  gam1c += 0.394 * z.real;\n+  sinpi += 0.0023 * z.real;\n   // print(z);\n   // print(dlam);\n \n   dynamic addn(coeffn, p, q, r, s) {\n"
                },
                {
                    "date": 1642658950782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,742 +168,643 @@\n   dlam += 0.403 * z.imaginary;\n   ds += -4.01 * z.imaginary;\n   gam1c += 0.394 * z.real;\n   sinpi += 0.0023 * z.real;\n-  // print(z);\n-  // print(dlam);\n \n-  dynamic addn(coeffn, p, q, r, s) {\n-    print(ex[q][2]);\n-    return (coeffn *\n-        (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n-  }\n+  z = ex[2][4];\n+  dlam += 2369.912 * z.imaginary;\n+  ds += 2373.36 * z.imaginary;\n+  gam1c += 0.601 * z.real;\n+  sinpi += 28.2333 * z.real;\n \n-  double N = -477.8936;\n-  // double N = 0;\n-  // N += addn(-526.069, 0, 0, 1, -2);\n-  // N += addn(-3.352, 0, 0, 1, -4);\n-  // N += addn(44.297, 1, 0, 1, -2);\n-  // N += addn(-6.000, 1, 0, 1, -4);\n-  // N += addn(20.599, -1, 0, 1, 0);\n-  // N += addn(-30.598, -1, 0, 1, -2);\n-  // N += addn(-24.649, -2, 0, 1, 0);\n-  // N += addn(-2.000, -2, 0, 1, -2);\n-  // N += addn(-22.571, 0, 1, 1, -2);\n-  // N += addn(10.985, 0, -1, 1, -2);\n+  z = ex[1][4];\n+  dlam += -125.154 * z.imaginary;\n+  ds += -112.79 * z.imaginary;\n+  gam1c += -0.725 * z.real;\n+  sinpi += -0.9781 * z.real;\n \n-  dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n-      0.31 * sine(0.0466 - 125.1025 * T) +\n-      0.35 * sine(0.5785 - 25.1042 * T) +\n-      0.66 * sine(0.4591 + 1335.8075 * T) +\n-      0.64 * sine(0.3130 - 91.5680 * T) +\n-      1.14 * sine(0.1480 + 1331.2898 * T) +\n-      0.21 * sine(0.5918 + 1056.5859 * T) +\n-      0.44 * sine(0.5784 + 1322.8595 * T) +\n-      0.24 * sine(0.2275 - 5.7374 * T) +\n-      0.28 * sine(0.2965 + 2.6929 * T) +\n-      0.33 * sine(0.3132 + 6.3368 * T));\n+  z = ex[1][1] * ex[4][4];\n+  dlam += 1.979 * z.imaginary;\n+  ds += 6.98 * z.imaginary;\n+  gam1c += -0.445 * z.real;\n+  sinpi += 0.0433 * z.real;\n \n-  var S = F + ds / arc;\n-  var latSeconds =\n-      (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n-          6.24 * sin(3 * S) +\n-          N;\n+  z = ex[1][1] * ex[2][4];\n+  dlam += 191.953 * z.imaginary;\n+  ds += 192.72 * z.imaginary;\n+  gam1c += 0.029 * z.real;\n+  sinpi += 3.0861 * z.real;\n \n-  // dlam = -26560.02894438416;\n-  // arc = 206264.80624709636;\n-  // latSeconds = -8727.275114246811;\n-// -477.8936 -26560.0289 206264.8062 -8727.27511 //\n+  z = ex[1][1] * ex[1][4];\n+  dlam += -8.466 * z.imaginary;\n+  ds += -13.51 * z.imaginary;\n+  gam1c += 0.455 * z.real;\n+  sinpi += -0.1093 * z.real;\n \n-  // print('$dlam $arc $latSeconds');\n-  return MoonPos(\n-      pi2 * frac((l0 + dlam / arc) / pi2),\n-      pi / (180 * 3600) * latSeconds,\n-      (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n-}\n+  z = ex[1][1];\n+  dlam += 22639.500 * z.imaginary;\n+  ds += 22609.07 * z.imaginary;\n+  gam1c += 0.079 * z.real;\n+  sinpi += 186.5398 * z.real;\n \n+  z = ex[1][1] * ex[-1][4];\n+  dlam += 18.609 * z.imaginary;\n+  ds += 3.59 * z.imaginary;\n+  gam1c += -0.094 * z.real;\n+  sinpi += 0.0118 * z.real;\n \n-// AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n-  // var z = ex[4][4];\n-  // DLAM += 13.902 * z.imag;\n-  // DS += 14.06 * z.imag;\n-  // GAM1C += -0.001 * z.real;\n-  // SINPI += 0.2607 * z.real;\n+  z = ex[1][1] * ex[-2][4];\n+  dlam += -4586.465 * z.imaginary;\n+  ds += -4578.13 * z.imaginary;\n+  gam1c += -0.077 * z.real;\n+  sinpi += 34.3117 * z.real;\n \n-//     // AddSol(0.403000, -4.010000, 0.394000, 0.002300, 0.000000, 0.000000, 0.000000, 3.000000)\n-//   z = ex[3][4];\n-//   DLAM += 0.403 * z.imag;\n-//   DS += -4.01 * z.imag;\n-//   GAM1C += 0.394 * z.real;\n-//   SINPI += 0.0023 * z.real;\n+  z = ex[1][1] * ex[-3][4];\n+  dlam += 3.215 * z.imaginary;\n+  ds += 5.44 * z.imaginary;\n+  gam1c += 0.192 * z.real;\n+  sinpi += -0.0386 * z.real;\n \n-//     //AddSol(2369.912000, 2373.360000, 0.601000, 28.233300, 0.000000, 0.000000, 0.000000, 2.000000)\n-//   z = ex[2][4];\n-//   DLAM += 2369.912 * z.imag;\n-//   DS += 2373.36 * z.imag;\n-//   GAM1C += 0.601 * z.real;\n-//   SINPI += 28.2333 * z.real;\n+  z = ex[1][1] * ex[-4][4];\n+  dlam += -38.428 * z.imaginary;\n+  ds += -38.64 * z.imaginary;\n+  gam1c += 0.001 * z.real;\n+  sinpi += 0.6008 * z.real;\n \n-// //     # AddSol(-125.154000, -112.790000, -0.725000, -0.978100, 0.000000, 0.000000, 0.000000, 1.000000)\n-//   z = ex[1][4];\n-//   DLAM += -125.154 * z.imag;\n-//   DS += -112.79 * z.imag;\n-//   GAM1C += -0.725 * z.real;\n-//   SINPI += -0.9781 * z.real;\n+  z = ex[1][1] * ex[-6][4];\n+  dlam += -0.393 * z.imaginary;\n+  ds += -1.43 * z.imaginary;\n+  gam1c += -0.092 * z.real;\n+  sinpi += 0.0086 * z.real;\n \n-// //     # AddSol(1.979000, 6.980000, -0.445000, 0.043300, 1.000000, 0.000000, 0.000000, 4.000000)\n-//   z = ex[1][1] * ex[4][4];\n-//   DLAM += 1.979 * z.imag;\n-//   DS += 6.98 * z.imag;\n-//   GAM1C += -0.445 * z.real;\n-//   SINPI += 0.0433 * z.real;\n+  z = ex[1][2] * ex[4][4];\n+  dlam += -0.289 * z.imaginary;\n+  ds += -1.59 * z.imaginary;\n+  gam1c += 0.123 * z.real;\n+  sinpi += -0.0053 * z.real;\n \n-//     # AddSol(191.953000, 192.720000, 0.029000, 3.086100, 1.000000, 0.000000, 0.000000, 2.000000)\n-//     z = ex[1][1] * ex[2][4];\n-//     DLAM  += 191.953 * z.imag;\n-//     DS    += 192.72 * z.imag;\n-//     GAM1C += 0.029 * z.real;\n-//     SINPI += 3.0861 * z.real;\n+  z = ex[1][2] * ex[2][4];\n+  dlam += -24.420 * z.imaginary;\n+  ds += -25.10 * z.imaginary;\n+  gam1c += 0.040 * z.real;\n+  sinpi += -0.3000 * z.real;\n \n-//     # AddSol(-8.466000, -13.510000, 0.455000, -0.109300, 1.000000, 0.000000, 0.000000, 1.000000)\n-//     z = ex[1][1] * ex[1][4];\n-//     DLAM  += -8.466 * z.imag;\n-//     DS    += -13.51 * z.imag;\n-//     GAM1C += 0.455 * z.real;\n-//     SINPI += -0.1093 * z.real;\n+  z = ex[1][2] * ex[1][4];\n+  dlam += 18.023 * z.imaginary;\n+  ds += 17.93 * z.imaginary;\n+  gam1c += 0.007 * z.real;\n+  sinpi += 0.1494 * z.real;\n \n-//     # AddSol(22639.500000, 22609.070000, 0.079000, 186.539800, 1.000000, 0.000000, 0.000000, 0.000000)\n-//     z = ex[1][1];\n-//     DLAM  += 22639.500 * z.imag;\n-//     DS    += 22609.07 * z.imag;\n-//     GAM1C += 0.079 * z.real;\n-//     SINPI += 186.5398 * z.real;\n+  z = ex[1][2];\n+  dlam += -668.146 * z.imaginary;\n+  ds += -126.98 * z.imaginary;\n+  gam1c += -1.302 * z.real;\n+  sinpi += -0.3997 * z.real;\n \n-//     # AddSol(18.609000, 3.590000, -0.094000, 0.011800, 1.000000, 0.000000, 0.000000, -1.000000)\n-//     z = ex[1][1] * ex[-1][4];\n-//     DLAM  += 18.609 * z.imag;\n-//     DS    += 3.59 * z.imag;\n-//     GAM1C += -0.094 * z.real;\n-//     SINPI += 0.0118 * z.real;\n+  z = ex[1][2] * ex[-1][4];\n+  dlam += 0.560 * z.imaginary;\n+  ds += 0.32 * z.imaginary;\n+  gam1c += -0.001 * z.real;\n+  sinpi += -0.0037 * z.real;\n \n-//     # AddSol(-4586.465000, -4578.130000, -0.077000, 34.311700, 1.000000, 0.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[-2][4];\n-//     DLAM  += -4586.465 * z.imag;\n-//     DS    += -4578.13 * z.imag;\n-//     GAM1C += -0.077 * z.real;\n-//     SINPI += 34.3117 * z.real;\n+  z = ex[1][2] * ex[-2][4];\n+  dlam += -165.145 * z.imaginary;\n+  ds += -165.06 * z.imaginary;\n+  gam1c += 0.054 * z.real;\n+  sinpi += 1.9178 * z.real;\n \n-//     # AddSol(3.215000, 5.440000, 0.192000, -0.038600, 1.000000, 0.000000, 0.000000, -3.000000)\n-//     z = ex[1][1] * ex[-3][4];\n-//     DLAM  += 3.215 * z.imag;\n-//     DS    += 5.44 * z.imag;\n-//     GAM1C += 0.192 * z.real;\n-//     SINPI += -0.0386 * z.real;\n+  z = ex[1][2] * ex[-4][4];\n+  dlam += -1.877 * z.imaginary;\n+  ds += -6.46 * z.imaginary;\n+  gam1c += -0.416 * z.real;\n+  sinpi += 0.0339 * z.real;\n \n-//     # AddSol(-38.428000, -38.640000, 0.001000, 0.600800, 1.000000, 0.000000, 0.000000, -4.000000)\n-//     z = ex[1][1] * ex[-4][4];\n-//     DLAM  += -38.428 * z.imag;\n-//     DS    += -38.64 * z.imag;\n-//     GAM1C += 0.001 * z.real;\n-//     SINPI += 0.6008 * z.real;\n+  z = ex[2][1] * ex[4][4];\n+  dlam += 0.213 * z.imaginary;\n+  ds += 1.02 * z.imaginary;\n+  gam1c += -0.074 * z.real;\n+  sinpi += 0.0054 * z.real;\n \n-//     # AddSol(-0.393000, -1.430000, -0.092000, 0.008600, 1.000000, 0.000000, 0.000000, -6.000000)\n-//     z = ex[1][1] * ex[-6][4];\n-//     DLAM  += -0.393 * z.imag;\n-//     DS    += -1.43 * z.imag;\n-//     GAM1C += -0.092 * z.real;\n-//     SINPI += 0.0086 * z.real;\n+  z = ex[2][1] * ex[2][4];\n+  dlam += 14.387 * z.imaginary;\n+  ds += 14.78 * z.imaginary;\n+  gam1c += -0.017 * z.real;\n+  sinpi += 0.2833 * z.real;\n \n-//     # AddSol(-0.289000, -1.590000, 0.123000, -0.005300, 0.000000, 1.000000, 0.000000, 4.000000)\n-//     z = ex[1][2] * ex[4][4];\n-//     DLAM  += -0.289 * z.imag;\n-//     DS    += -1.59 * z.imag;\n-//     GAM1C += 0.123 * z.real;\n-//     SINPI += -0.0053 * z.real;\n+  z = ex[2][1] * ex[1][4];\n+  dlam += -0.586 * z.imaginary;\n+  ds += -1.20 * z.imaginary;\n+  gam1c += 0.054 * z.real;\n+  sinpi += -0.0100 * z.real;\n \n-//     # AddSol(-24.420000, -25.100000, 0.040000, -0.300000, 0.000000, 1.000000, 0.000000, 2.000000)\n-//     z = ex[1][2] * ex[2][4];\n-//     DLAM  += -24.420 * z.imag;\n-//     DS    += -25.10 * z.imag;\n-//     GAM1C += 0.040 * z.real;\n-//     SINPI += -0.3000 * z.real;\n+  z = ex[2][1];\n+  dlam += 769.016 * z.imaginary;\n+  ds += 767.96 * z.imaginary;\n+  gam1c += 0.107 * z.real;\n+  sinpi += 10.1657 * z.real;\n \n-//     # AddSol(18.023000, 17.930000, 0.007000, 0.149400, 0.000000, 1.000000, 0.000000, 1.000000)\n-//     z = ex[1][2] * ex[1][4];\n-//     DLAM  += 18.023 * z.imag;\n-//     DS    += 17.93 * z.imag;\n-//     GAM1C += 0.007 * z.real;\n-//     SINPI += 0.1494 * z.real;\n+  z = ex[2][1] * ex[-1][4];\n+  dlam += 1.750 * z.imaginary;\n+  ds += 2.01 * z.imaginary;\n+  gam1c += -0.018 * z.real;\n+  sinpi += 0.0155 * z.real;\n \n-//     # AddSol(-668.146000, -126.980000, -1.302000, -0.399700, 0.000000, 1.000000, 0.000000, 0.000000)\n-//     z = ex[1][2];\n-//     DLAM  += -668.146 * z.imag;\n-//     DS    += -126.98 * z.imag;\n-//     GAM1C += -1.302 * z.real;\n-//     SINPI += -0.3997 * z.real;\n+  z = ex[2][1] * ex[-2][4];\n+  dlam += -211.656 * z.imaginary;\n+  ds += -152.53 * z.imaginary;\n+  gam1c += 5.679 * z.real;\n+  sinpi += -0.3039 * z.real;\n \n-//     # AddSol(0.560000, 0.320000, -0.001000, -0.003700, 0.000000, 1.000000, 0.000000, -1.000000)\n-//     z = ex[1][2] * ex[-1][4];\n-//     DLAM  += 0.560 * z.imag;\n-//     DS    += 0.32 * z.imag;\n-//     GAM1C += -0.001 * z.real;\n-//     SINPI += -0.0037 * z.real;\n+  z = ex[2][1] * ex[-3][4];\n+  dlam += 1.225 * z.imaginary;\n+  ds += 0.91 * z.imaginary;\n+  gam1c += -0.030 * z.real;\n+  sinpi += -0.0088 * z.real;\n \n-//     # AddSol(-165.145000, -165.060000, 0.054000, 1.917800, 0.000000, 1.000000, 0.000000, -2.000000)\n-//     z = ex[1][2] * ex[-2][4];\n-//     DLAM  += -165.145 * z.imag;\n-//     DS    += -165.06 * z.imag;\n-//     GAM1C += 0.054 * z.real;\n-//     SINPI += 1.9178 * z.real;\n+  z = ex[2][1] * ex[-4][4];\n+  dlam += -30.773 * z.imaginary;\n+  ds += -34.07 * z.imaginary;\n+  gam1c += -0.308 * z.real;\n+  sinpi += 0.3722 * z.real;\n \n-//     # AddSol(-1.877000, -6.460000, -0.416000, 0.033900, 0.000000, 1.000000, 0.000000, -4.000000)\n-//     z = ex[1][2] * ex[-4][4];\n-//     DLAM  += -1.877 * z.imag;\n-//     DS    += -6.46 * z.imag;\n-//     GAM1C += -0.416 * z.real;\n-//     SINPI += 0.0339 * z.real;\n+  z = ex[2][1] * ex[-6][4];\n+  dlam += -0.570 * z.imaginary;\n+  ds += -1.40 * z.imaginary;\n+  gam1c += -0.074 * z.real;\n+  sinpi += 0.0109 * z.real;\n \n-//     # AddSol(0.213000, 1.020000, -0.074000, 0.005400, 2.000000, 0.000000, 0.000000, 4.000000)\n-//     z = ex[2][1] * ex[4][4];\n-//     DLAM  += 0.213 * z.imag;\n-//     DS    += 1.02 * z.imag;\n-//     GAM1C += -0.074 * z.real;\n-//     SINPI += 0.0054 * z.real;\n+  z = ex[1][1] * ex[1][2] * ex[2][4];\n+  dlam += -2.921 * z.imaginary;\n+  ds += -11.75 * z.imaginary;\n+  gam1c += 0.787 * z.real;\n+  sinpi += -0.0484 * z.real;\n \n-//     # AddSol(14.387000, 14.780000, -0.017000, 0.283300, 2.000000, 0.000000, 0.000000, 2.000000)\n-//     z = ex[2][1] * ex[2][4];\n-//     DLAM  += 14.387 * z.imag;\n-//     DS    += 14.78 * z.imag;\n-//     GAM1C += -0.017 * z.real;\n-//     SINPI += 0.2833 * z.real;\n+  z = ex[1][1] * ex[1][2] * ex[1][4];\n+  dlam += 1.267 * z.imaginary;\n+  ds += 1.52 * z.imaginary;\n+  gam1c += -0.022 * z.real;\n+  sinpi += 0.0164 * z.real;\n \n-//     # AddSol(-0.586000, -1.200000, 0.054000, -0.010000, 2.000000, 0.000000, 0.000000, 1.000000)\n-//     z = ex[2][1] * ex[1][4];\n-//     DLAM  += -0.586 * z.imag;\n-//     DS    += -1.20 * z.imag;\n-//     GAM1C += 0.054 * z.real;\n-//     SINPI += -0.0100 * z.real;\n+  z = ex[1][1] * ex[1][2];\n+  dlam += -109.673 * z.imaginary;\n+  ds += -115.18 * z.imaginary;\n+  gam1c += 0.461 * z.real;\n+  sinpi += -0.9490 * z.real;\n \n-//     # AddSol(769.016000, 767.960000, 0.107000, 10.165700, 2.000000, 0.000000, 0.000000, 0.000000)\n-//     z = ex[2][1];\n-//     DLAM  += 769.016 * z.imag;\n-//     DS    += 767.96 * z.imag;\n-//     GAM1C += 0.107 * z.real;\n-//     SINPI += 10.1657 * z.real;\n+  z = ex[1][1] * ex[1][2] * ex[-2][4];\n+  dlam += -205.962 * z.imaginary;\n+  ds += -182.36 * z.imaginary;\n+  gam1c += 2.056 * z.real;\n+  sinpi += 1.4437 * z.real;\n \n-//     # AddSol(1.750000, 2.010000, -0.018000, 0.015500, 2.000000, 0.000000, 0.000000, -1.000000)\n-//     z = ex[2][1] * ex[-1][4];\n-//     DLAM  += 1.750 * z.imag;\n-//     DS    += 2.01 * z.imag;\n-//     GAM1C += -0.018 * z.real;\n-//     SINPI += 0.0155 * z.real;\n+  z = ex[1][1] * ex[1][2] * ex[-3][4];\n+  dlam += 0.233 * z.imaginary;\n+  ds += 0.36 * z.imaginary;\n+  gam1c += 0.012 * z.real;\n+  sinpi += -0.0025 * z.real;\n \n-//     # AddSol(-211.656000, -152.530000, 5.679000, -0.303900, 2.000000, 0.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[-2][4];\n-//     DLAM  += -211.656 * z.imag;\n-//     DS    += -152.53 * z.imag;\n-//     GAM1C += 5.679 * z.real;\n-//     SINPI += -0.3039 * z.real;\n+  z = ex[1][1] * ex[1][2] * ex[-4][4];\n+  dlam += -4.391 * z.imaginary;\n+  ds += -9.66 * z.imaginary;\n+  gam1c += -0.471 * z.real;\n+  sinpi += 0.0673 * z.real;\n \n-//     # AddSol(1.225000, 0.910000, -0.030000, -0.008800, 2.000000, 0.000000, 0.000000, -3.000000)\n-//     z = ex[2][1] * ex[-3][4];\n-//     DLAM  += 1.225 * z.imag;\n-//     DS    += 0.91 * z.imag;\n-//     GAM1C += -0.030 * z.real;\n-//     SINPI += -0.0088 * z.real;\n+  z = ex[1][1] * ex[-1][2] * ex[4][4];\n+  dlam += 0.283 * z.imaginary;\n+  ds += 1.53 * z.imaginary;\n+  gam1c += -0.111 * z.real;\n+  sinpi += 0.0060 * z.real;\n \n-//     # AddSol(-30.773000, -34.070000, -0.308000, 0.372200, 2.000000, 0.000000, 0.000000, -4.000000)\n-//     z = ex[2][1] * ex[-4][4];\n-//     DLAM  += -30.773 * z.imag;\n-//     DS    += -34.07 * z.imag;\n-//     GAM1C += -0.308 * z.real;\n-//     SINPI += 0.3722 * z.real;\n+  z = ex[1][1] * ex[-1][2] * ex[2][4];\n+  dlam += 14.577 * z.imaginary;\n+  ds += 31.70 * z.imaginary;\n+  gam1c += -1.540 * z.real;\n+  sinpi += 0.2302 * z.real;\n \n-//     # AddSol(-0.570000, -1.400000, -0.074000, 0.010900, 2.000000, 0.000000, 0.000000, -6.000000)\n-//     z = ex[2][1] * ex[-6][4];\n-//     DLAM  += -0.570 * z.imag;\n-//     DS    += -1.40 * z.imag;\n-//     GAM1C += -0.074 * z.real;\n-//     SINPI += 0.0109 * z.real;\n+  z = ex[1][1] * ex[-1][2];\n+  dlam += 147.687 * z.imaginary;\n+  ds += 138.76 * z.imaginary;\n+  gam1c += 0.679 * z.real;\n+  sinpi += 1.1528 * z.real;\n \n-//     # AddSol(-2.921000, -11.750000, 0.787000, -0.048400, 1.000000, 1.000000, 0.000000, 2.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[2][4];\n-//     DLAM  += -2.921 * z.imag;\n-//     DS    += -11.75 * z.imag;\n-//     GAM1C += 0.787 * z.real;\n-//     SINPI += -0.0484 * z.real;\n+  z = ex[1][1] * ex[-1][2] * ex[-1][4];\n+  dlam += -1.089 * z.imaginary;\n+  ds += 0.55 * z.imaginary;\n+  gam1c += 0.021 * z.real;\n \n-//     # AddSol(1.267000, 1.520000, -0.022000, 0.016400, 1.000000, 1.000000, 0.000000, 1.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[1][4];\n-//     DLAM  += 1.267 * z.imag;\n-//     DS    += 1.52 * z.imag;\n-//     GAM1C += -0.022 * z.real;\n-//     SINPI += 0.0164 * z.real;\n+  z = ex[1][1] * ex[-1][2] * ex[-2][4];\n+  dlam += 28.475 * z.imaginary;\n+  ds += 23.59 * z.imaginary;\n+  gam1c += -0.443 * z.real;\n+  sinpi += -0.2257 * z.real;\n \n-//     # AddSol(-109.673000, -115.180000, 0.461000, -0.949000, 1.000000, 1.000000, 0.000000, 0.000000)\n-//     z = ex[1][1] * ex[1][2];\n-//     DLAM  += -109.673 * z.imag;\n-//     DS    += -115.18 * z.imag;\n-//     GAM1C += 0.461 * z.real;\n-//     SINPI += -0.9490 * z.real;\n+  z = ex[1][1] * ex[-1][2] * ex[-3][4];\n+  dlam += -0.276 * z.imaginary;\n+  ds += -0.38 * z.imaginary;\n+  gam1c += -0.006 * z.real;\n+  sinpi += -0.0036 * z.real;\n \n-//     # AddSol(-205.962000, -182.360000, 2.056000, 1.443700, 1.000000, 1.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[-2][4];\n-//     DLAM  += -205.962 * z.imag;\n-//     DS    += -182.36 * z.imag;\n-//     GAM1C += 2.056 * z.real;\n-//     SINPI += 1.4437 * z.real;\n+  z = ex[1][1] * ex[-1][2] * ex[-4][4];\n+  dlam += 0.636 * z.imaginary;\n+  ds += 2.27 * z.imaginary;\n+  gam1c += 0.146 * z.real;\n+  sinpi += -0.0102 * z.real;\n \n-//     # AddSol(0.233000, 0.360000, 0.012000, -0.002500, 1.000000, 1.000000, 0.000000, -3.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[-3][4];\n-//     DLAM  += 0.233 * z.imag;\n-//     DS    += 0.36 * z.imag;\n-//     GAM1C += 0.012 * z.real;\n-//     SINPI += -0.0025 * z.real;\n+  z = ex[2][2] * ex[2][4];\n+  dlam += -0.189 * z.imaginary;\n+  ds += -1.68 * z.imaginary;\n+  gam1c += 0.131 * z.real;\n+  sinpi += -0.0028 * z.real;\n \n-//     # AddSol(-4.391000, -9.660000, -0.471000, 0.067300, 1.000000, 1.000000, 0.000000, -4.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[-4][4];\n-//     DLAM  += -4.391 * z.imag;\n-//     DS    += -9.66 * z.imag;\n-//     GAM1C += -0.471 * z.real;\n-//     SINPI += 0.0673 * z.real;\n+  z = ex[2][2];\n+  dlam += -7.486 * z.imaginary;\n+  ds += -0.66 * z.imaginary;\n+  gam1c += -0.037 * z.real;\n+  sinpi += -0.0086 * z.real;\n \n-//     # AddSol(0.283000, 1.530000, -0.111000, 0.006000, 1.000000, -1.000000, 0.000000, 4.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[4][4];\n-//     DLAM  += 0.283 * z.imag;\n-//     DS    += 1.53 * z.imag;\n-//     GAM1C += -0.111 * z.real;\n-//     SINPI += 0.0060 * z.real;\n+  z = ex[2][2] * ex[-2][4];\n+  dlam += -8.096 * z.imaginary;\n+  ds += -16.35 * z.imaginary;\n+  gam1c += -0.740 * z.real;\n+  sinpi += 0.0918 * z.real;\n \n-//     # AddSol(14.577000, 31.700000, -1.540000, 0.230200, 1.000000, -1.000000, 0.000000, 2.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[2][4];\n-//     DLAM  += 14.577 * z.imag;\n-//     DS    += 31.70 * z.imag;\n-//     GAM1C += -1.540 * z.real;\n-//     SINPI += 0.2302 * z.real;\n+  z = ex[2][3] * ex[2][4];\n+  dlam += -5.741 * z.imaginary;\n+  ds += -0.04 * z.imaginary;\n+  sinpi += -0.0009 * z.real;\n \n-//     # AddSol(147.687000, 138.760000, 0.679000, 1.152800, 1.000000, -1.000000, 0.000000, 0.000000)\n-//     z = ex[1][1] * ex[-1][2];\n-//     DLAM  += 147.687 * z.imag;\n-//     DS    += 138.76 * z.imag;\n-//     GAM1C += 0.679 * z.real;\n-//     SINPI += 1.1528 * z.real;\n+  z = ex[2][3] * ex[1][4];\n+  dlam += 0.255 * z.imaginary;\n \n-//     # AddSol(-1.089000, 0.550000, 0.021000, 0.000000, 1.000000, -1.000000, 0.000000, -1.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-1][4];\n-//     DLAM  += -1.089 * z.imag;\n-//     DS    += 0.55 * z.imag;\n-//     GAM1C += 0.021 * z.real;\n+  z = ex[2][3];\n+  dlam += -411.608 * z.imaginary;\n+  ds += -0.20 * z.imaginary;\n+  sinpi += -0.0124 * z.real;\n \n-//     # AddSol(28.475000, 23.590000, -0.443000, -0.225700, 1.000000, -1.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-2][4];\n-//     DLAM  += 28.475 * z.imag;\n-//     DS    += 23.59 * z.imag;\n-//     GAM1C += -0.443 * z.real;\n-//     SINPI += -0.2257 * z.real;\n+  z = ex[2][3] * ex[-1][4];\n+  dlam += 0.584 * z.imaginary;\n+  ds += 0.84 * z.imaginary;\n+  sinpi += 0.0071 * z.real;\n \n-//     # AddSol(-0.276000, -0.380000, -0.006000, -0.003600, 1.000000, -1.000000, 0.000000, -3.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-3][4];\n-//     DLAM  += -0.276 * z.imag;\n-//     DS    += -0.38 * z.imag;\n-//     GAM1C += -0.006 * z.real;\n-//     SINPI += -0.0036 * z.real;\n+  z = ex[2][3] * ex[-2][4];\n+  dlam += -55.173 * z.imaginary;\n+  ds += -52.14 * z.imaginary;\n+  sinpi += -0.1052 * z.real;\n \n-//     # AddSol(0.636000, 2.270000, 0.146000, -0.010200, 1.000000, -1.000000, 0.000000, -4.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-4][4];\n-//     DLAM  += 0.636 * z.imag;\n-//     DS    += 2.27 * z.imag;\n-//     GAM1C += 0.146 * z.real;\n-//     SINPI += -0.0102 * z.real;\n+  z = ex[2][3] * ex[-3][4];\n+  dlam += 0.254 * z.imaginary;\n+  ds += 0.25 * z.imaginary;\n+  sinpi += -0.0017 * z.real;\n \n-//     # AddSol(-0.189000, -1.680000, 0.131000, -0.002800, 0.000000, 2.000000, 0.000000, 2.000000)\n-//     z = ex[2][2] * ex[2][4];\n-//     DLAM  += -0.189 * z.imag;\n-//     DS    += -1.68 * z.imag;\n-//     GAM1C += 0.131 * z.real;\n-//     SINPI += -0.0028 * z.real;\n+  z = ex[2][3] * ex[-4][4];\n+  dlam += 0.025 * z.imaginary;\n+  ds += -1.67 * z.imaginary;\n+  sinpi += 0.0031 * z.real;\n \n-//     # AddSol(-7.486000, -0.660000, -0.037000, -0.008600, 0.000000, 2.000000, 0.000000, 0.000000)\n-//     z = ex[2][2];\n-//     DLAM  += -7.486 * z.imag;\n-//     DS    += -0.66 * z.imag;\n-//     GAM1C += -0.037 * z.real;\n-//     SINPI += -0.0086 * z.real;\n+  z = ex[3][1] * ex[2][4];\n+  dlam += 1.060 * z.imaginary;\n+  ds += 2.96 * z.imaginary;\n+  gam1c += -0.166 * z.real;\n+  sinpi += 0.0243 * z.real;\n \n-//     # AddSol(-8.096000, -16.350000, -0.740000, 0.091800, 0.000000, 2.000000, 0.000000, -2.000000)\n-//     z = ex[2][2] * ex[-2][4];\n-//     DLAM  += -8.096 * z.imag;\n-//     DS    += -16.35 * z.imag;\n-//     GAM1C += -0.740 * z.real;\n-//     SINPI += 0.0918 * z.real;\n+  z = ex[3][1];\n+  dlam += 36.124 * z.imaginary;\n+  ds += 50.64 * z.imaginary;\n+  gam1c += -1.300 * z.real;\n+  sinpi += 0.6215 * z.real;\n \n-//     # AddSol(-5.741000, -0.040000, 0.000000, -0.000900, 0.000000, 0.000000, 2.000000, 2.000000)\n-//     z = ex[2][3] * ex[2][4];\n-//     DLAM  += -5.741 * z.imag;\n-//     DS    += -0.04 * z.imag;\n-//     SINPI += -0.0009 * z.real;\n+  z = ex[3][1] * ex[-2][4];\n+  dlam += -13.193 * z.imaginary;\n+  ds += -16.40 * z.imaginary;\n+  gam1c += 0.258 * z.real;\n+  sinpi += -0.1187 * z.real;\n \n-//     # AddSol(0.255000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 2.000000, 1.000000)\n-//     z = ex[2][3] * ex[1][4];\n-//     DLAM  += 0.255 * z.imag;\n+  z = ex[3][1] * ex[-4][4];\n+  dlam += -1.187 * z.imaginary;\n+  ds += -0.74 * z.imaginary;\n+  gam1c += 0.042 * z.real;\n+  sinpi += 0.0074 * z.real;\n \n-//     # AddSol(-411.608000, -0.200000, 0.000000, -0.012400, 0.000000, 0.000000, 2.000000, 0.000000)\n-//     z = ex[2][3];\n-//     DLAM  += -411.608 * z.imag;\n-//     DS    += -0.20 * z.imag;\n-//     SINPI += -0.0124 * z.real;\n+  z = ex[3][1] * ex[-6][4];\n+  dlam += -0.293 * z.imaginary;\n+  ds += -0.31 * z.imaginary;\n+  gam1c += -0.002 * z.real;\n+  sinpi += 0.0046 * z.real;\n \n-//     # AddSol(0.584000, 0.840000, 0.000000, 0.007100, 0.000000, 0.000000, 2.000000, -1.000000)\n-//     z = ex[2][3] * ex[-1][4];\n-//     DLAM  += 0.584 * z.imag;\n-//     DS    += 0.84 * z.imag;\n-//     SINPI += 0.0071 * z.real;\n+  z = ex[2][1] * ex[1][2] * ex[2][4];\n+  dlam += -0.290 * z.imaginary;\n+  ds += -1.45 * z.imaginary;\n+  gam1c += 0.116 * z.real;\n+  sinpi += -0.0051 * z.real;\n \n-//     # AddSol(-55.173000, -52.140000, 0.000000, -0.105200, 0.000000, 0.000000, 2.000000, -2.000000)\n-//     z = ex[2][3] * ex[-2][4];\n-//     DLAM  += -55.173 * z.imag;\n-//     DS    += -52.14 * z.imag;\n-//     SINPI += -0.1052 * z.real;\n+  z = ex[2][1] * ex[1][2];\n+  dlam += -7.649 * z.imaginary;\n+  ds += -10.56 * z.imaginary;\n+  gam1c += 0.259 * z.real;\n+  sinpi += -0.1038 * z.real;\n \n-//     # AddSol(0.254000, 0.250000, 0.000000, -0.001700, 0.000000, 0.000000, 2.000000, -3.000000)\n-//     z = ex[2][3] * ex[-3][4];\n-//     DLAM  += 0.254 * z.imag;\n-//     DS    += 0.25 * z.imag;\n-//     SINPI += -0.0017 * z.real;\n+  z = ex[2][1] * ex[1][2] * ex[-2][4];\n+  dlam += -8.627 * z.imaginary;\n+  ds += -7.59 * z.imaginary;\n+  gam1c += 0.078 * z.real;\n+  sinpi += -0.0192 * z.real;\n \n-//     # AddSol(0.025000, -1.670000, 0.000000, 0.003100, 0.000000, 0.000000, 2.000000, -4.000000)\n-//     z = ex[2][3] * ex[-4][4];\n-//     DLAM  += 0.025 * z.imag;\n-//     DS    += -1.67 * z.imag;\n-//     SINPI += 0.0031 * z.real;\n+  z = ex[2][1] * ex[1][2] * ex[-4][4];\n+  dlam += -2.740 * z.imaginary;\n+  ds += -2.54 * z.imaginary;\n+  gam1c += 0.022 * z.real;\n+  sinpi += 0.0324 * z.real;\n \n-//     # AddSol(1.060000, 2.960000, -0.166000, 0.024300, 3.000000, 0.000000, 0.000000, 2.000000)\n-//     z = ex[3][1] * ex[2][4];\n-//     DLAM  += 1.060 * z.imag;\n-//     DS    += 2.96 * z.imag;\n-//     GAM1C += -0.166 * z.real;\n-//     SINPI += 0.0243 * z.real;\n+  z = ex[2][1] * ex[-1][2] * ex[2][4];\n+  dlam += 1.181 * z.imaginary;\n+  ds += 3.32 * z.imaginary;\n+  gam1c += -0.212 * z.real;\n+  sinpi += 0.0213 * z.real;\n \n-//     # AddSol(36.124000, 50.640000, -1.300000, 0.621500, 3.000000, 0.000000, 0.000000, 0.000000)\n-//     z = ex[3][1];\n-//     DLAM  += 36.124 * z.imag;\n-//     DS    += 50.64 * z.imag;\n-//     GAM1C += -1.300 * z.real;\n-//     SINPI += 0.6215 * z.real;\n+  z = ex[2][1] * ex[-1][2];\n+  dlam += 9.703 * z.imaginary;\n+  ds += 11.67 * z.imaginary;\n+  gam1c += -0.151 * z.real;\n+  sinpi += 0.1268 * z.real;\n \n-//     # AddSol(-13.193000, -16.400000, 0.258000, -0.118700, 3.000000, 0.000000, 0.000000, -2.000000)\n-//     z = ex[3][1] * ex[-2][4];\n-//     DLAM  += -13.193 * z.imag;\n-//     DS    += -16.40 * z.imag;\n-//     GAM1C += 0.258 * z.real;\n-//     SINPI += -0.1187 * z.real;\n+  z = ex[2][1] * ex[-1][2] * ex[-1][4];\n+  dlam += -0.352 * z.imaginary;\n+  ds += -0.37 * z.imaginary;\n+  gam1c += 0.001 * z.real;\n+  sinpi += -0.0028 * z.real;\n \n-//     # AddSol(-1.187000, -0.740000, 0.042000, 0.007400, 3.000000, 0.000000, 0.000000, -4.000000)\n-//     z = ex[3][1] * ex[-4][4];\n-//     DLAM  += -1.187 * z.imag;\n-//     DS    += -0.74 * z.imag;\n-//     GAM1C += 0.042 * z.real;\n-//     SINPI += 0.0074 * z.real;\n+  z = ex[2][1] * ex[-1][2] * ex[-2][4];\n+  dlam += -2.494 * z.imaginary;\n+  ds += -1.17 * z.imaginary;\n+  gam1c += -0.003 * z.real;\n\\ No newline at end of file\n+  sinpi += -0.0017 * z.real;\n \n-//     # AddSol(-0.293000, -0.310000, -0.002000, 0.004600, 3.000000, 0.000000, 0.000000, -6.000000)\n-//     z = ex[3][1] * ex[-6][4];\n-//     DLAM  += -0.293 * z.imag;\n-//     DS    += -0.31 * z.imag;\n-//     GAM1C += -0.002 * z.real;\n-//     SINPI += 0.0046 * z.real;\n+  z = ex[2][1] * ex[-1][2] * ex[-4][4];\n+  dlam += 0.360 * z.imaginary;\n+  ds += 0.20 * z.imaginary;\n+  gam1c += -0.012 * z.real;\n+  sinpi += -0.0043 * z.real;\n \n-//     # AddSol(-0.290000, -1.450000, 0.116000, -0.005100, 2.000000, 1.000000, 0.000000, 2.000000)\n-//     z = ex[2][1] * ex[1][2] * ex[2][4];\n-//     DLAM  += -0.290 * z.imag;\n-//     DS    += -1.45 * z.imag;\n-//     GAM1C += 0.116 * z.real;\n-//     SINPI += -0.0051 * z.real;\n+  z = ex[1][1] * ex[2][2];\n+  dlam += -1.167 * z.imaginary;\n+  ds += -1.25 * z.imaginary;\n+  gam1c += 0.008 * z.real;\n+  sinpi += -0.0106 * z.real;\n \n-//     # AddSol(-7.649000, -10.560000, 0.259000, -0.103800, 2.000000, 1.000000, 0.000000, 0.000000)\n-//     z = ex[2][1] * ex[1][2];\n-//     DLAM  += -7.649 * z.imag;\n-//     DS    += -10.56 * z.imag;\n-//     GAM1C += 0.259 * z.real;\n-//     SINPI += -0.1038 * z.real;\n+  z = ex[1][1] * ex[2][2] * ex[-2][4];\n+  dlam += -7.412 * z.imaginary;\n+  ds += -6.12 * z.imaginary;\n+  gam1c += 0.117 * z.real;\n+  sinpi += 0.0484 * z.real;\n \n-//     # AddSol(-8.627000, -7.590000, 0.078000, -0.019200, 2.000000, 1.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[1][2] * ex[-2][4];\n-//     DLAM  += -8.627 * z.imag;\n-//     DS    += -7.59 * z.imag;\n-//     GAM1C += 0.078 * z.real;\n-//     SINPI += -0.0192 * z.real;\n+  z = ex[1][1] * ex[2][2] * ex[-4][4];\n+  dlam += -0.311 * z.imaginary;\n+  ds += -0.65 * z.imaginary;\n+  gam1c += -0.032 * z.real;\n+  sinpi += 0.0044 * z.real;\n \n-//     # AddSol(-2.740000, -2.540000, 0.022000, 0.032400, 2.000000, 1.000000, 0.000000, -4.000000)\n-//     z = ex[2][1] * ex[1][2] * ex[-4][4];\n-//     DLAM  += -2.740 * z.imag;\n-//     DS    += -2.54 * z.imag;\n-//     GAM1C += 0.022 * z.real;\n-//     SINPI += 0.0324 * z.real;\n+  z = ex[1][1] * ex[-2][2] * ex[2][4];\n+  dlam += 0.757 * z.imaginary;\n+  ds += 1.82 * z.imaginary;\n+  gam1c += -0.105 * z.real;\n+  sinpi += 0.0112 * z.real;\n \n-//     # AddSol(1.181000, 3.320000, -0.212000, 0.021300, 2.000000, -1.000000, 0.000000, 2.000000)\n-//     z = ex[2][1] * ex[-1][2] * ex[2][4];\n-//     DLAM  += 1.181 * z.imag;\n-//     DS    += 3.32 * z.imag;\n-//     GAM1C += -0.212 * z.real;\n-//     SINPI += 0.0213 * z.real;\n+  z = ex[1][1] * ex[-2][2];\n+  dlam += 2.580 * z.imaginary;\n+  ds += 2.32 * z.imaginary;\n+  gam1c += 0.027 * z.real;\n+  sinpi += 0.0196 * z.real;\n \n-//     # AddSol(9.703000, 11.670000, -0.151000, 0.126800, 2.000000, -1.000000, 0.000000, 0.000000)\n-//     z = ex[2][1] * ex[-1][2];\n-//     DLAM  += 9.703 * z.imag;\n-//     DS    += 11.67 * z.imag;\n-//     GAM1C += -0.151 * z.real;\n-//     SINPI += 0.1268 * z.real;\n+  z = ex[1][1] * ex[-2][2] * ex[-2][4];\n+  dlam += 2.533 * z.imaginary;\n+  ds += 2.40 * z.imaginary;\n+  gam1c += -0.014 * z.real;\n+  sinpi += -0.0212 * z.real;\n \n-//     # AddSol(-0.352000, -0.370000, 0.001000, -0.002800, 2.000000, -1.000000, 0.000000, -1.000000)\n-//     z = ex[2][1] * ex[-1][2] * ex[-1][4];\n-//     DLAM  += -0.352 * z.imag;\n-//     DS    += -0.37 * z.imag;\n-//     GAM1C += 0.001 * z.real;\n-//     SINPI += -0.0028 * z.real;\n+  z = ex[3][2] * ex[-2][4];\n+  dlam += -0.344 * z.imaginary;\n+  ds += -0.57 * z.imaginary;\n+  gam1c += -0.025 * z.real;\n+  sinpi += 0.0036 * z.real;\n \n-//     # AddSol(-2.494000, -1.170000, -0.003000, -0.001700, 2.000000, -1.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[-1][2] * ex[-2][4];\n-//     DLAM  += -2.494 * z.imag;\n-//     DS    += -1.17 * z.imag;\n-//     GAM1C += -0.003 * z.real;\n-//     SINPI += -0.0017 * z.real;\n+  z = ex[1][1] * ex[2][3] * ex[2][4];\n+  dlam += -0.992 * z.imaginary;\n+  ds += -0.02 * z.imaginary;\n \n-//     # AddSol(0.360000, 0.200000, -0.012000, -0.004300, 2.000000, -1.000000, 0.000000, -4.000000)\n-//     z = ex[2][1] * ex[-1][2] * ex[-4][4];\n-//     DLAM  += 0.360 * z.imag;\n-//     DS    += 0.20 * z.imag;\n-//     GAM1C += -0.012 * z.real;\n-//     SINPI += -0.0043 * z.real;\n+  z = ex[1][1] * ex[2][3];\n+  dlam += -45.099 * z.imaginary;\n+  ds += -0.02 * z.imaginary;\n+  sinpi += -0.0010 * z.real;\n \n-//     # AddSol(-1.167000, -1.250000, 0.008000, -0.010600, 1.000000, 2.000000, 0.000000, 0.000000)\n-//     z = ex[1][1] * ex[2][2];\n-//     DLAM  += -1.167 * z.imag;\n-//     DS    += -1.25 * z.imag;\n-//     GAM1C += 0.008 * z.real;\n-//     SINPI += -0.0106 * z.real;\n+  z = ex[1][1] * ex[2][3] * ex[-2][4];\n+  dlam += -0.179 * z.imaginary;\n+  ds += -9.52 * z.imaginary;\n+  sinpi += -0.0833 * z.real;\n \n-//     # AddSol(-7.412000, -6.120000, 0.117000, 0.048400, 1.000000, 2.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[2][2] * ex[-2][4];\n-//     DLAM  += -7.412 * z.imag;\n-//     DS    += -6.12 * z.imag;\n-//     GAM1C += 0.117 * z.real;\n-//     SINPI += 0.0484 * z.real;\n+  z = ex[1][1] * ex[2][3] * ex[-4][4];\n+  dlam += -0.301 * z.imaginary;\n+  ds += -0.33 * z.imaginary;\n+  sinpi += 0.0014 * z.real;\n \n-//     # AddSol(-0.311000, -0.650000, -0.032000, 0.004400, 1.000000, 2.000000, 0.000000, -4.000000)\n-//     z = ex[1][1] * ex[2][2] * ex[-4][4];\n-//     DLAM  += -0.311 * z.imag;\n-//     DS    += -0.65 * z.imag;\n-//     GAM1C += -0.032 * z.real;\n-//     SINPI += 0.0044 * z.real;\n+  z = ex[1][1] * ex[-2][3] * ex[2][4];\n+  dlam += -6.382 * z.imaginary;\n+  ds += -3.37 * z.imaginary;\n+  sinpi += -0.0481 * z.real;\n \n-//     # AddSol(0.757000, 1.820000, -0.105000, 0.011200, 1.000000, -2.000000, 0.000000, 2.000000)\n-//     z = ex[1][1] * ex[-2][2] * ex[2][4];\n-//     DLAM  += 0.757 * z.imag;\n-//     DS    += 1.82 * z.imag;\n-//     GAM1C += -0.105 * z.real;\n-//     SINPI += 0.0112 * z.real;\n+  z = ex[1][1] * ex[-2][3];\n+  dlam += 39.528 * z.imaginary;\n+  ds += 85.13 * z.imaginary;\n+  sinpi += -0.7136 * z.real;\n \n-//     # AddSol(2.580000, 2.320000, 0.027000, 0.019600, 1.000000, -2.000000, 0.000000, 0.000000)\n-//     z = ex[1][1] * ex[-2][2];\n-//     DLAM  += 2.580 * z.imag;\n-//     DS    += 2.32 * z.imag;\n-//     GAM1C += 0.027 * z.real;\n-//     SINPI += 0.0196 * z.real;\n+  z = ex[1][1] * ex[-2][3] * ex[-2][4];\n+  dlam += 9.366 * z.imaginary;\n+  ds += 0.71 * z.imaginary;\n+  sinpi += -0.0112 * z.real;\n \n-//     # AddSol(2.533000, 2.400000, -0.014000, -0.021200, 1.000000, -2.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[-2][2] * ex[-2][4];\n-//     DLAM  += 2.533 * z.imag;\n-//     DS    += 2.40 * z.imag;\n-//     GAM1C += -0.014 * z.real;\n-//     SINPI += -0.0212 * z.real;\n+  z = ex[1][1] * ex[-2][3] * ex[-4][4];\n+  dlam += 0.202 * z.imaginary;\n+  ds += 0.02 * z.imaginary;\n \n-//     # AddSol(-0.344000, -0.570000, -0.025000, 0.003600, 0.000000, 3.000000, 0.000000, -2.000000)\n-//     z = ex[3][2] * ex[-2][4];\n-//     DLAM  += -0.344 * z.imag;\n-//     DS    += -0.57 * z.imag;\n-//     GAM1C += -0.025 * z.real;\n-//     SINPI += 0.0036 * z.real;\n+  z = ex[1][2] * ex[2][3];\n+  dlam += 0.415 * z.imaginary;\n+  ds += 0.10 * z.imaginary;\n+  sinpi += 0.0013 * z.real;\n \n-//     # AddSol(-0.992000, -0.020000, 0.000000, 0.000000, 1.000000, 0.000000, 2.000000, 2.000000)\n-//     z = ex[1][1] * ex[2][3] * ex[2][4];\n-//     DLAM  += -0.992 * z.imag;\n-//     DS    += -0.02 * z.imag;\n+  z = ex[1][2] * ex[2][3] * ex[-2][4];\n+  dlam += -2.152 * z.imaginary;\n+  ds += -2.26 * z.imaginary;\n+  sinpi += -0.0066 * z.real;\n \n-//     # AddSol(-45.099000, -0.020000, 0.000000, -0.001000, 1.000000, 0.000000, 2.000000, 0.000000)\n-//     z = ex[1][1] * ex[2][3];\n-//     DLAM  += -45.099 * z.imag;\n-//     DS    += -0.02 * z.imag;\n-//     SINPI += -0.0010 * z.real;\n+  z = ex[1][2] * ex[-2][3] * ex[2][4];\n+  dlam += -1.440 * z.imaginary;\n+  ds += -1.30 * z.imaginary;\n+  sinpi += 0.0014 * z.real;\n \n-//     # AddSol(-0.179000, -9.520000, 0.000000, -0.083300, 1.000000, 0.000000, 2.000000, -2.000000)\n-//     z = ex[1][1] * ex[2][3] * ex[-2][4];\n-//     DLAM  += -0.179 * z.imag;\n-//     DS    += -9.52 * z.imag;\n-//     SINPI += -0.0833 * z.real;\n+  z = ex[1][2] * ex[-2][3] * ex[-2][4];\n+  dlam += 0.384 * z.imaginary;\n+  ds += -0.04 * z.imaginary;\n \n-//     # AddSol(-0.301000, -0.330000, 0.000000, 0.001400, 1.000000, 0.000000, 2.000000, -4.000000)\n-//     z = ex[1][1] * ex[2][3] * ex[-4][4];\n-//     DLAM  += -0.301 * z.imag;\n-//     DS    += -0.33 * z.imag;\n-//     SINPI += 0.0014 * z.real;\n+  z = ex[4][1];\n+  dlam += 1.938 * z.imaginary;\n+  ds += 3.60 * z.imaginary;\n+  gam1c += -0.145 * z.real;\n+  sinpi += 0.0401 * z.real;\n \n-//     # AddSol(-6.382000, -3.370000, 0.000000, -0.048100, 1.000000, 0.000000, -2.000000, 2.000000)\n-//     z = ex[1][1] * ex[-2][3] * ex[2][4];\n-//     DLAM  += -6.382 * z.imag;\n-//     DS    += -3.37 * z.imag;\n-//     SINPI += -0.0481 * z.real;\n+  z = ex[4][1] * ex[-2][4];\n+  dlam += -0.952 * z.imaginary;\n+  ds += -1.58 * z.imaginary;\n+  gam1c += 0.052 * z.real;\n+  sinpi += -0.0130 * z.real;\n \n-//     # AddSol(39.528000, 85.130000, 0.000000, -0.713600, 1.000000, 0.000000, -2.000000, 0.000000)\n-//     z = ex[1][1] * ex[-2][3];\n-//     DLAM  += 39.528 * z.imag;\n-//     DS    += 85.13 * z.imag;\n-//     SINPI += -0.7136 * z.real;\n+  z = ex[3][1] * ex[1][2];\n+  dlam += -0.551 * z.imaginary;\n+  ds += -0.94 * z.imaginary;\n+  gam1c += 0.032 * z.real;\n+  sinpi += -0.0097 * z.real;\n \n-//     # AddSol(9.366000, 0.710000, 0.000000, -0.011200, 1.000000, 0.000000, -2.000000, -2.000000)\n-//     z = ex[1][1] * ex[-2][3] * ex[-2][4];\n-//     DLAM  += 9.366 * z.imag;\n-//     DS    += 0.71 * z.imag;\n-//     SINPI += -0.0112 * z.real;\n+  z = ex[3][1] * ex[1][2] * ex[-2][4];\n+  dlam += -0.482 * z.imaginary;\n+  ds += -0.57 * z.imaginary;\n+  gam1c += 0.005 * z.real;\n+  sinpi += -0.0045 * z.real;\n \n-//     # AddSol(0.202000, 0.020000, 0.000000, 0.000000, 1.000000, 0.000000, -2.000000, -4.000000)\n-//     z = ex[1][1] * ex[-2][3] * ex[-4][4];\n-//     DLAM  += 0.202 * z.imag;\n-//     DS    += 0.02 * z.imag;\n+  z = ex[3][1] * ex[-1][2];\n+  dlam += 0.681 * z.imaginary;\n+  ds += 0.96 * z.imaginary;\n+  gam1c += -0.026 * z.real;\n+  sinpi += 0.0115 * z.real;\n \n-//     # AddSol(0.415000, 0.100000, 0.000000, 0.001300, 0.000000, 1.000000, 2.000000, 0.000000)\n-//     z = ex[1][2] * ex[2][3];\n-//     DLAM  += 0.415 * z.imag;\n-//     DS    += 0.10 * z.imag;\n-//     SINPI += 0.0013 * z.real;\n+  z = ex[2][1] * ex[2][2] * ex[-2][4];\n+  dlam += -0.297 * z.imaginary;\n+  ds += -0.27 * z.imaginary;\n+  gam1c += 0.002 * z.real;\n+  sinpi += -0.0009 * z.real;\n \n-//     # AddSol(-2.152000, -2.260000, 0.000000, -0.006600, 0.000000, 1.000000, 2.000000, -2.000000)\n-//     z = ex[1][2] * ex[2][3] * ex[-2][4];\n-//     DLAM  += -2.152 * z.imag;\n-//     DS    += -2.26 * z.imag;\n-//     SINPI += -0.0066 * z.real;\n+  z = ex[2][1] * ex[-2][2] * ex[-2][4];\n+  dlam += 0.254 * z.imaginary;\n+  ds += 0.21 * z.imaginary;\n+  gam1c += -0.003 * z.real;\n \n-//     # AddSol(-1.440000, -1.300000, 0.000000, 0.001400, 0.000000, 1.000000, -2.000000, 2.000000)\n-//     z = ex[1][2] * ex[-2][3] * ex[2][4];\n-//     DLAM  += -1.440 * z.imag;\n-//     DS    += -1.30 * z.imag;\n-//     SINPI += 0.0014 * z.real;\n+  z = ex[1][1] * ex[3][2] * ex[-2][4];\n+  dlam += -0.250 * z.imaginary;\n+  ds += -0.22 * z.imaginary;\n+  gam1c += 0.004 * z.real;\n+  sinpi += 0.0014 * z.real;\n \n-//     # AddSol(0.384000, -0.040000, 0.000000, 0.000000, 0.000000, 1.000000, -2.000000, -2.000000)\n-//     z = ex[1][2] * ex[-2][3] * ex[-2][4];\n-//     DLAM  += 0.384 * z.imag;\n-//     DS    += -0.04 * z.imag;\n+  z = ex[2][1] * ex[2][3];\n+  dlam += -3.996 * z.imaginary;\n+  sinpi += 0.0004 * z.real;\n \n-//     # AddSol(1.938000, 3.600000, -0.145000, 0.040100, 4.000000, 0.000000, 0.000000, 0.000000)\n-//     z = ex[4][1];\n-//     DLAM  += 1.938 * z.imag;\n-//     DS    += 3.60 * z.imag;\n-//     GAM1C += -0.145 * z.real;\n-//     SINPI += 0.0401 * z.real;\n+  z = ex[2][1] * ex[2][3] * ex[-2][4];\n+  dlam += 0.557 * z.imaginary;\n+  ds += -0.75 * z.imaginary;\n+  sinpi += -0.0090 * z.real;\n \n-//     # AddSol(-0.952000, -1.580000, 0.052000, -0.013000, 4.000000, 0.000000, 0.000000, -2.000000)\n-//     z = ex[4][1] * ex[-2][4];\n-//     DLAM  += -0.952 * z.imag;\n-//     DS    += -1.58 * z.imag;\n-//     GAM1C += 0.052 * z.real;\n-//     SINPI += -0.0130 * z.real;\n+  z = ex[2][1] * ex[-2][3] * ex[2][4];\n+  dlam += -0.459 * z.imaginary;\n+  ds += -0.38 * z.imaginary;\n+  sinpi += -0.0053 * z.real;\n \n-//     # AddSol(-0.551000, -0.940000, 0.032000, -0.009700, 3.000000, 1.000000, 0.000000, 0.000000)\n-//     z = ex[3][1] * ex[1][2];\n-//     DLAM  += -0.551 * z.imag;\n-//     DS    += -0.94 * z.imag;\n-//     GAM1C += 0.032 * z.real;\n-//     SINPI += -0.0097 * z.real;\n+  z = ex[2][1] * ex[-2][3];\n+  dlam += -1.298 * z.imaginary;\n+  ds += 0.74 * z.imaginary;\n+  sinpi += 0.0004 * z.real;\n \n-//     # AddSol(-0.482000, -0.570000, 0.005000, -0.004500, 3.000000, 1.000000, 0.000000, -2.000000)\n-//     z = ex[3][1] * ex[1][2] * ex[-2][4];\n-//     DLAM  += -0.482 * z.imag;\n-//     DS    += -0.57 * z.imag;\n-//     GAM1C += 0.005 * z.real;\n-//     SINPI += -0.0045 * z.real;\n+  z = ex[2][1] * ex[-2][3] * ex[-2][4];\n+  dlam += 0.538 * z.imaginary;\n+  ds += 1.14 * z.imaginary;\n+  sinpi += -0.0141 * z.real;\n \n-//     # AddSol(0.681000, 0.960000, -0.026000, 0.011500, 3.000000, -1.000000, 0.000000, 0.000000)\n-//     z = ex[3][1] * ex[-1][2];\n-//     DLAM  += 0.681 * z.imag;\n-//     DS    += 0.96 * z.imag;\n-//     GAM1C += -0.026 * z.real;\n-//     SINPI += 0.0115 * z.real;\n+  z = ex[1][1] * ex[1][2] * ex[2][3];\n+  dlam += 0.263 * z.imaginary;\n+  ds += 0.02 * z.imaginary;\n \n-//     # AddSol(-0.297000, -0.270000, 0.002000, -0.000900, 2.000000, 2.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[2][2] * ex[-2][4];\n-//     DLAM  += -0.297 * z.imag;\n-//     DS    += -0.27 * z.imag;\n-//     GAM1C += 0.002 * z.real;\n-//     SINPI += -0.0009 * z.real;\n+  z = ex[1][1] * ex[1][2] * ex[-2][3] * ex[-2][4];\n+  dlam += 0.426 * z.imaginary;\n+  ds += 0.07 * z.imaginary;\n+  sinpi += -0.0006 * z.real;\n \n-//     # AddSol(0.254000, 0.210000, -0.003000, 0.000000, 2.000000, -2.000000, 0.000000, -2.000000)\n-//     z = ex[2][1] * ex[-2][2] * ex[-2][4];\n-//     DLAM  += 0.254 * z.imag;\n-//     DS    += 0.21 * z.imag;\n-//     GAM1C += -0.003 * z.real;\n+  z = ex[1][1] * ex[-1][2] * ex[2][3];\n+  dlam += -0.304 * z.imaginary;\n+  ds += 0.03 * z.imaginary;\n+  sinpi += 0.0003 * z.real;\n \n-//     # AddSol(-0.250000, -0.220000, 0.004000, 0.001400, 1.000000, 3.000000, 0.000000, -2.000000)\n-//     z = ex[1][1] * ex[3][2] * ex[-2][4];\n-//     DLAM  += -0.250 * z.imag;\n-//     DS    += -0.22 * z.imag;\n-//     GAM1C += 0.004 * z.real;\n-//     SINPI += 0.0014 * z.real;\n+  z = ex[1][1] * ex[-1][2] * ex[-2][3] * ex[2][4];\n+  dlam += -0.372 * z.imaginary;\n+  ds += -0.19 * z.imaginary;\n+  sinpi += -0.0027 * z.real;\n \n-//     # AddSol(-3.996000, 0.000000, 0.000000, 0.000400, 2.000000, 0.000000, 2.000000, 0.000000)\n-//     z = ex[2][1] * ex[2][3];\n-//     DLAM  += -3.996 * z.imag;\n-//     SINPI += 0.0004 * z.real;\n+  z = ex[4][3];\n+  dlam += 0.418 * z.imaginary;\n \n-//     # AddSol(0.557000, -0.750000, 0.000000, -0.009000, 2.000000, 0.000000, 2.000000, -2.000000)\n-//     z = ex[2][1] * ex[2][3] * ex[-2][4];\n-//     DLAM  += 0.557 * z.imag;\n-//     DS    += -0.75 * z.imag;\n-//     SINPI += -0.0090 * z.real;\n+  z = ex[3][1] * ex[2][3];\n+  dlam += -0.330 * z.imaginary;\n+  ds += -0.04 * z.imaginary;\n \n-//     # AddSol(-0.459000, -0.380000, 0.000000, -0.005300, 2.000000, 0.000000, -2.000000, 2.000000)\n-//     z = ex[2][1] * ex[-2][3] * ex[2][4];\n-//     DLAM  += -0.459 * z.imag;\n-//     DS    += -0.38 * z.imag;\n-//     SINPI += -0.0053 * z.real;\n+  // print(z);\n+  // print(dlam);\n \n-//     # AddSol(-1.298000, 0.740000, 0.000000, 0.000400, 2.000000, 0.000000, -2.000000, 0.000000)\n-//     z = ex[2][1] * ex[-2][3];\n-//     DLAM  += -1.298 * z.imag;\n-//     DS    += 0.74 * z.imag;\n-//     SINPI += 0.0004 * z.real;\n+  dynamic addn(coeffn, p, q, r, s) {\n+    print(ex[q][2]);\n+    return (coeffn *\n+        (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n+  }\n \n-//     # AddSol(0.538000, 1.140000, 0.000000, -0.014100, 2.000000, 0.000000, -2.000000, -2.000000)\n-//     z = ex[2][1] * ex[-2][3] * ex[-2][4];\n-//     DLAM  += 0.538 * z.imag;\n-//     DS    += 1.14 * z.imag;\n-//     SINPI += -0.0141 * z.real;\n+  double N = -477.8936;\n+  // double N = 0;\n+  // N += addn(-526.069, 0, 0, 1, -2);\n+  // N += addn(-3.352, 0, 0, 1, -4);\n+  // N += addn(44.297, 1, 0, 1, -2);\n+  // N += addn(-6.000, 1, 0, 1, -4);\n+  // N += addn(20.599, -1, 0, 1, 0);\n+  // N += addn(-30.598, -1, 0, 1, -2);\n+  // N += addn(-24.649, -2, 0, 1, 0);\n+  // N += addn(-2.000, -2, 0, 1, -2);\n+  // N += addn(-22.571, 0, 1, 1, -2);\n+  // N += addn(10.985, 0, -1, 1, -2);\n \n-//     # AddSol(0.263000, 0.020000, 0.000000, 0.000000, 1.000000, 1.000000, 2.000000, 0.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[2][3];\n-//     DLAM  += 0.263 * z.imag;\n-//     DS    += 0.02 * z.imag;\n+  dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n+      0.31 * sine(0.0466 - 125.1025 * T) +\n+      0.35 * sine(0.5785 - 25.1042 * T) +\n+      0.66 * sine(0.4591 + 1335.8075 * T) +\n+      0.64 * sine(0.3130 - 91.5680 * T) +\n+      1.14 * sine(0.1480 + 1331.2898 * T) +\n+      0.21 * sine(0.5918 + 1056.5859 * T) +\n+      0.44 * sine(0.5784 + 1322.8595 * T) +\n+      0.24 * sine(0.2275 - 5.7374 * T) +\n+      0.28 * sine(0.2965 + 2.6929 * T) +\n+      0.33 * sine(0.3132 + 6.3368 * T));\n \n-//     # AddSol(0.426000, 0.070000, 0.000000, -0.000600, 1.000000, 1.000000, -2.000000, -2.000000)\n-//     z = ex[1][1] * ex[1][2] * ex[-2][3] * ex[-2][4];\n-//     DLAM  += 0.426 * z.imag;\n-//     DS    += 0.07 * z.imag;\n-//     SINPI += -0.0006 * z.real;\n+  var S = F + ds / arc;\n+  var latSeconds =\n+      (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n+          6.24 * sin(3 * S) +\n+          N;\n \n-//     # AddSol(-0.304000, 0.030000, 0.000000, 0.000300, 1.000000, -1.000000, 2.000000, 0.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[2][3];\n-//     DLAM  += -0.304 * z.imag;\n-//     DS    += 0.03 * z.imag;\n-//     SINPI += 0.0003 * z.real;\n+  // dlam = -26560.02894438416;\n+  // arc = 206264.80624709636;\n+  // latSeconds = -8727.275114246811;\n+// -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-//     # AddSol(-0.372000, -0.190000, 0.000000, -0.002700, 1.000000, -1.000000, -2.000000, 2.000000)\n-//     z = ex[1][1] * ex[-1][2] * ex[-2][3] * ex[2][4];\n-//     DLAM  += -0.372 * z.imag;\n-//     DS    += -0.19 * z.imag;\n-//     SINPI += -0.0027 * z.real;\n+  // print('$dlam $arc $latSeconds');\n+  return MoonPos(\n+      pi2 * frac((l0 + dlam / arc) / pi2),\n+      pi / (180 * 3600) * latSeconds,\n+      (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n+}\n \n-//     # AddSol(0.418000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 4.000000, 0.000000)\n-//     z = ex[4][3];\n-//     DLAM  += 0.418 * z.imag;\n \n-//     # AddSol(-0.330000, -0.040000, 0.000000, 0.000000, 3.000000, 0.000000, 2.000000, 0.000000)\n-//     z = ex[3][1] * ex[2][3];\n-//     DLAM  += -0.330 * z.imag;\n-//     DS    += -0.04 * z.imag;\n+// AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n+  // var z = ex[4][4];\n+  // DLAM += 13.902 * z.imaginary;\n+  // DS += 14.06 * z.imaginary;\n+  // GAM1C += -0.001 * z.real;\n+  // SINPI += 0.2607 * z.real;\n+\n+//     // AddSol(0.403000, -4.010000, 0.394000, 0.002300, 0.000000, 0.000000, 0.000000, 3.000000)\n+//   z = ex[3][4];\n+//   DLAM += 0.403 * z.imaginary;\n+//   DS += -4.01 * z.imaginary;\n+//   GAM1C += 0.394 * z.real;\n+//   SINPI += 0.0023 * z.real;\n+\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1642659446278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n import 'src/complex.dart';\n-import 'src/complex_new.dart';\n+import 'src/complex_var.dart';\n // import 'package:complex/complex.dart';\n \n class MoonPos {\n   double lon, lat, dist;\n@@ -156,8 +156,10 @@\n     //   J += 1;\n     // }\n     I++;\n   }\n+  Map _ex = ex;\n+  List vars();\n   Complex z;\n   z = ex[4][4];\n   dlam += 13.902 * z.imaginary;\n   ds += 14.06 * z.imaginary;\n"
                },
                {
                    "date": 1642659682519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,592 +157,14 @@\n     // }\n     I++;\n   }\n   Map _ex = ex;\n-  List vars();\n-  Complex z;\n-  z = ex[4][4];\n-  dlam += 13.902 * z.imaginary;\n-  ds += 14.06 * z.imaginary;\n-  gam1c += -0.001 * z.real;\n-  sinpi += 0.2607 * z.real;\n+  var _vars = vars(_ex, dlam, ds, gam1c, sinpi);\n+  dlam = _vars[0];\n+  ds = _vars[1];\n+  gam1c = _vars[2];\n+  sinpi = _vars[3];\n \n-  z = ex[3][4];\n-  dlam += 0.403 * z.imaginary;\n-  ds += -4.01 * z.imaginary;\n-  gam1c += 0.394 * z.real;\n-  sinpi += 0.0023 * z.real;\n-\n-  z = ex[2][4];\n-  dlam += 2369.912 * z.imaginary;\n-  ds += 2373.36 * z.imaginary;\n-  gam1c += 0.601 * z.real;\n-  sinpi += 28.2333 * z.real;\n-\n-  z = ex[1][4];\n-  dlam += -125.154 * z.imaginary;\n-  ds += -112.79 * z.imaginary;\n-  gam1c += -0.725 * z.real;\n-  sinpi += -0.9781 * z.real;\n-\n-  z = ex[1][1] * ex[4][4];\n-  dlam += 1.979 * z.imaginary;\n-  ds += 6.98 * z.imaginary;\n-  gam1c += -0.445 * z.real;\n-  sinpi += 0.0433 * z.real;\n-\n-  z = ex[1][1] * ex[2][4];\n-  dlam += 191.953 * z.imaginary;\n-  ds += 192.72 * z.imaginary;\n-  gam1c += 0.029 * z.real;\n-  sinpi += 3.0861 * z.real;\n-\n-  z = ex[1][1] * ex[1][4];\n-  dlam += -8.466 * z.imaginary;\n-  ds += -13.51 * z.imaginary;\n-  gam1c += 0.455 * z.real;\n-  sinpi += -0.1093 * z.real;\n-\n-  z = ex[1][1];\n-  dlam += 22639.500 * z.imaginary;\n-  ds += 22609.07 * z.imaginary;\n-  gam1c += 0.079 * z.real;\n-  sinpi += 186.5398 * z.real;\n-\n-  z = ex[1][1] * ex[-1][4];\n-  dlam += 18.609 * z.imaginary;\n-  ds += 3.59 * z.imaginary;\n-  gam1c += -0.094 * z.real;\n-  sinpi += 0.0118 * z.real;\n-\n-  z = ex[1][1] * ex[-2][4];\n-  dlam += -4586.465 * z.imaginary;\n-  ds += -4578.13 * z.imaginary;\n-  gam1c += -0.077 * z.real;\n-  sinpi += 34.3117 * z.real;\n-\n-  z = ex[1][1] * ex[-3][4];\n-  dlam += 3.215 * z.imaginary;\n-  ds += 5.44 * z.imaginary;\n-  gam1c += 0.192 * z.real;\n-  sinpi += -0.0386 * z.real;\n-\n-  z = ex[1][1] * ex[-4][4];\n-  dlam += -38.428 * z.imaginary;\n-  ds += -38.64 * z.imaginary;\n-  gam1c += 0.001 * z.real;\n-  sinpi += 0.6008 * z.real;\n-\n-  z = ex[1][1] * ex[-6][4];\n-  dlam += -0.393 * z.imaginary;\n-  ds += -1.43 * z.imaginary;\n-  gam1c += -0.092 * z.real;\n-  sinpi += 0.0086 * z.real;\n-\n-  z = ex[1][2] * ex[4][4];\n-  dlam += -0.289 * z.imaginary;\n-  ds += -1.59 * z.imaginary;\n-  gam1c += 0.123 * z.real;\n-  sinpi += -0.0053 * z.real;\n-\n-  z = ex[1][2] * ex[2][4];\n-  dlam += -24.420 * z.imaginary;\n-  ds += -25.10 * z.imaginary;\n-  gam1c += 0.040 * z.real;\n-  sinpi += -0.3000 * z.real;\n-\n-  z = ex[1][2] * ex[1][4];\n-  dlam += 18.023 * z.imaginary;\n-  ds += 17.93 * z.imaginary;\n-  gam1c += 0.007 * z.real;\n-  sinpi += 0.1494 * z.real;\n-\n-  z = ex[1][2];\n-  dlam += -668.146 * z.imaginary;\n-  ds += -126.98 * z.imaginary;\n-  gam1c += -1.302 * z.real;\n-  sinpi += -0.3997 * z.real;\n-\n-  z = ex[1][2] * ex[-1][4];\n-  dlam += 0.560 * z.imaginary;\n-  ds += 0.32 * z.imaginary;\n-  gam1c += -0.001 * z.real;\n-  sinpi += -0.0037 * z.real;\n-\n-  z = ex[1][2] * ex[-2][4];\n-  dlam += -165.145 * z.imaginary;\n-  ds += -165.06 * z.imaginary;\n-  gam1c += 0.054 * z.real;\n-  sinpi += 1.9178 * z.real;\n-\n-  z = ex[1][2] * ex[-4][4];\n-  dlam += -1.877 * z.imaginary;\n-  ds += -6.46 * z.imaginary;\n-  gam1c += -0.416 * z.real;\n-  sinpi += 0.0339 * z.real;\n-\n-  z = ex[2][1] * ex[4][4];\n-  dlam += 0.213 * z.imaginary;\n-  ds += 1.02 * z.imaginary;\n-  gam1c += -0.074 * z.real;\n-  sinpi += 0.0054 * z.real;\n-\n-  z = ex[2][1] * ex[2][4];\n-  dlam += 14.387 * z.imaginary;\n-  ds += 14.78 * z.imaginary;\n-  gam1c += -0.017 * z.real;\n-  sinpi += 0.2833 * z.real;\n-\n-  z = ex[2][1] * ex[1][4];\n-  dlam += -0.586 * z.imaginary;\n-  ds += -1.20 * z.imaginary;\n-  gam1c += 0.054 * z.real;\n-  sinpi += -0.0100 * z.real;\n-\n-  z = ex[2][1];\n-  dlam += 769.016 * z.imaginary;\n-  ds += 767.96 * z.imaginary;\n-  gam1c += 0.107 * z.real;\n-  sinpi += 10.1657 * z.real;\n-\n-  z = ex[2][1] * ex[-1][4];\n-  dlam += 1.750 * z.imaginary;\n-  ds += 2.01 * z.imaginary;\n-  gam1c += -0.018 * z.real;\n-  sinpi += 0.0155 * z.real;\n-\n-  z = ex[2][1] * ex[-2][4];\n-  dlam += -211.656 * z.imaginary;\n-  ds += -152.53 * z.imaginary;\n-  gam1c += 5.679 * z.real;\n-  sinpi += -0.3039 * z.real;\n-\n-  z = ex[2][1] * ex[-3][4];\n-  dlam += 1.225 * z.imaginary;\n-  ds += 0.91 * z.imaginary;\n-  gam1c += -0.030 * z.real;\n-  sinpi += -0.0088 * z.real;\n-\n-  z = ex[2][1] * ex[-4][4];\n-  dlam += -30.773 * z.imaginary;\n-  ds += -34.07 * z.imaginary;\n-  gam1c += -0.308 * z.real;\n-  sinpi += 0.3722 * z.real;\n-\n-  z = ex[2][1] * ex[-6][4];\n-  dlam += -0.570 * z.imaginary;\n-  ds += -1.40 * z.imaginary;\n-  gam1c += -0.074 * z.real;\n-  sinpi += 0.0109 * z.real;\n-\n-  z = ex[1][1] * ex[1][2] * ex[2][4];\n-  dlam += -2.921 * z.imaginary;\n-  ds += -11.75 * z.imaginary;\n-  gam1c += 0.787 * z.real;\n-  sinpi += -0.0484 * z.real;\n-\n-  z = ex[1][1] * ex[1][2] * ex[1][4];\n-  dlam += 1.267 * z.imaginary;\n-  ds += 1.52 * z.imaginary;\n-  gam1c += -0.022 * z.real;\n-  sinpi += 0.0164 * z.real;\n-\n-  z = ex[1][1] * ex[1][2];\n-  dlam += -109.673 * z.imaginary;\n-  ds += -115.18 * z.imaginary;\n-  gam1c += 0.461 * z.real;\n-  sinpi += -0.9490 * z.real;\n-\n-  z = ex[1][1] * ex[1][2] * ex[-2][4];\n-  dlam += -205.962 * z.imaginary;\n-  ds += -182.36 * z.imaginary;\n-  gam1c += 2.056 * z.real;\n-  sinpi += 1.4437 * z.real;\n-\n-  z = ex[1][1] * ex[1][2] * ex[-3][4];\n-  dlam += 0.233 * z.imaginary;\n-  ds += 0.36 * z.imaginary;\n-  gam1c += 0.012 * z.real;\n-  sinpi += -0.0025 * z.real;\n-\n-  z = ex[1][1] * ex[1][2] * ex[-4][4];\n-  dlam += -4.391 * z.imaginary;\n-  ds += -9.66 * z.imaginary;\n-  gam1c += -0.471 * z.real;\n-  sinpi += 0.0673 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2] * ex[4][4];\n-  dlam += 0.283 * z.imaginary;\n-  ds += 1.53 * z.imaginary;\n-  gam1c += -0.111 * z.real;\n-  sinpi += 0.0060 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2] * ex[2][4];\n-  dlam += 14.577 * z.imaginary;\n-  ds += 31.70 * z.imaginary;\n-  gam1c += -1.540 * z.real;\n-  sinpi += 0.2302 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2];\n-  dlam += 147.687 * z.imaginary;\n-  ds += 138.76 * z.imaginary;\n-  gam1c += 0.679 * z.real;\n-  sinpi += 1.1528 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2] * ex[-1][4];\n-  dlam += -1.089 * z.imaginary;\n-  ds += 0.55 * z.imaginary;\n-  gam1c += 0.021 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2] * ex[-2][4];\n-  dlam += 28.475 * z.imaginary;\n-  ds += 23.59 * z.imaginary;\n-  gam1c += -0.443 * z.real;\n-  sinpi += -0.2257 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2] * ex[-3][4];\n-  dlam += -0.276 * z.imaginary;\n-  ds += -0.38 * z.imaginary;\n-  gam1c += -0.006 * z.real;\n-  sinpi += -0.0036 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2] * ex[-4][4];\n-  dlam += 0.636 * z.imaginary;\n-  ds += 2.27 * z.imaginary;\n-  gam1c += 0.146 * z.real;\n-  sinpi += -0.0102 * z.real;\n-\n-  z = ex[2][2] * ex[2][4];\n-  dlam += -0.189 * z.imaginary;\n-  ds += -1.68 * z.imaginary;\n-  gam1c += 0.131 * z.real;\n-  sinpi += -0.0028 * z.real;\n-\n-  z = ex[2][2];\n-  dlam += -7.486 * z.imaginary;\n-  ds += -0.66 * z.imaginary;\n-  gam1c += -0.037 * z.real;\n-  sinpi += -0.0086 * z.real;\n-\n-  z = ex[2][2] * ex[-2][4];\n-  dlam += -8.096 * z.imaginary;\n-  ds += -16.35 * z.imaginary;\n-  gam1c += -0.740 * z.real;\n-  sinpi += 0.0918 * z.real;\n-\n-  z = ex[2][3] * ex[2][4];\n-  dlam += -5.741 * z.imaginary;\n-  ds += -0.04 * z.imaginary;\n-  sinpi += -0.0009 * z.real;\n-\n-  z = ex[2][3] * ex[1][4];\n-  dlam += 0.255 * z.imaginary;\n-\n-  z = ex[2][3];\n-  dlam += -411.608 * z.imaginary;\n-  ds += -0.20 * z.imaginary;\n-  sinpi += -0.0124 * z.real;\n-\n-  z = ex[2][3] * ex[-1][4];\n-  dlam += 0.584 * z.imaginary;\n-  ds += 0.84 * z.imaginary;\n-  sinpi += 0.0071 * z.real;\n-\n-  z = ex[2][3] * ex[-2][4];\n-  dlam += -55.173 * z.imaginary;\n-  ds += -52.14 * z.imaginary;\n-  sinpi += -0.1052 * z.real;\n-\n-  z = ex[2][3] * ex[-3][4];\n-  dlam += 0.254 * z.imaginary;\n-  ds += 0.25 * z.imaginary;\n-  sinpi += -0.0017 * z.real;\n-\n-  z = ex[2][3] * ex[-4][4];\n-  dlam += 0.025 * z.imaginary;\n-  ds += -1.67 * z.imaginary;\n-  sinpi += 0.0031 * z.real;\n-\n-  z = ex[3][1] * ex[2][4];\n-  dlam += 1.060 * z.imaginary;\n-  ds += 2.96 * z.imaginary;\n-  gam1c += -0.166 * z.real;\n-  sinpi += 0.0243 * z.real;\n-\n-  z = ex[3][1];\n-  dlam += 36.124 * z.imaginary;\n-  ds += 50.64 * z.imaginary;\n-  gam1c += -1.300 * z.real;\n-  sinpi += 0.6215 * z.real;\n-\n-  z = ex[3][1] * ex[-2][4];\n-  dlam += -13.193 * z.imaginary;\n-  ds += -16.40 * z.imaginary;\n-  gam1c += 0.258 * z.real;\n-  sinpi += -0.1187 * z.real;\n-\n-  z = ex[3][1] * ex[-4][4];\n-  dlam += -1.187 * z.imaginary;\n-  ds += -0.74 * z.imaginary;\n-  gam1c += 0.042 * z.real;\n-  sinpi += 0.0074 * z.real;\n-\n-  z = ex[3][1] * ex[-6][4];\n-  dlam += -0.293 * z.imaginary;\n-  ds += -0.31 * z.imaginary;\n-  gam1c += -0.002 * z.real;\n-  sinpi += 0.0046 * z.real;\n-\n-  z = ex[2][1] * ex[1][2] * ex[2][4];\n-  dlam += -0.290 * z.imaginary;\n-  ds += -1.45 * z.imaginary;\n-  gam1c += 0.116 * z.real;\n-  sinpi += -0.0051 * z.real;\n-\n-  z = ex[2][1] * ex[1][2];\n-  dlam += -7.649 * z.imaginary;\n-  ds += -10.56 * z.imaginary;\n-  gam1c += 0.259 * z.real;\n-  sinpi += -0.1038 * z.real;\n-\n-  z = ex[2][1] * ex[1][2] * ex[-2][4];\n-  dlam += -8.627 * z.imaginary;\n-  ds += -7.59 * z.imaginary;\n-  gam1c += 0.078 * z.real;\n-  sinpi += -0.0192 * z.real;\n-\n-  z = ex[2][1] * ex[1][2] * ex[-4][4];\n-  dlam += -2.740 * z.imaginary;\n-  ds += -2.54 * z.imaginary;\n-  gam1c += 0.022 * z.real;\n-  sinpi += 0.0324 * z.real;\n-\n-  z = ex[2][1] * ex[-1][2] * ex[2][4];\n-  dlam += 1.181 * z.imaginary;\n-  ds += 3.32 * z.imaginary;\n-  gam1c += -0.212 * z.real;\n-  sinpi += 0.0213 * z.real;\n-\n-  z = ex[2][1] * ex[-1][2];\n-  dlam += 9.703 * z.imaginary;\n-  ds += 11.67 * z.imaginary;\n-  gam1c += -0.151 * z.real;\n-  sinpi += 0.1268 * z.real;\n-\n-  z = ex[2][1] * ex[-1][2] * ex[-1][4];\n-  dlam += -0.352 * z.imaginary;\n-  ds += -0.37 * z.imaginary;\n-  gam1c += 0.001 * z.real;\n-  sinpi += -0.0028 * z.real;\n-\n-  z = ex[2][1] * ex[-1][2] * ex[-2][4];\n-  dlam += -2.494 * z.imaginary;\n-  ds += -1.17 * z.imaginary;\n-  gam1c += -0.003 * z.real;\n-  sinpi += -0.0017 * z.real;\n-\n-  z = ex[2][1] * ex[-1][2] * ex[-4][4];\n-  dlam += 0.360 * z.imaginary;\n-  ds += 0.20 * z.imaginary;\n-  gam1c += -0.012 * z.real;\n-  sinpi += -0.0043 * z.real;\n-\n-  z = ex[1][1] * ex[2][2];\n-  dlam += -1.167 * z.imaginary;\n-  ds += -1.25 * z.imaginary;\n-  gam1c += 0.008 * z.real;\n-  sinpi += -0.0106 * z.real;\n-\n-  z = ex[1][1] * ex[2][2] * ex[-2][4];\n-  dlam += -7.412 * z.imaginary;\n-  ds += -6.12 * z.imaginary;\n-  gam1c += 0.117 * z.real;\n-  sinpi += 0.0484 * z.real;\n-\n-  z = ex[1][1] * ex[2][2] * ex[-4][4];\n-  dlam += -0.311 * z.imaginary;\n-  ds += -0.65 * z.imaginary;\n-  gam1c += -0.032 * z.real;\n-  sinpi += 0.0044 * z.real;\n-\n-  z = ex[1][1] * ex[-2][2] * ex[2][4];\n-  dlam += 0.757 * z.imaginary;\n-  ds += 1.82 * z.imaginary;\n-  gam1c += -0.105 * z.real;\n-  sinpi += 0.0112 * z.real;\n-\n-  z = ex[1][1] * ex[-2][2];\n-  dlam += 2.580 * z.imaginary;\n-  ds += 2.32 * z.imaginary;\n-  gam1c += 0.027 * z.real;\n-  sinpi += 0.0196 * z.real;\n-\n-  z = ex[1][1] * ex[-2][2] * ex[-2][4];\n-  dlam += 2.533 * z.imaginary;\n-  ds += 2.40 * z.imaginary;\n-  gam1c += -0.014 * z.real;\n-  sinpi += -0.0212 * z.real;\n-\n-  z = ex[3][2] * ex[-2][4];\n-  dlam += -0.344 * z.imaginary;\n-  ds += -0.57 * z.imaginary;\n-  gam1c += -0.025 * z.real;\n-  sinpi += 0.0036 * z.real;\n-\n-  z = ex[1][1] * ex[2][3] * ex[2][4];\n-  dlam += -0.992 * z.imaginary;\n-  ds += -0.02 * z.imaginary;\n-\n-  z = ex[1][1] * ex[2][3];\n-  dlam += -45.099 * z.imaginary;\n-  ds += -0.02 * z.imaginary;\n-  sinpi += -0.0010 * z.real;\n-\n-  z = ex[1][1] * ex[2][3] * ex[-2][4];\n-  dlam += -0.179 * z.imaginary;\n-  ds += -9.52 * z.imaginary;\n-  sinpi += -0.0833 * z.real;\n-\n-  z = ex[1][1] * ex[2][3] * ex[-4][4];\n-  dlam += -0.301 * z.imaginary;\n-  ds += -0.33 * z.imaginary;\n-  sinpi += 0.0014 * z.real;\n-\n-  z = ex[1][1] * ex[-2][3] * ex[2][4];\n-  dlam += -6.382 * z.imaginary;\n-  ds += -3.37 * z.imaginary;\n-  sinpi += -0.0481 * z.real;\n-\n-  z = ex[1][1] * ex[-2][3];\n-  dlam += 39.528 * z.imaginary;\n-  ds += 85.13 * z.imaginary;\n-  sinpi += -0.7136 * z.real;\n-\n-  z = ex[1][1] * ex[-2][3] * ex[-2][4];\n-  dlam += 9.366 * z.imaginary;\n-  ds += 0.71 * z.imaginary;\n-  sinpi += -0.0112 * z.real;\n-\n-  z = ex[1][1] * ex[-2][3] * ex[-4][4];\n-  dlam += 0.202 * z.imaginary;\n-  ds += 0.02 * z.imaginary;\n-\n-  z = ex[1][2] * ex[2][3];\n-  dlam += 0.415 * z.imaginary;\n-  ds += 0.10 * z.imaginary;\n-  sinpi += 0.0013 * z.real;\n-\n-  z = ex[1][2] * ex[2][3] * ex[-2][4];\n-  dlam += -2.152 * z.imaginary;\n-  ds += -2.26 * z.imaginary;\n-  sinpi += -0.0066 * z.real;\n-\n-  z = ex[1][2] * ex[-2][3] * ex[2][4];\n-  dlam += -1.440 * z.imaginary;\n-  ds += -1.30 * z.imaginary;\n-  sinpi += 0.0014 * z.real;\n-\n-  z = ex[1][2] * ex[-2][3] * ex[-2][4];\n-  dlam += 0.384 * z.imaginary;\n-  ds += -0.04 * z.imaginary;\n-\n-  z = ex[4][1];\n-  dlam += 1.938 * z.imaginary;\n-  ds += 3.60 * z.imaginary;\n-  gam1c += -0.145 * z.real;\n-  sinpi += 0.0401 * z.real;\n-\n-  z = ex[4][1] * ex[-2][4];\n-  dlam += -0.952 * z.imaginary;\n-  ds += -1.58 * z.imaginary;\n-  gam1c += 0.052 * z.real;\n-  sinpi += -0.0130 * z.real;\n-\n-  z = ex[3][1] * ex[1][2];\n-  dlam += -0.551 * z.imaginary;\n-  ds += -0.94 * z.imaginary;\n-  gam1c += 0.032 * z.real;\n-  sinpi += -0.0097 * z.real;\n-\n-  z = ex[3][1] * ex[1][2] * ex[-2][4];\n-  dlam += -0.482 * z.imaginary;\n-  ds += -0.57 * z.imaginary;\n-  gam1c += 0.005 * z.real;\n-  sinpi += -0.0045 * z.real;\n-\n-  z = ex[3][1] * ex[-1][2];\n-  dlam += 0.681 * z.imaginary;\n-  ds += 0.96 * z.imaginary;\n-  gam1c += -0.026 * z.real;\n-  sinpi += 0.0115 * z.real;\n-\n-  z = ex[2][1] * ex[2][2] * ex[-2][4];\n-  dlam += -0.297 * z.imaginary;\n-  ds += -0.27 * z.imaginary;\n-  gam1c += 0.002 * z.real;\n-  sinpi += -0.0009 * z.real;\n-\n-  z = ex[2][1] * ex[-2][2] * ex[-2][4];\n-  dlam += 0.254 * z.imaginary;\n-  ds += 0.21 * z.imaginary;\n-  gam1c += -0.003 * z.real;\n-\n-  z = ex[1][1] * ex[3][2] * ex[-2][4];\n-  dlam += -0.250 * z.imaginary;\n-  ds += -0.22 * z.imaginary;\n-  gam1c += 0.004 * z.real;\n-  sinpi += 0.0014 * z.real;\n-\n-  z = ex[2][1] * ex[2][3];\n-  dlam += -3.996 * z.imaginary;\n-  sinpi += 0.0004 * z.real;\n-\n-  z = ex[2][1] * ex[2][3] * ex[-2][4];\n-  dlam += 0.557 * z.imaginary;\n-  ds += -0.75 * z.imaginary;\n-  sinpi += -0.0090 * z.real;\n-\n-  z = ex[2][1] * ex[-2][3] * ex[2][4];\n-  dlam += -0.459 * z.imaginary;\n-  ds += -0.38 * z.imaginary;\n-  sinpi += -0.0053 * z.real;\n-\n-  z = ex[2][1] * ex[-2][3];\n-  dlam += -1.298 * z.imaginary;\n-  ds += 0.74 * z.imaginary;\n-  sinpi += 0.0004 * z.real;\n-\n-  z = ex[2][1] * ex[-2][3] * ex[-2][4];\n-  dlam += 0.538 * z.imaginary;\n-  ds += 1.14 * z.imaginary;\n-  sinpi += -0.0141 * z.real;\n-\n-  z = ex[1][1] * ex[1][2] * ex[2][3];\n-  dlam += 0.263 * z.imaginary;\n-  ds += 0.02 * z.imaginary;\n-\n-  z = ex[1][1] * ex[1][2] * ex[-2][3] * ex[-2][4];\n-  dlam += 0.426 * z.imaginary;\n-  ds += 0.07 * z.imaginary;\n-  sinpi += -0.0006 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2] * ex[2][3];\n-  dlam += -0.304 * z.imaginary;\n-  ds += 0.03 * z.imaginary;\n-  sinpi += 0.0003 * z.real;\n-\n-  z = ex[1][1] * ex[-1][2] * ex[-2][3] * ex[2][4];\n-  dlam += -0.372 * z.imaginary;\n-  ds += -0.19 * z.imaginary;\n-  sinpi += -0.0027 * z.real;\n-\n-  z = ex[4][3];\n-  dlam += 0.418 * z.imaginary;\n-\n-  z = ex[3][1] * ex[2][3];\n-  dlam += -0.330 * z.imaginary;\n-  ds += -0.04 * z.imaginary;\n-\n   // print(z);\n   // print(dlam);\n \n   dynamic addn(coeffn, p, q, r, s) {\n"
                },
                {
                    "date": 1642660451472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,10 +156,10 @@\n     //   J += 1;\n     // }\n     I++;\n   }\n-  Map _ex = ex;\n-  var _vars = vars(_ex, dlam, ds, gam1c, sinpi);\n+\n+  var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n@@ -167,16 +167,16 @@\n   // print(z);\n   // print(dlam);\n \n   dynamic addn(coeffn, p, q, r, s) {\n-    print(ex[q][2]);\n-    return (coeffn *\n-        (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]))[0]; //.imaginery\n+    // print(ex[q][2]);\n+    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n-  double N = -477.8936;\n-  // double N = 0;\n-  // N += addn(-526.069, 0, 0, 1, -2);\n+  // double N = -477.8936;\n+  double N = 0;\n+  N += addn(-526.069, 0, 0, 1, -2);\n+  print(N);\n   // N += addn(-3.352, 0, 0, 1, -4);\n   // N += addn(44.297, 1, 0, 1, -2);\n   // N += addn(-6.000, 1, 0, 1, -4);\n   // N += addn(20.599, -1, 0, 1, 0);\n"
                },
                {
                    "date": 1642660831496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,16 +167,16 @@\n   // print(z);\n   // print(dlam);\n \n   dynamic addn(coeffn, p, q, r, s) {\n-    // print(ex[q][2]);\n+    print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n     return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n   // double N = -477.8936;\n   double N = 0;\n   N += addn(-526.069, 0, 0, 1, -2);\n-  print(N);\n+  // print(N);\n   // N += addn(-3.352, 0, 0, 1, -4);\n   // N += addn(44.297, 1, 0, 1, -2);\n   // N += addn(-6.000, 1, 0, 1, -4);\n   // N += addn(20.599, -1, 0, 1, 0);\n"
                },
                {
                    "date": 1642660945082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,17 +165,17 @@\n   sinpi = _vars[3];\n \n   // print(z);\n   // print(dlam);\n-\n+  print(ex);\n   dynamic addn(coeffn, p, q, r, s) {\n     print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n     return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n   // double N = -477.8936;\n   double N = 0;\n-  N += addn(-526.069, 0, 0, 1, -2);\n+  // N += addn(-526.069, 0, 0, 1, -2);\n   // print(N);\n   // N += addn(-3.352, 0, 0, 1, -4);\n   // N += addn(44.297, 1, 0, 1, -2);\n   // N += addn(-6.000, 1, 0, 1, -4);\n"
                },
                {
                    "date": 1642661148989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,14 +148,13 @@\n       J += 1;\n     }\n \n     J = 1;\n-    // while (J <= max) {\n-    //   // print(ex[-J][I]);\n-    //   ex[J][I] = ComplexN(ex[J][I]);\n-    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-    //   J += 1;\n-    // }\n+    while (J <= max) {\n+      ex[-J][I] = ex[J][I];\n+      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+      J += 1;\n+    }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642661246220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,14 +147,14 @@\n       // tmp = ex[J][I];\n       J += 1;\n     }\n \n-    J = 1;\n-    while (J <= max) {\n-      ex[-J][I] = ex[J][I];\n-      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   ex[-J][I] = ex[J][I];\n+    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642661426385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // Complex tmp;\n \n     J = 2;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       // tmp = ex[J][I];\n       J += 1;\n     }\n@@ -164,9 +164,9 @@\n   sinpi = _vars[3];\n \n   // print(z);\n   // print(dlam);\n-  print(ex);\n+  // print(ex);\n   dynamic addn(coeffn, p, q, r, s) {\n     print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n     return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n"
                },
                {
                    "date": 1642661479856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,13 +132,14 @@\n       max = 6;\n       fac = 1.0;\n     }\n \n-    // print(ex[0][I]); // правильно 0j\n+    print(ex[0][I]); // правильно 0j\n     ex[0][I] = Complex(1, 0);\n-    // print(Complex(1, 0));\n+    print(Complex(1, 0));\n+    print(ex[1][I]);\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n-    // print(ex[0][I]);\n+    print(ex[1][I]);\n     // Complex tmp;\n \n     J = 2;\n     while (J <= max) {\n"
                },
                {
                    "date": 1642661538305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,15 +132,14 @@\n       max = 6;\n       fac = 1.0;\n     }\n \n-    print(ex[0][I]); // правильно 0j\n+    // print(ex[0][I]); // правильно 0j\n     ex[0][I] = Complex(1, 0);\n-    print(Complex(1, 0));\n-    print(ex[1][I]);\n+    // print(Complex(1, 0)); // правильно\n+    // print(ex[1][I]); // правильно\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n-    print(ex[1][I]);\n-    // Complex tmp;\n+    // print(ex[1][I]); // правильно\n \n     J = 2;\n     while (J <= max) {\n       // print(ex[J][I]);\n"
                },
                {
                    "date": 1642661576874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,11 +141,11 @@\n     // print(ex[1][I]); // правильно\n \n     J = 2;\n     while (J <= max) {\n-      // print(ex[J][I]);\n+      print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      // tmp = ex[J][I];\n+      print(ex[J][I]);\n       J += 1;\n     }\n \n     // J = 1;\n"
                },
                {
                    "date": 1642661668763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n   // print(z);\n   // print(dlam);\n   // print(ex);\n   dynamic addn(coeffn, p, q, r, s) {\n-    print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n+    // print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n     return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n   // double N = -477.8936;\n"
                },
                {
                    "date": 1642661991466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,9 @@\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n+    print(ex[2][0]);\n \n     J = 2;\n     while (J <= max) {\n       print(ex[J][I]);\n"
                },
                {
                    "date": 1642662154590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   Map ex = _array2(-6, 6, 1, 4); // правильно\n+  print(ex);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n"
                },
                {
                    "date": 1642662427348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   Map ex = _array2(-6, 6, 1, 4); // правильно\n-  print(ex);\n+  // print(ex);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n@@ -139,15 +139,15 @@\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n-    print(ex[2][0]);\n+    // print(ex[2][0]);\n \n     J = 2;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       J += 1;\n     }\n \n     // J = 1;\n"
                },
                {
                    "date": 1642662449993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,10 +172,10 @@\n     // print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n     return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n-  // double N = -477.8936;\n-  double N = 0;\n+  double N = -477.8936;\n+  // double N = 0;\n   // N += addn(-526.069, 0, 0, 1, -2);\n   // print(N);\n   // N += addn(-3.352, 0, 0, 1, -4);\n   // N += addn(44.297, 1, 0, 1, -2);\n"
                },
                {
                    "date": 1642662525901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  // print('$dlam $arc $latSeconds');\n+  print('$dlam $arc $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642662908654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-\n+  dlam -= 8440;\n   // dlam = -26560.02894438416;\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n"
                },
                {
                    "date": 1642663073879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  print('$dlam $arc $latSeconds');\n+  print('dlam $dlam $arc $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642664912089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-  dlam -= 8440;\n+  // dlam -= 8440;\n   // dlam = -26560.02894438416;\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n"
                },
                {
                    "date": 1642664940914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  print('dlam $dlam $arc $latSeconds');\n+  print('dlam $dlam');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642665233728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,13 +167,14 @@\n \n   // print(z);\n   // print(dlam);\n   // print(ex);\n-  dynamic addn(coeffn, p, q, r, s) {\n-    // print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n-    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n+  void addn(coeffn, p, q, r, s) {\n+    print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n+    // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n+  addn(-526.069, 0, 0, 1, -2);\n   double N = -477.8936;\n   // double N = 0;\n   // N += addn(-526.069, 0, 0, 1, -2);\n   // print(N);\n"
                },
                {
                    "date": 1642665339355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n   // print(z);\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n-    print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n+    print((ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imaginery);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n   addn(-526.069, 0, 0, 1, -2);\n"
                },
                {
                    "date": 1642665522418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,10 @@\n   // print(z);\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n-    print((ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imaginery);\n+    var r = Complex(ex[p][1]);\n+    print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n   addn(-526.069, 0, 0, 1, -2);\n@@ -210,9 +211,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  print('dlam $dlam');\n+  // print('dlam $dlam');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642665566038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n   // print(z);\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n-    var r = Complex(ex[p][1]);\n+    Complex r = Complex(ex[p][1]);\n     print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n"
                },
                {
                    "date": 1642665605264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n   // print(z);\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n-    Complex r = Complex(ex[p][1]);\n+    Complex r = Complex.add(ex[p][1], ex[p][1]);\n     print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n"
                },
                {
                    "date": 1642665627898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,8 +169,9 @@\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n     Complex r = Complex.add(ex[p][1], ex[p][1]);\n+    print(r);\n     print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n"
                },
                {
                    "date": 1642665777746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n   // print(z);\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n-    Complex r = Complex.add(ex[p][1], ex[p][1]);\n+    Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n     print(r);\n     print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n"
                },
                {
                    "date": 1642665790296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n     Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n-    print(r);\n+    print(r.imaginary);\n     print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n"
                },
                {
                    "date": 1642665874846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n     Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n-    print(r.imaginary);\n+    print(r);\n     print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n"
                },
                {
                    "date": 1642666032052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n     Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n     print(r);\n-    print(ex[p][1]);\n+    print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n   addn(-526.069, 0, 0, 1, -2);\n"
                },
                {
                    "date": 1642666239956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,14 +169,14 @@\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n     Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n-    print(r);\n-    print(ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]);\n+    // print(r.imaginary);\n+    // print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n \n-  addn(-526.069, 0, 0, 1, -2);\n+  // addn(-526.069, 0, 0, 1, -2);\n   double N = -477.8936;\n   // double N = 0;\n   // N += addn(-526.069, 0, 0, 1, -2);\n   // print(N);\n"
                },
                {
                    "date": 1642666255981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,11 +143,11 @@\n     // print(ex[2][0]);\n \n     J = 2;\n     while (J <= max) {\n-      // print(ex[J][I]);\n+      print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      // print(ex[J][I]);\n+      print(ex[J][I]);\n       J += 1;\n     }\n \n     // J = 1;\n"
                },
                {
                    "date": 1642666309656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n     J = 2;\n     while (J <= max) {\n       print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       J += 1;\n     }\n \n     // J = 1;\n"
                },
                {
                    "date": 1642666899077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,20 +143,23 @@\n     // print(ex[2][0]);\n \n     J = 2;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       // print(ex[J][I]);\n       J += 1;\n     }\n \n-    // J = 1;\n-    // while (J <= max) {\n-    //   ex[-J][I] = ex[J][I];\n-    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-    //   J += 1;\n-    // }\n+    J = 1;\n+    while (J <= max) {\n+      print(ex[J][I]);\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      ex[J][I] = r;\n+      // ex[-J][I] = ex[J][I];\n+      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+      J += 1;\n+    }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642667157552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,21 +145,23 @@\n     J = 2;\n     while (J <= max) {\n       // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      // print(ex[J][I]);\n-      J += 1;\n-    }\n-\n-    J = 1;\n-    while (J <= max) {\n-      print(ex[J][I]);\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[J][I] = r;\n-      // ex[-J][I] = ex[J][I];\n-      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+      print(ex[J][I]);\n       J += 1;\n     }\n+\n+    // J = 1;\n+    // while (J <= max) {\n+    //   print(ex[J][I]);\n+\n+    //   ex[J][I] = r;\n+    //   // ex[-J][I] = ex[J][I];\n+    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642667211874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,13 +143,13 @@\n     // print(ex[2][0]);\n \n     J = 2;\n     while (J <= max) {\n-      // print(ex[J][I]);\n+      print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[J][I] = r;\n-      print(ex[J][I]);\n+\n       J += 1;\n     }\n \n     // J = 1;\n"
                },
                {
                    "date": 1642668323896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  // print('dlam $dlam');\n+  print('dlam $dlam');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642668641975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,25 +143,25 @@\n     // print(ex[2][0]);\n \n     J = 2;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[J][I] = r;\n+      // Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      // ex[J][I] = r;\n+      J += 1;\n+    }\n \n+    J = 1;\n+    while (J <= max) {\n+      print(ex[-J][I]);\n+      Complex r = Complex.conjugate(ex[-J][I], ex[-J][I]);\n+      // ex[J][I] = r;\n+      // print(ex[J][I]);\n+      ex[-J][I] = r;\n+      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n-\n-    // J = 1;\n-    // while (J <= max) {\n-    //   print(ex[J][I]);\n-\n-    //   ex[J][I] = r;\n-    //   // ex[-J][I] = ex[J][I];\n-    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-    //   J += 1;\n-    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642668766071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,13 +152,13 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      print(ex[-J][I]);\n-      Complex r = Complex.conjugate(ex[-J][I], ex[-J][I]);\n+      print(ex[J][I]);\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       // ex[J][I] = r;\n       // print(ex[J][I]);\n-      ex[-J][I] = r;\n+      ex[J][I] = r;\n       // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642668851278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,13 +152,13 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      print(ex[-J][I]);\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       // ex[J][I] = r;\n       // print(ex[J][I]);\n-      ex[J][I] = r;\n+      ex[-J][I] = r;\n       // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642668867952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n \n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      Complex r = Complex.conjugate(ex[-J][I], ex[-J][I]);\n       // ex[J][I] = r;\n       // print(ex[J][I]);\n       ex[-J][I] = r;\n       // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n"
                },
                {
                    "date": 1642668909631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n \n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      Complex r = Complex.conjugate(ex[-J][I], ex[-J][I]);\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       // ex[J][I] = r;\n       // print(ex[J][I]);\n       ex[-J][I] = r;\n       // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n"
                },
                {
                    "date": 1642668954926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n       print(ex[-J][I]);\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       // ex[J][I] = r;\n       // print(ex[J][I]);\n-      ex[-J][I] = r;\n+      ex[-J][I] = ex[J][I];\n       // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642668999170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,12 +153,12 @@\n \n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      Complex r = Complex.conjugate(ex[-J][I], ex[-J][I]);\n       // ex[J][I] = r;\n       // print(ex[J][I]);\n-      ex[-J][I] = ex[J][I];\n+      ex[-J][I] = r;\n       // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642669051292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,27 +141,25 @@\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n     // print(ex[2][0]);\n \n-    J = 2;\n+    J = 1;\n     while (J <= max) {\n-      // print(ex[J][I]);\n+      print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      // Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      // ex[J][I] = r;\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      ex[J][I] = r;\n       J += 1;\n     }\n \n-    J = 1;\n-    while (J <= max) {\n-      print(ex[-J][I]);\n-      Complex r = Complex.conjugate(ex[-J][I], ex[-J][I]);\n-      // ex[J][I] = r;\n-      // print(ex[J][I]);\n-      ex[-J][I] = r;\n-      // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   print(ex[J][I]);\n+    //   ex[J][I] = r;\n+    //   // ex[-J][I] = ex[J][I];\n+    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642669096876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n     // print(ex[2][0]);\n \n-    J = 1;\n+    J = 2;\n     while (J <= max) {\n       print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n"
                },
                {
                    "date": 1642669188929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,23 +143,23 @@\n     // print(ex[2][0]);\n \n     J = 2;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[J][I] = r;\n+      // Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      // ex[J][I] = r;\n       J += 1;\n     }\n \n-    // J = 1;\n-    // while (J <= max) {\n-    //   print(ex[J][I]);\n-    //   ex[J][I] = r;\n-    //   // ex[-J][I] = ex[J][I];\n-    //   // ex[-J][I] = ex[J][I]; //.conjugate(); !!!\n-    //   J += 1;\n-    // }\n+    J = 1;\n+    while (J <= max) {\n+      print(ex[-J][I]);\n+      // Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      // ex[J][I] = r;\n+      ex[-J][I] = ex[J][I];\n+      J += 1;\n+    }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642669242591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,11 +153,11 @@\n \n     J = 1;\n     while (J <= max) {\n       print(ex[-J][I]);\n-      // Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      // ex[J][I] = r;\n-      ex[-J][I] = ex[J][I];\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      ex[J][I] = r;\n+      // ex[-J][I] = ex[J][I];\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642669515595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,8 @@\n     distCosLat * sin(m0.lon),\n     m0.dist * sin(m0.lat)\n   ];\n \n-  // double distCosLat = m.distanceAU * cos(m.geoEclipLat);\n-  // dynamic gepos = [\n-  //   distCosLat * cos(m.geoEclipLon),\n-  //   distCosLat * sin(m.geoEclipLon),\n-  //   m.distanceAu * sin(m.geoEclipLat)\n-  // ];\n-\n   // Преобразование эклиптических координат в экваториальные'.\n   var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n"
                },
                {
                    "date": 1642669586966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   // Преобразование эклиптических координат в экваториальные'.\n   var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n-  var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n+  var mpos2 = precession(mpos1, time, PrecessDir.from2000);\n \n   return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n   // , degrees(m.geo_eclip_lon)\n }\n"
                },
                {
                    "date": 1642669608720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   // Преобразование эклиптических координат в экваториальные'.\n   var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n-  var mpos2 = precession(mpos1, time, PrecessDir.from2000);\n+  var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n \n   return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n   // , degrees(m.geo_eclip_lon)\n }\n"
                },
                {
                    "date": 1642669724207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n       J += 1;\n     }\n     I++;\n   }\n-\n+  print(dlam);\n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n"
                },
                {
                    "date": 1642669740005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print(dlam);\n+\n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n"
                },
                {
                    "date": 1642669791273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,10 +132,11 @@\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n-    // print(ex[2][0]);\n \n+    print(ex);\n+\n     J = 2;\n     while (J <= max) {\n       // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n@@ -145,9 +146,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      print(ex[-J][I]);\n+      // print(ex[-J][I]);\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[J][I] = r;\n       // ex[-J][I] = ex[J][I];\n       J += 1;\n"
                },
                {
                    "date": 1642669937053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n   // print('$s1 $s2 $s6 $s7'); // правильно\n   // print(frac(0.82736186)); // ~правильно\n   // print(0.82736186 + 1236.85308708 * T - 0.00000397 * t2); // чуток неправильно\n   // print('$l0 $L $ls $F $D');\n-\n+  print(ex);\n   double I = 1;\n   int max, J;\n   double arg, fac;\n   while (I <= 4) {\n"
                },
                {
                    "date": 1642670026252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n   // print('$s1 $s2 $s6 $s7'); // правильно\n   // print(frac(0.82736186)); // ~правильно\n   // print(0.82736186 + 1236.85308708 * T - 0.00000397 * t2); // чуток неправильно\n   // print('$l0 $L $ls $F $D');\n-  print(ex);\n+  // print(ex);\n   double I = 1;\n   int max, J;\n   double arg, fac;\n   while (I <= 4) {\n@@ -133,9 +133,9 @@\n     // print(ex[1][I]); // правильно\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n \n-    print(ex);\n+    print(ex[0][I]);\n \n     J = 2;\n     while (J <= max) {\n       // print(ex[J][I]);\n"
                },
                {
                    "date": 1642670625204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n       max = 6;\n       fac = 1.0;\n     }\n \n-    // print(ex[0][I]); // правильно 0j\n+    print(ex[0][I]); // правильно 0j\n     ex[0][I] = Complex(1, 0);\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n"
                },
                {
                    "date": 1642670662956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,17 +126,16 @@\n       max = 6;\n       fac = 1.0;\n     }\n \n-    print(ex[0][I]); // правильно 0j\n+    // print(ex[0][I]); // правильно 0j\n     ex[0][I] = Complex(1, 0);\n+    print(ex[0][I]);\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n \n-    print(ex[0][I]);\n-\n     J = 2;\n     while (J <= max) {\n       // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642673116448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n     ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n-\n+    print(ex[0][I]);\n     J = 2;\n     while (J <= max) {\n       // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642675556269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,10 @@\n       arg = D;\n       max = 6;\n       fac = 1.0;\n     }\n-\n+    //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n+    // ex[a][b][c]\n     // print(ex[0][I]); // правильно 0j\n     ex[0][I] = Complex(1, 0);\n     print(ex[0][I]);\n     // print(Complex(1, 0)); // правильно\n"
                },
                {
                    "date": 1642675614430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     ex[0][I] = Complex(1, 0);\n     print(ex[0][I]);\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n-    ex[1][I] = Complex(fac * cos(arg), fac * sin(arg));\n+    ex[0][1][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n     print(ex[0][I]);\n     J = 2;\n     while (J <= max) {\n"
                },
                {
                    "date": 1642675650243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     ex[0][I] = Complex(1, 0);\n     print(ex[0][I]);\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n-    ex[0][1][I] = Complex(fac * cos(arg), fac * sin(arg));\n+    ex[0][I][I] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n     print(ex[0][I]);\n     J = 2;\n     while (J <= max) {\n"
                },
                {
                    "date": 1642675663466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     ex[0][I] = Complex(1, 0);\n     print(ex[0][I]);\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n-    ex[0][I][I] = Complex(fac * cos(arg), fac * sin(arg));\n+    ex[0][I][0] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n     print(ex[0][I]);\n     J = 2;\n     while (J <= max) {\n"
                },
                {
                    "date": 1642675709843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,10 +128,10 @@\n     }\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]\n     // print(ex[0][I]); // правильно 0j\n-    ex[0][I] = Complex(1, 0);\n-    print(ex[0][I]);\n+    ex[0][I] = Complex(2, 3);\n+    print(ex);\n     // print(Complex(1, 0)); // правильно\n     // print(ex[1][I]); // правильно\n     ex[0][I][0] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[1][I]); // правильно\n"
                },
                {
                    "date": 1642676177409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,17 +98,15 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   double D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  // print('$dl0 $dl $dls $df $dd $dgam'); // правильно\n-  // print('$s1 $s2 $s6 $s7'); // правильно\n-  // print(frac(0.82736186)); // ~правильно\n-  // print(0.82736186 + 1236.85308708 * T - 0.00000397 * t2); // чуток неправильно\n-  // print('$l0 $L $ls $F $D');\n-  // print(ex);\n   double I = 1;\n   int max, J;\n   double arg, fac;\n+\n+  ex[0][I] = Complex(2, 3);\n+  print(ex);\n+\n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n       max = 4;\n@@ -126,32 +124,24 @@\n       max = 6;\n       fac = 1.0;\n     }\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n-    // ex[a][b][c]\n-    // print(ex[0][I]); // правильно 0j\n-    ex[0][I] = Complex(2, 3);\n-    print(ex);\n-    // print(Complex(1, 0)); // правильно\n-    // print(ex[1][I]); // правильно\n-    ex[0][I][0] = Complex(fac * cos(arg), fac * sin(arg));\n-    // print(ex[1][I]); // правильно\n-    print(ex[0][I]);\n+    // ex[a][b][c]   ex[a][I]) = 0j\n+\n+    // ex[0][I] = Complex(2, 3);\n+    // print(ex);\n+    // ex[I][0] = Complex(fac * cos(arg), fac * sin(arg));\n+    // print(ex[0][I]);\n     J = 2;\n     while (J <= max) {\n-      // print(ex[J][I]);\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      // Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      // ex[J][I] = r;\n       J += 1;\n     }\n \n     J = 1;\n     while (J <= max) {\n-      // print(ex[-J][I]);\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[J][I] = r;\n-      // ex[-J][I] = ex[J][I];\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642676275381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,11 @@\n     }\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n \n-    // ex[0][I] = Complex(2, 3);\n+    ex[0][I] = Complex(2, 3);\n     // print(ex);\n-    // ex[I][0] = Complex(fac * cos(arg), fac * sin(arg));\n+    ex[I][0] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642676310104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n     }\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n \n-    ex[0][I] = Complex(2, 3);\n+    ex[0][I] = Complex(1, 0);\n     // print(ex);\n     ex[I][0] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n     J = 2;\n"
                },
                {
                    "date": 1642676359243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   double I = 1;\n   int max, J;\n   double arg, fac;\n \n-  ex[0][I] = Complex(2, 3);\n+  ex[-6][I] = Complex(2, 3);\n   print(ex);\n \n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642676469583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   double I = 1;\n   int max, J;\n   double arg, fac;\n \n-  ex[-6][I] = Complex(2, 3);\n+  ex[4][1] = Complex(2, 3);\n   print(ex);\n \n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642676493547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   double I = 1;\n   int max, J;\n   double arg, fac;\n \n-  ex[4][1] = Complex(2, 3);\n+  ex[0][2] = Complex(2, 3);\n   print(ex);\n \n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642676547486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   double I = 1;\n   int max, J;\n   double arg, fac;\n \n-  ex[0][2] = Complex(2, 3);\n+  ex[0][2][0] = Complex(2, 3);\n   print(ex);\n \n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642676594975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   double I = 1;\n   int max, J;\n   double arg, fac;\n \n-  ex[0][2][0] = Complex(2, 3);\n+  ex[0][2] = Complex(2, 3);\n   print(ex);\n \n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642677621450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     // ex[a][b][c]   ex[a][I]) = 0j\n \n     ex[0][I] = Complex(1, 0);\n     // print(ex);\n-    ex[I][0] = Complex(fac * cos(arg), fac * sin(arg));\n+    ex[I][1] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642682287115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n   // print(z);\n   // print(dlam);\n   // print(ex);\n   void addn(coeffn, p, q, r, s) {\n-    Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n+    // Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n     // print(r.imaginary);\n     // print(ex[p][1]);\n     // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   }\n"
                },
                {
                    "date": 1642682411723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,12 @@\n       fac = 1.0;\n     }\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n+    // ex.update(-6, (value) => Complex(0, 2));\n \n     ex[0][I] = Complex(1, 0);\n+    ex.update(0, (value) => Complex(1, 0));\n     // print(ex);\n     ex[I][1] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n     J = 2;\n"
                },
                {
                    "date": 1642683933469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   Map ex = _array2(-6, 6, 1, 4); // правильно\n-  // print(ex);\n+  Map ex1 = _array2(-6, 6, 1, 4);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n"
                },
                {
                    "date": 1642684157323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,11 @@\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n     ex[0][I] = Complex(1, 0);\n-    ex.update(0, (value) => Complex(1, 0));\n+    ex1.update(I, (value) => Complex(1, 0));\n+    ex1.update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n+\n     // print(ex);\n     ex[I][1] = Complex(fac * cos(arg), fac * sin(arg));\n     // print(ex[0][I]);\n     J = 2;\n"
                },
                {
                    "date": 1642684230163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,14 +127,12 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    ex[0][I] = Complex(1, 0);\n     ex1.update(I, (value) => Complex(1, 0));\n     ex1.update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n-\n-    // print(ex);\n-    ex[I][1] = Complex(fac * cos(arg), fac * sin(arg));\n+    ex[0][I] = ex1[0][I];\n+    ex[I][1] = ex1[0][I];\n     // print(ex[0][I]);\n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642684296016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,10 @@\n     ex1.update(I, (value) => Complex(1, 0));\n     ex1.update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex[0][I] = ex1[0][I];\n     ex[I][1] = ex1[0][I];\n-    // print(ex[0][I]);\n+    print(ex[I][1]);\n+\n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n"
                },
                {
                    "date": 1642684354463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,10 +102,10 @@\n   double I = 1;\n   int max, J;\n   double arg, fac;\n \n-  ex[0][2] = Complex(2, 3);\n-  print(ex);\n+  // ex[0][2] = Complex(2, 3);\n+  // print(ex);\n \n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n"
                },
                {
                    "date": 1642684458801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    ex1.update(I, (value) => Complex(1, 0));\n-    ex1.update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n+    ex1.update(0, (value) => Complex(1, 0));\n+    ex1.update(1, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex[0][I] = ex1[0][I];\n     ex[I][1] = ex1[0][I];\n     print(ex[I][1]);\n \n"
                },
                {
                    "date": 1642684546777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    ex1.update(0, (value) => Complex(1, 0));\n-    ex1.update(1, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n+    ex1[0].update(I, (value) => Complex(1, 0));\n+    ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex[0][I] = ex1[0][I];\n     ex[I][1] = ex1[0][I];\n     print(ex[I][1]);\n \n"
                },
                {
                    "date": 1642684645946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \n     ex1[0].update(I, (value) => Complex(1, 0));\n     ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex[0][I] = ex1[0][I];\n-    ex[I][1] = ex1[0][I];\n+    ex[1][1] = ex1[0][I];\n     print(ex[I][1]);\n \n     J = 2;\n     while (J <= max) {\n"
                },
                {
                    "date": 1642687222795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \n     ex1[0].update(I, (value) => Complex(1, 0));\n     ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex[0][I] = ex1[0][I];\n-    ex[1][1] = ex1[0][I];\n+    ex[1][1] = ex1[1][I];\n     print(ex[I][1]);\n \n     J = 2;\n     while (J <= max) {\n"
                },
                {
                    "date": 1642687400254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,8 +129,9 @@\n     // ex.update(-6, (value) => Complex(0, 2));\n \n     ex1[0].update(I, (value) => Complex(1, 0));\n     ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n+\n     ex[0][I] = ex1[0][I];\n     ex[1][1] = ex1[1][I];\n     print(ex[I][1]);\n \n"
                },
                {
                    "date": 1642687502639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n \n     J = 1;\n     while (J <= max) {\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[J][I] = r;\n+      ex[-J][I] = r;\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642687547135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,14 +140,14 @@\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n \n-    J = 1;\n-    while (J <= max) {\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[-J][I] = r;\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+    //   ex[-J][I] = r;\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642687592257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,14 +140,14 @@\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n \n-    // J = 1;\n-    // while (J <= max) {\n-    //   Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-    //   ex[-J][I] = r;\n-    //   J += 1;\n-    // }\n+    J = 1;\n+    while (J <= max) {\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      ex[-J][I] = r;\n+      J += 1;\n+    }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642688434619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,14 +140,14 @@\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n \n-    J = 1;\n-    while (J <= max) {\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[-J][I] = r;\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+    //   ex[-J][I] = r;\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642688812933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,14 +140,14 @@\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n \n-    // J = 1;\n-    // while (J <= max) {\n-    //   Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-    //   ex[-J][I] = r;\n-    //   J += 1;\n-    // }\n+    J = 1;\n+    while (J <= max) {\n+      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n+      ex[-J][I] = r;\n+      J += 1;\n+    }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642688831681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,9 @@\n       J += 1;\n     }\n     I++;\n   }\n+  print(ex);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642688976485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print(ex);\n+  // print(ex);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642688990798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,20 +134,20 @@\n     ex[0][I] = ex1[0][I];\n     ex[1][1] = ex1[1][I];\n     print(ex[I][1]);\n \n-    J = 2;\n-    while (J <= max) {\n-      ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      J += 1;\n-    }\n+    // J = 2;\n+    // while (J <= max) {\n+    //   ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    //   J += 1;\n+    // }\n \n-    J = 1;\n-    while (J <= max) {\n-      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n-      ex[-J][I] = r;\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n+    //   ex[-J][I] = r;\n+    //   J += 1;\n+    // }\n     I++;\n   }\n   // print(ex);\n \n"
                },
                {
                    "date": 1642689265996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  print('dlam $dlam');\n+  print('dlam ${-dlam}');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642689302071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,10 +203,10 @@\n   // dlam = -26560.02894438416;\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n-\n-  print('dlam ${-dlam}');\n+  dlam = -dlam;\n+  print('dlam ${dlam}');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642689330279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,20 +134,20 @@\n     ex[0][I] = ex1[0][I];\n     ex[1][1] = ex1[1][I];\n     print(ex[I][1]);\n \n-    // J = 2;\n-    // while (J <= max) {\n-    //   ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    //   J += 1;\n-    // }\n+    J = 2;\n+    while (J <= max) {\n+      ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      J += 1;\n+    }\n \n-    // J = 1;\n-    // while (J <= max) {\n-    //   Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n-    //   ex[-J][I] = r;\n-    //   J += 1;\n-    // }\n+    J = 1;\n+    while (J <= max) {\n+      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n+      ex[-J][I] = r;\n+      J += 1;\n+    }\n     I++;\n   }\n   // print(ex);\n \n"
                },
                {
                    "date": 1642689354721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,20 +134,20 @@\n     ex[0][I] = ex1[0][I];\n     ex[1][1] = ex1[1][I];\n     print(ex[I][1]);\n \n-    J = 2;\n-    while (J <= max) {\n-      ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      J += 1;\n-    }\n+    // J = 2;\n+    // while (J <= max) {\n+    //   ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    //   J += 1;\n+    // }\n \n-    J = 1;\n-    while (J <= max) {\n-      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n-      ex[-J][I] = r;\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n+    //   ex[-J][I] = r;\n+    //   J += 1;\n+    // }\n     I++;\n   }\n   // print(ex);\n \n"
                },
                {
                    "date": 1642689793665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,15 +132,15 @@\n     ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n \n     ex[0][I] = ex1[0][I];\n     ex[1][1] = ex1[1][I];\n-    print(ex[I][1]);\n \n-    // J = 2;\n-    // while (J <= max) {\n-    //   ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    //   J += 1;\n-    // }\n+    J = 2;\n+    while (J <= max) {\n+      ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      print(ex[J][I]);\n+      J += 1;\n+    }\n \n     // J = 1;\n     // while (J <= max) {\n     //   Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n@@ -203,10 +203,10 @@\n   // dlam = -26560.02894438416;\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n-  dlam = -dlam;\n-  print('dlam ${dlam}');\n+\n+  // print('dlam ${dlam}');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642690257475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,14 +140,14 @@\n       print(ex[J][I]);\n       J += 1;\n     }\n \n-    // J = 1;\n-    // while (J <= max) {\n-    //   Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n-    //   ex[-J][I] = r;\n-    //   J += 1;\n-    // }\n+    J = 1;\n+    while (J <= max) {\n+      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n+      ex[-J][I] = r;\n+      J += 1;\n+    }\n     I++;\n   }\n   // print(ex);\n \n"
                },
                {
                    "date": 1642690431026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       J += 1;\n     }\n \n     J = 1;\n@@ -148,9 +148,10 @@\n       J += 1;\n     }\n     I++;\n   }\n-  // print(ex);\n+  print(ex[0][I]);\n+  print(ex[1][1]);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642691035316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print(ex[0][I]);\n+  print(ex[0][1]);\n   print(ex[1][1]);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n"
                },
                {
                    "date": 1642691173180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n       _pi2 * frac(0.25909118 + 1342.22782980 * T - 0.00000892 * t2) + df / _arc;\n   double D =\n       _pi2 * frac(0.82736186 + 1236.85308708 * T - 0.00000397 * t2) + dd / _arc;\n \n-  double I = 1;\n+  int I = 1;\n   int max, J;\n   double arg, fac;\n \n   // ex[0][2] = Complex(2, 3);\n"
                },
                {
                    "date": 1642692176318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,10 +148,10 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print(ex[0][1]);\n-  print(ex[1][1]);\n+  print(ex[0]);\n+  print(ex[1]);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642692320941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,10 +142,10 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n-      ex[-J][I] = r;\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      ex[J][I] = r;\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642692344141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n \n     J = 1;\n     while (J <= max) {\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[J][I] = r;\n+      ex[-J][I] = r;\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642692363628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n       ex[-J][I] = r;\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642692403054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,14 +140,14 @@\n       // print(ex[J][I]);\n       J += 1;\n     }\n \n-    J = 1;\n-    while (J <= max) {\n-      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n-      ex[-J][I] = r;\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n+    //   ex[-J][I] = r;\n+    //   J += 1;\n+    // }\n     I++;\n   }\n   print(ex[0]);\n   print(ex[1]);\n"
                },
                {
                    "date": 1642692431578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,14 +140,14 @@\n       // print(ex[J][I]);\n       J += 1;\n     }\n \n-    // J = 1;\n-    // while (J <= max) {\n-    //   Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n-    //   ex[-J][I] = r;\n-    //   J += 1;\n-    // }\n+    J = 1;\n+    while (J <= max) {\n+      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n+      ex[J][I] = r;\n+      J += 1;\n+    }\n     I++;\n   }\n   print(ex[0]);\n   print(ex[1]);\n"
                },
                {
                    "date": 1642692622785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,9 @@\n     }\n     I++;\n   }\n   print(ex[0]);\n+  print('');\n   print(ex[1]);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n"
                },
                {
                    "date": 1642692694065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print(ex[0]);\n+  print(ex1[0]);\n   print('');\n   print(ex[1]);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642692780726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n     I++;\n   }\n   print(ex1[0]);\n   print('');\n-  print(ex[1]);\n+  print(ex1[1]);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642692805310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,11 +150,11 @@\n     I++;\n   }\n   print(ex1[0]);\n   print('');\n-  print(ex1[1]);\n+  print(ex[1]);\n \n-  var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n+  var _vars = vars(ex1, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n"
                },
                {
                    "date": 1642692877861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n     ex[1][1] = ex1[1][I];\n \n     J = 2;\n     while (J <= max) {\n-      ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      ex1[J][I] = ex1[J - 1][I] * ex1[1][I];\n       // print(ex[J][I]);\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642692925881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n     ex[1][1] = ex1[1][I];\n \n     J = 2;\n     while (J <= max) {\n-      ex1[J][I] = ex1[J - 1][I] * ex1[1][I];\n+      ex[J][I] = ex[J - 1][I] * ex[1][I];\n       // print(ex[J][I]);\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642692968086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n     I++;\n   }\n   print(ex1[0]);\n   print('');\n-  print(ex[1]);\n+  print(ex1[2]);\n \n   var _vars = vars(ex1, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642693039115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,11 +148,11 @@\n       J += 1;\n     }\n     I++;\n   }\n+  print(ex[0]);\n+  print('');\n   print(ex1[0]);\n-  print('');\n-  print(ex1[2]);\n \n   var _vars = vars(ex1, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642693219972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,9 @@\n     ex1[0].update(I, (value) => Complex(1, 0));\n     ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n \n     ex[0][I] = ex1[0][I];\n+    print(ex[0][I]);\n     ex[1][1] = ex1[1][I];\n \n     J = 2;\n     while (J <= max) {\n@@ -148,11 +149,11 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print(ex[0]);\n-  print('');\n-  print(ex1[0]);\n+  // print(ex[0]);\n+  // print('');\n+  // print(ex1[0]);\n \n   var _vars = vars(ex1, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642693611013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,19 +184,19 @@\n   // N += addn(-2.000, -2, 0, 1, -2);\n   // N += addn(-22.571, 0, 1, 1, -2);\n   // N += addn(10.985, 0, -1, 1, -2);\n \n-  dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n-      0.31 * sine(0.0466 - 125.1025 * T) +\n-      0.35 * sine(0.5785 - 25.1042 * T) +\n-      0.66 * sine(0.4591 + 1335.8075 * T) +\n-      0.64 * sine(0.3130 - 91.5680 * T) +\n-      1.14 * sine(0.1480 + 1331.2898 * T) +\n-      0.21 * sine(0.5918 + 1056.5859 * T) +\n-      0.44 * sine(0.5784 + 1322.8595 * T) +\n-      0.24 * sine(0.2275 - 5.7374 * T) +\n-      0.28 * sine(0.2965 + 2.6929 * T) +\n-      0.33 * sine(0.3132 + 6.3368 * T));\n+  // dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n+  //     0.31 * sine(0.0466 - 125.1025 * T) +\n+  //     0.35 * sine(0.5785 - 25.1042 * T) +\n+  //     0.66 * sine(0.4591 + 1335.8075 * T) +\n+  //     0.64 * sine(0.3130 - 91.5680 * T) +\n+  //     1.14 * sine(0.1480 + 1331.2898 * T) +\n+  //     0.21 * sine(0.5918 + 1056.5859 * T) +\n+  //     0.44 * sine(0.5784 + 1322.8595 * T) +\n+  //     0.24 * sine(0.2275 - 5.7374 * T) +\n+  //     0.28 * sine(0.2965 + 2.6929 * T) +\n+  //     0.33 * sine(0.3132 + 6.3368 * T));\n \n   var S = F + ds / arc;\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n@@ -213,21 +213,4 @@\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n }\n-\n-\n-// AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n-  // var z = ex[4][4];\n-  // DLAM += 13.902 * z.imaginary;\n-  // DS += 14.06 * z.imaginary;\n-  // GAM1C += -0.001 * z.real;\n-  // SINPI += 0.2607 * z.real;\n-\n-//     // AddSol(0.403000, -4.010000, 0.394000, 0.002300, 0.000000, 0.000000, 0.000000, 3.000000)\n-//   z = ex[3][4];\n-//   DLAM += 0.403 * z.imaginary;\n-//   DS += -4.01 * z.imaginary;\n-//   GAM1C += 0.394 * z.real;\n-//   SINPI += 0.0023 * z.real;\n-\n-  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1642693620156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,19 +184,19 @@\n   // N += addn(-2.000, -2, 0, 1, -2);\n   // N += addn(-22.571, 0, 1, 1, -2);\n   // N += addn(10.985, 0, -1, 1, -2);\n \n-  // dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n-  //     0.31 * sine(0.0466 - 125.1025 * T) +\n-  //     0.35 * sine(0.5785 - 25.1042 * T) +\n-  //     0.66 * sine(0.4591 + 1335.8075 * T) +\n-  //     0.64 * sine(0.3130 - 91.5680 * T) +\n-  //     1.14 * sine(0.1480 + 1331.2898 * T) +\n-  //     0.21 * sine(0.5918 + 1056.5859 * T) +\n-  //     0.44 * sine(0.5784 + 1322.8595 * T) +\n-  //     0.24 * sine(0.2275 - 5.7374 * T) +\n-  //     0.28 * sine(0.2965 + 2.6929 * T) +\n-  //     0.33 * sine(0.3132 + 6.3368 * T));\n+  dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n+      0.31 * sine(0.0466 - 125.1025 * T) +\n+      0.35 * sine(0.5785 - 25.1042 * T) +\n+      0.66 * sine(0.4591 + 1335.8075 * T) +\n+      0.64 * sine(0.3130 - 91.5680 * T) +\n+      1.14 * sine(0.1480 + 1331.2898 * T) +\n+      0.21 * sine(0.5918 + 1056.5859 * T) +\n+      0.44 * sine(0.5784 + 1322.8595 * T) +\n+      0.24 * sine(0.2275 - 5.7374 * T) +\n+      0.28 * sine(0.2965 + 2.6929 * T) +\n+      0.33 * sine(0.3132 + 6.3368 * T));\n \n   var S = F + ds / arc;\n   var latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n"
                },
                {
                    "date": 1642693792391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,29 +162,10 @@\n \n   // print(z);\n   // print(dlam);\n   // print(ex);\n-  void addn(coeffn, p, q, r, s) {\n-    // Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n-    // print(r.imaginary);\n-    // print(ex[p][1]);\n-    // return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n-  }\n \n-  // addn(-526.069, 0, 0, 1, -2);\n   double N = -477.8936;\n-  // double N = 0;\n-  // N += addn(-526.069, 0, 0, 1, -2);\n-  // print(N);\n-  // N += addn(-3.352, 0, 0, 1, -4);\n-  // N += addn(44.297, 1, 0, 1, -2);\n-  // N += addn(-6.000, 1, 0, 1, -4);\n-  // N += addn(20.599, -1, 0, 1, 0);\n-  // N += addn(-30.598, -1, 0, 1, -2);\n-  // N += addn(-24.649, -2, 0, 1, 0);\n-  // N += addn(-2.000, -2, 0, 1, -2);\n-  // N += addn(-22.571, 0, 1, 1, -2);\n-  // N += addn(10.985, 0, -1, 1, -2);\n \n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n       0.35 * sine(0.5785 - 25.1042 * T) +\n@@ -213,4 +194,23 @@\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n }\n+\n+\n+// void addn(coeffn, p, q, r, s) {\n+//   Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n+//   print(r.imaginary);\n+//   print(ex[p][1]);\n+//   return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n+// }\n+  // double N = 0;\n+  // N += addn(-526.069, 0, 0, 1, -2);\n+  // N += addn(-3.352, 0, 0, 1, -4);\n+  // N += addn(44.297, 1, 0, 1, -2);\n+  // N += addn(-6.000, 1, 0, 1, -4);\n+  // N += addn(20.599, -1, 0, 1, 0);\n+  // N += addn(-30.598, -1, 0, 1, -2);\n+  // N += addn(-24.649, -2, 0, 1, 0);\n+  // N += addn(-2.000, -2, 0, 1, -2);\n+  // N += addn(-22.571, 0, 1, 1, -2);\n+  // N += addn(10.985, 0, -1, 1, -2);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642700121034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,12 +129,15 @@\n     // ex.update(-6, (value) => Complex(0, 2));\n \n     ex1[0].update(I, (value) => Complex(1, 0));\n     ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n+    ex.update(I, (value) {\n+      return value..[I] = Complex(1, 0); // !\n+    });\n \n-    ex[0][I] = ex1[0][I];\n-    print(ex[0][I]);\n-    ex[1][1] = ex1[1][I];\n+    // ex[0][I] = ex1[0][I];\n+    // print(ex[0][I]);\n+    // ex[1][1] = ex1[1][I];\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n@@ -149,9 +152,9 @@\n       J += 1;\n     }\n     I++;\n   }\n-  // print(ex[0]);\n+  print(ex);\n   // print('');\n   // print(ex1[0]);\n \n   var _vars = vars(ex1, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642700249107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,10 +130,10 @@\n \n     ex1[0].update(I, (value) => Complex(1, 0));\n     ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex.update(I, (value) {\n-      return value..[I] = Complex(1, 0); // !\n-    });\n+      return value..[I] = Complex(1, 0);\n+    }); // !\n \n     // ex[0][I] = ex1[0][I];\n     // print(ex[0][I]);\n     // ex[1][1] = ex1[1][I];\n"
                },
                {
                    "date": 1642700347711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,13 +127,16 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    ex1[0].update(I, (value) => Complex(1, 0));\n-    ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n-    ex.update(I, (value) {\n+    // ex1[0].update(I, (value) => Complex(1, 0));\n+    // ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n+    ex.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n+    ex.update(1, (value) {\n+      return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n+    });\n \n     // ex[0][I] = ex1[0][I];\n     // print(ex[0][I]);\n     // ex[1][1] = ex1[1][I];\n"
                },
                {
                    "date": 1642700374914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,8 +132,9 @@\n     // ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n+    print(ex[0]);\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n@@ -155,9 +156,9 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print(ex);\n+  // print(ex);\n   // print('');\n   // print(ex1[0]);\n \n   var _vars = vars(ex1, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642700398592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      Complex r = Complex.conjugate(ex1[J][I], ex1[J][I]);\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[J][I] = r;\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642700449894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \n     // ex1[0].update(I, (value) => Complex(1, 0));\n     // ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex.update(0, (value) {\n-      return value..[I] = Complex(1, 0);\n+      return value..[I] = Complex(1, 1);\n     }); // !\n     print(ex[0]);\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n"
                },
                {
                    "date": 1642700517978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,12 +137,8 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    // ex[0][I] = ex1[0][I];\n-    // print(ex[0][I]);\n-    // ex[1][1] = ex1[1][I];\n-\n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       // print(ex[J][I]);\n"
                },
                {
                    "date": 1642700616149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \n     // ex1[0].update(I, (value) => Complex(1, 0));\n     // ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n     ex.update(0, (value) {\n-      return value..[I] = Complex(1, 1);\n+      return value..[I] = Complex(1, 0);\n     }); // !\n     print(ex[0]);\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n@@ -147,9 +147,9 @@\n \n     J = 1;\n     while (J <= max) {\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[J][I] = r;\n+      ex[-J][I] = r;\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642700701545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n   // print(ex);\n   // print('');\n   // print(ex1[0]);\n \n-  var _vars = vars(ex1, dlam, ds, gam1c, sinpi);\n+  var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n"
                },
                {
                    "date": 1642700834033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,11 +152,8 @@\n       J += 1;\n     }\n     I++;\n   }\n-  // print(ex);\n-  // print('');\n-  // print(ex1[0]);\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n"
                },
                {
                    "date": 1642701028660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,10 +139,12 @@\n     });\n \n     J = 2;\n     while (J <= max) {\n-      ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      // print(ex[J][I]);\n+      ex.update(J, (value) {\n+        return value..[I] = ex[J - 1][I] * ex[1][I];\n+      });\n+      // ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642701100319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,12 +139,12 @@\n     });\n \n     J = 2;\n     while (J <= max) {\n-      ex.update(J, (value) {\n-        return value..[I] = ex[J - 1][I] * ex[1][I];\n-      });\n-      // ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      // ex.update(J, (value) {\n+      //   return value..[I] = ex[J - 1][I] * ex[1][I];\n+      // });\n+      ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642701113828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,5 +214,11 @@\n   // N += addn(-30.598, -1, 0, 1, -2);\n   // N += addn(-24.649, -2, 0, 1, 0);\n   // N += addn(-2.000, -2, 0, 1, -2);\n   // N += addn(-22.571, 0, 1, 1, -2);\n-  // N += addn(10.985, 0, -1, 1, -2);\n\\ No newline at end of file\n+  // N += addn(10.985, 0, -1, 1, -2);\n+\n+\n+//   {1: 1 + 0j, 2: 0j, 3: 0j, 4: 0j}\n+// {1: -0.65577396219458 - 0.7549806878938415j, 2: 1 + 0j, 3: 0j, 4: 0j}\n+// {1: -0.65577396219458 - 0.7549806878938415j, 2: -0.49846580435454685 - 0.8580116613819543j, 3: 1 + 0j, 4: 0j}\n+// {1: -0.65577396219458 - 0.7549806878938415j, 2: -0.49846580435454685 - 0.8580116613819543j, 3: -0.92462912443382 - 0.3907126635310238j, 4: 1 + 0j}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642701187080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex[J - 1][I] * ex[1][I];\n-      // });\n+      // }); // одинаковы с нижним\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n     }\n \n@@ -216,9 +216,4 @@\n   // N += addn(-2.000, -2, 0, 1, -2);\n   // N += addn(-22.571, 0, 1, 1, -2);\n   // N += addn(10.985, 0, -1, 1, -2);\n \n-\n-//   {1: 1 + 0j, 2: 0j, 3: 0j, 4: 0j}\n-// {1: -0.65577396219458 - 0.7549806878938415j, 2: 1 + 0j, 3: 0j, 4: 0j}\n-// {1: -0.65577396219458 - 0.7549806878938415j, 2: -0.49846580435454685 - 0.8580116613819543j, 3: 1 + 0j, 4: 0j}\n-// {1: -0.65577396219458 - 0.7549806878938415j, 2: -0.49846580435454685 - 0.8580116613819543j, 3: -0.92462912443382 - 0.3907126635310238j, 4: 1 + 0j}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642730913959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   Map ex = _array2(-6, 6, 1, 4); // правильно\n-  Map ex1 = _array2(-6, 6, 1, 4);\n+  // Map ex1 = _array2(-6, 6, 1, 4);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n"
                },
                {
                    "date": 1642733103258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   Map ex = _array2(-6, 6, 1, 4); // правильно\n-  // Map ex1 = _array2(-6, 6, 1, 4);\n+  Map ex2 = _array2(-6, 6, 1, 4);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n"
                },
                {
                    "date": 1642733310919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,18 +127,19 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    // ex1[0].update(I, (value) => Complex(1, 0));\n-    // ex1[1].update(I, (value) => Complex(fac * cos(arg), fac * sin(arg)));\n-    ex.update(0, (value) {\n+    ex2.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n-    print(ex[0]);\n-    ex.update(1, (value) {\n+    ex[0] = ex2[0];\n+    ex2.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n-    });\n+    }); // !\n+    ex[1] = ex2[1];\n \n+    print(ex);\n+\n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642733363539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex2[1];\n \n-    print(ex);\n+    print(ex[0]);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642733514104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,9 @@\n     ex2.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n     ex[0] = ex2[0];\n+    print(ex[0]);\n     ex2.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex2[1];\n"
                },
                {
                    "date": 1642733595012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,12 @@\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n+\n   Map ex = _array2(-6, 6, 1, 4); // правильно\n   Map ex2 = _array2(-6, 6, 1, 4);\n+  Map ex3 = _array2(-6, 6, 1, 4);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n@@ -131,13 +133,13 @@\n     ex2.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n     ex[0] = ex2[0];\n-    print(ex[0]);\n-    ex2.update(1, (value) {\n+    // print(ex[0]);\n+    ex3.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n-    ex[1] = ex2[1];\n+    ex[1] = ex3[1];\n \n     print(ex[0]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642733633677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,15 +133,14 @@\n     ex2.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n     ex[0] = ex2[0];\n-    // print(ex[0]);\n     ex3.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n \n-    print(ex[0]);\n+    print(ex);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642733746700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n \n-    print(ex);\n+    // print(ex);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642734025045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n \n-    // print(ex);\n+    print(ex);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642734039528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n \n-    print(ex);\n+    print(ex2);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642734074070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,9 @@\n     ex3.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n+    ex2 = ex;\n \n     print(ex2);\n \n     J = 2;\n"
                },
                {
                    "date": 1642734173284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,9 @@\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n     ex2 = ex;\n+    ex3 = ex;\n \n     print(ex2);\n \n     J = 2;\n"
                },
                {
                    "date": 1642734203530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,18 +129,20 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    ex2.update(0, (value) {\n-      return value..[I] = Complex(1, 0);\n-    }); // !\n-    ex[0] = ex2[0];\n-    ex3.update(1, (value) {\n-      return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n-    }); // !\n-    ex[1] = ex3[1];\n-    ex2 = ex;\n-    ex3 = ex;\n+    if (I == 1) {\n+      ex2.update(0, (value) {\n+        return value..[I] = Complex(1, 0);\n+      }); // !\n+      ex[0] = ex2[0];\n+      ex3.update(1, (value) {\n+        return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n+      }); // !\n+      ex[1] = ex3[1];\n+      ex2 = ex;\n+      ex3 = ex;\n+    }\n \n     print(ex2);\n \n     J = 2;\n"
                },
                {
                    "date": 1642734584027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,16 +142,17 @@\n       ex2 = ex;\n       ex3 = ex;\n     }\n \n-    print(ex2);\n+    // print(ex2);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex[J - 1][I] * ex[1][I];\n       // }); // одинаковы с нижним\n-      ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n+      print(ex[J][I]);\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642734640824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,12 +146,12 @@\n     // print(ex2);\n \n     J = 2;\n     while (J <= max) {\n-      // ex.update(J, (value) {\n-      //   return value..[I] = ex[J - 1][I] * ex[1][I];\n-      // }); // одинаковы с нижним\n-      ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n+      ex.update(J, (value) {\n+        return value..[I] = ex[J - 1][I] * ex[1][I];\n+      }); // одинаковы с нижним\n+      // ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n       print(ex[J][I]);\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642734687093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n \n     J = 2;\n     while (J <= max) {\n       ex.update(J, (value) {\n-        return value..[I] = ex[J - 1][I] * ex[1][I];\n+        return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       }); // одинаковы с нижним\n       // ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n       print(ex[J][I]);\n       J += 1;\n"
                },
                {
                    "date": 1642734695300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n \n     J = 2;\n     while (J <= max) {\n       ex.update(J, (value) {\n-        return value..[I] = ex2[J - 1][I] * ex2[1][I];\n+        return value..[I] = ex2[J - 1][I] * ex3[1][I];\n       }); // одинаковы с нижним\n       // ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n       print(ex[J][I]);\n       J += 1;\n"
                },
                {
                    "date": 1642734739099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n \n     J = 2;\n     while (J <= max) {\n       ex.update(J, (value) {\n-        return value..[I] = ex2[J - 1][I] * ex3[1][I];\n+        return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       }); // одинаковы с нижним\n       // ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n       print(ex[J][I]);\n       J += 1;\n"
                },
                {
                    "date": 1642734771158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n       ex.update(J, (value) {\n         return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       }); // одинаковы с нижним\n       // ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-      print(ex[J][I]);\n+      print(ex[1][I]);\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642734962971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,28 +130,30 @@\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n     if (I == 1) {\n-      ex2.update(0, (value) {\n-        return value..[I] = Complex(1, 0);\n-      }); // !\n-      ex[0] = ex2[0];\n-      ex3.update(1, (value) {\n-        return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n-      }); // !\n-      ex[1] = ex3[1];\n-      ex2 = ex;\n-      ex3 = ex;\n+      for (var n = 1; n < -4; n++) {\n+        ex2.update(0, (value) {\n+          return value..[I] = Complex(1, 0);\n+        }); // !\n+        ex[0] = ex2[0];\n+        ex3.update(1, (value) {\n+          return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n+        }); // !\n+        ex[1] = ex3[1];\n+        ex2 = ex;\n+        ex3 = ex;\n+      }\n     }\n \n     // print(ex2);\n \n     J = 2;\n     while (J <= max) {\n-      ex.update(J, (value) {\n-        return value..[I] = ex2[J - 1][I] * ex2[1][I];\n-      }); // одинаковы с нижним\n-      // ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n+      // ex.update(J, (value) {\n+      //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n+      // }); // одинаковы с нижним\n+      ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n       print(ex[1][I]);\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642734984957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,13 +132,13 @@\n \n     if (I == 1) {\n       for (var n = 1; n < -4; n++) {\n         ex2.update(0, (value) {\n-          return value..[I] = Complex(1, 0);\n+          return value..[n] = Complex(1, 0);\n         }); // !\n         ex[0] = ex2[0];\n         ex3.update(1, (value) {\n-          return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n+          return value..[n] = Complex(fac * cos(arg), fac * sin(arg));\n         }); // !\n         ex[1] = ex3[1];\n         ex2 = ex;\n         ex3 = ex;\n"
                },
                {
                    "date": 1642735014286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         ex3 = ex;\n       }\n     }\n \n-    // print(ex2);\n+    print(ex2);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642735043958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n     if (I == 1) {\n-      for (var n = 1; n < -4; n++) {\n+      for (var n = 1; n <= 4; n++) {\n         ex2.update(0, (value) {\n           return value..[n] = Complex(1, 0);\n         }); // !\n         ex[0] = ex2[0];\n"
                },
                {
                    "date": 1642735066945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         ex3 = ex;\n       }\n     }\n \n-    print(ex2);\n+    // print(ex2);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642735111493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n-      ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n+      ex[J][I] = ex2[J - 1][I] * ex3[1][I];\n       print(ex[1][I]);\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642735144266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n-      ex[J][I] = ex2[J - 1][I] * ex3[1][I];\n+      ex[J][I] = ex[J - 1][I] * ex[1][I];\n       print(ex[1][I]);\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642735207980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,16 +151,16 @@\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n-      ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n       print(ex[1][I]);\n       J += 1;\n     }\n \n     J = 1;\n     while (J <= max) {\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      Complex r = Complex.conjugate(ex2[J][I], ex2[J][I]);\n       ex[-J][I] = r;\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642735250799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n       ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-      print(ex[1][I]);\n+      print(ex[J][I]);\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642735318013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  // print('dlam ${dlam}');\n+  print('dlam $dlam');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642735383117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n       ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-      print(ex[J][I]);\n+      print(J);\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642735421153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n       ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-      print(J);\n+      print(I);\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642735512997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,17 +144,17 @@\n         ex3 = ex;\n       }\n     }\n \n-    // print(ex2);\n+    print(ex[1][I]);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n       ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-      print(I);\n+      // print(I);\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642735629213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         ex3 = ex;\n       }\n     }\n \n-    print(ex[1][I]);\n+    print(ex2[1][I]);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642735644674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         ex3 = ex;\n       }\n     }\n \n-    print(ex2[1][I]);\n+    print(ex2);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642735699779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         ex3 = ex;\n       }\n     }\n \n-    print(ex2);\n+    print(ex);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n@@ -158,9 +158,9 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      Complex r = Complex.conjugate(ex2[J][I], ex2[J][I]);\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[-J][I] = r;\n       J += 1;\n     }\n     I++;\n"
                },
                {
                    "date": 1642735761090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         ex3 = ex;\n       }\n     }\n \n-    print(ex);\n+    print(ex[I]);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642735876254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // ignore_for_file: prefer_typing_uninitialized_variables\n \n import 'dart:math';\n+import 'dart:typed_data';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n import 'src/complex.dart';\n@@ -129,22 +130,18 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    if (I == 1) {\n-      for (var n = 1; n <= 4; n++) {\n-        ex2.update(0, (value) {\n-          return value..[n] = Complex(1, 0);\n-        }); // !\n-        ex[0] = ex2[0];\n-        ex3.update(1, (value) {\n-          return value..[n] = Complex(fac * cos(arg), fac * sin(arg));\n-        }); // !\n-        ex[1] = ex3[1];\n-        ex2 = ex;\n-        ex3 = ex;\n-      }\n-    }\n+    ex2.update(0, (value) {\n+      return value..[Int32List.bytesPerElement] = Complex(1, 0);\n+    }); // !\n+    ex[0] = ex2[0];\n+    ex3.update(1, (value) {\n+      return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n+    }); // !\n+    ex[1] = ex3[1];\n+    // ex2 = ex;\n+    // ex3 = ex;\n \n     print(ex[I]);\n \n     J = 2;\n"
                },
                {
                    "date": 1642735900242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n-      ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n+      ex[J][I] = ex[J - 1][I] * ex[1][I];\n       // print(I);\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642735968557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,14 +153,14 @@\n       // print(I);\n       J += 1;\n     }\n \n-    J = 1;\n-    while (J <= max) {\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[-J][I] = r;\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+    //   ex[-J][I] = r;\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642736094473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,24 +143,24 @@\n     // ex3 = ex;\n \n     print(ex[I]);\n \n-    J = 2;\n+    // J = 2;\n+    // while (J <= max) {\n+    //   // ex.update(J, (value) {\n+    //   //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n+    //   // }); // одинаковы с нижним\n+    //   ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    //   // print(I);\n+    //   J += 1;\n+    // }\n+\n+    J = 1;\n     while (J <= max) {\n-      // ex.update(J, (value) {\n-      //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n-      // }); // одинаковы с нижним\n-      ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      // print(I);\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      ex[-J][I] = r;\n       J += 1;\n     }\n-\n-    // J = 1;\n-    // while (J <= max) {\n-    //   Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-    //   ex[-J][I] = r;\n-    //   J += 1;\n-    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642736196628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,19 +141,19 @@\n     ex[1] = ex3[1];\n     // ex2 = ex;\n     // ex3 = ex;\n \n-    print(ex[I]);\n+    print(ex[-6]);\n \n-    // J = 2;\n-    // while (J <= max) {\n-    //   // ex.update(J, (value) {\n-    //   //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n-    //   // }); // одинаковы с нижним\n-    //   ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    //   // print(I);\n-    //   J += 1;\n-    // }\n+    J = 2;\n+    while (J <= max) {\n+      // ex.update(J, (value) {\n+      //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n+      // }); // одинаковы с нижним\n+      ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      // print(I);\n+      J += 1;\n+    }\n \n     J = 1;\n     while (J <= max) {\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n"
                },
                {
                    "date": 1642736347876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n // ignore_for_file: prefer_typing_uninitialized_variables\n \n import 'dart:math';\n-import 'dart:typed_data';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/func.dart';\n import 'src/complex.dart';\n@@ -131,26 +130,26 @@\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n     ex2.update(0, (value) {\n-      return value..[Int32List.bytesPerElement] = Complex(1, 0);\n+      return value..[I] = Complex(1, 0);\n     }); // !\n     ex[0] = ex2[0];\n     ex3.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n-    // ex2 = ex;\n-    // ex3 = ex;\n+    ex2 = ex;\n+    ex3 = ex;\n \n     print(ex[-6]);\n \n     J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n-      ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n       // print(I);\n       J += 1;\n     }\n \n"
                },
                {
                    "date": 1642736413462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,16 @@\n   int I = 1;\n   int max, J;\n   double arg, fac;\n \n-  // ex[0][2] = Complex(2, 3);\n-  // print(ex);\n+  ex2.update(0, (value) {\n+    return value..[I] = Complex(1, 0);\n+  }); // !\n+  ex[0] = ex2[0];\n+  ex3.update(1, (value) {\n+    return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n+  }); // !\n+  ex[1] = ex3[1];\n \n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n@@ -129,16 +135,8 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    ex2.update(0, (value) {\n-      return value..[I] = Complex(1, 0);\n-    }); // !\n-    ex[0] = ex2[0];\n-    ex3.update(1, (value) {\n-      return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n-    }); // !\n-    ex[1] = ex3[1];\n     ex2 = ex;\n     ex3 = ex;\n \n     print(ex[-6]);\n"
                },
                {
                    "date": 1642736491870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,17 +104,8 @@\n   int I = 1;\n   int max, J;\n   double arg, fac;\n \n-  ex2.update(0, (value) {\n-    return value..[I] = Complex(1, 0);\n-  }); // !\n-  ex[0] = ex2[0];\n-  ex3.update(1, (value) {\n-    return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n-  }); // !\n-  ex[1] = ex3[1];\n-\n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n       max = 4;\n@@ -135,29 +126,37 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n+    ex2.update(0, (value) {\n+      return value..[I] = Complex(1, 0);\n+    }); // !\n+    ex[0] = ex2[0];\n+    ex3.update(1, (value) {\n+      return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n+    }); // !\n+    ex[1] = ex3[1];\n     ex2 = ex;\n     ex3 = ex;\n \n     print(ex[-6]);\n \n-    J = 2;\n-    while (J <= max) {\n-      // ex.update(J, (value) {\n-      //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n-      // }); // одинаковы с нижним\n-      ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-      // print(I);\n-      J += 1;\n-    }\n+    // J = 2;\n+    // while (J <= max) {\n+    //   // ex.update(J, (value) {\n+    //   //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n+    //   // }); // одинаковы с нижним\n+    //   ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n+    //   // print(I);\n+    //   J += 1;\n+    // }\n \n-    J = 1;\n-    while (J <= max) {\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-      ex[-J][I] = r;\n-      J += 1;\n-    }\n+    // J = 1;\n+    // while (J <= max) {\n+    //   Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+    //   ex[-J][I] = r;\n+    //   J += 1;\n+    // }\n     I++;\n   }\n \n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642736534652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     ex[1] = ex3[1];\n     ex2 = ex;\n     ex3 = ex;\n \n-    print(ex[-6]);\n+    print(ex[-5]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736561863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     ex[1] = ex3[1];\n     ex2 = ex;\n     ex3 = ex;\n \n-    print(ex[-5]);\n+    print(ex[0]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736579623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     ex[1] = ex3[1];\n     ex2 = ex;\n     ex3 = ex;\n \n-    print(ex[0]);\n+    print(ex[1]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736696601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     ex[1] = ex3[1];\n     ex2 = ex;\n     ex3 = ex;\n \n-    print(ex[1]);\n+    print(ex2[1]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736767477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,13 +134,17 @@\n     ex3.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n-    ex2 = ex;\n-    ex3 = ex;\n+    // ex2 = ex;\n+    // ex3 = ex;\n \n-    print(ex2[1]);\n+    // print(ex2[1]);\n \n+    J = 2;\n+    ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n+    print(ex[0]);\n+\n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n     //   //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n"
                },
                {
                    "date": 1642736794159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-    print(ex[0]);\n+    print(ex);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736828528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-    print(ex);\n+    print(ex[2]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736865922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n \n     // print(ex2[1]);\n \n     J = 2;\n-    ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n+    ex[J][I] = ex[J - 1][I] * ex[1][I];\n     print(ex[2]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642736891053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    print(ex[2]);\n+    print(ex[1]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736911564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n \n     // print(ex2[1]);\n \n     J = 2;\n-    ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    // ex[J][I] = ex[J - 1][I] * ex[1][I];\n     print(ex[1]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642736929426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     // ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    print(ex[1]);\n+    print(ex[0]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736941421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n \n     // print(ex2[1]);\n \n     J = 2;\n-    // ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    ex[J][I] = ex[J - 1][I] * ex[1][I];\n     print(ex[0]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642736959632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    print(ex[0]);\n+    print(ex[1]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736970568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    print(ex[1]);\n+    print(ex[2]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736983301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    print(ex[2]);\n+    print(ex[3]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642736996248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    print(ex[3]);\n+    print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n"
                },
                {
                    "date": 1642737007681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n \n     // print(ex2[1]);\n \n     J = 2;\n-    ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    // ex[J][I] = ex[J - 1][I] * ex[1][I];\n     print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642737054390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     // print(ex2[1]);\n \n     J = 2;\n     // ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    print(ex[4]);\n+    // print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n     //   // ex.update(J, (value) {\n@@ -161,9 +161,9 @@\n     //   J += 1;\n     // }\n     I++;\n   }\n-\n+  print(ex);\n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n"
                },
                {
                    "date": 1642737079668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n \n     // print(ex2[1]);\n \n     J = 2;\n-    // ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    ex[J][I] = ex[J - 1][I] * ex[1][I];\n     // print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642737214529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,15 +134,16 @@\n     ex3.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n     ex[1] = ex3[1];\n-    // ex2 = ex;\n-    // ex3 = ex;\n+    ex2 = ex;\n+    ex3 = ex;\n \n     // print(ex2[1]);\n \n     J = 2;\n-    ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    // ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    ex[-6][1] = ex2[1][1];\n     // print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642737404561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,12 @@\n     // print(ex2[1]);\n \n     J = 2;\n     // ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    ex[-6][1] = ex2[1][1];\n+    ex.update(-6, (value) {\n+      return value..[1] = ex2[1][1];\n+    });\n+    // ex[-6][1] = ex2[1][1];\n     // print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642737464248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,12 +141,12 @@\n     // print(ex2[1]);\n \n     J = 2;\n     // ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    ex.update(-6, (value) {\n+    ex3.update(-6, (value) {\n       return value..[1] = ex2[1][1];\n     });\n-    // ex[-6][1] = ex2[1][1];\n+    ex[-6][1] = ex3[-6][1];\n     // print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642737492030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n     // ex[J][I] = ex[J - 1][I] * ex[1][I];\n     ex3.update(-6, (value) {\n       return value..[1] = ex2[1][1];\n     });\n-    ex[-6][1] = ex3[-6][1];\n+    ex[-6] = ex3[-6];\n     // print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n"
                },
                {
                    "date": 1642737592256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,16 +137,17 @@\n     ex[1] = ex3[1];\n     ex2 = ex;\n     ex3 = ex;\n \n-    // print(ex2[1]);\n+    print(ex);\n+    print('');\n \n-    J = 2;\n-    // ex[J][I] = ex[J - 1][I] * ex[1][I];\n-    ex3.update(-6, (value) {\n-      return value..[1] = ex2[1][1];\n-    });\n-    ex[-6] = ex3[-6];\n+    // J = 2;\n+    // // ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    // ex3.update(-6, (value) {\n+    //   return value..[1] = ex2[1][1];\n+    // });\n+    // ex[-6] = ex3[-6];\n     // print(ex[4]);\n \n     // J = 2;\n     // while (J <= max) {\n@@ -165,9 +166,9 @@\n     //   J += 1;\n     // }\n     I++;\n   }\n-  print(ex);\n+  // print(ex);\n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n"
                },
                {
                    "date": 1642739162622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n dynamic calcMoon(time) {\n   double T = time / 36525;\n \n   Map ex = _array2(-6, 6, 1, 4); // правильно\n+  Map ex1 = _array2(-6, 6, 1, 4);\n   Map ex2 = _array2(-6, 6, 1, 4);\n   Map ex3 = _array2(-6, 6, 1, 4);\n \n   double sine(double phi) => sin(_pi2 * phi);\n@@ -129,15 +130,15 @@\n \n     ex2.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n-    ex[0] = ex2[0];\n+    ex1[0] = ex2[0];\n     ex3.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n-    ex[1] = ex3[1];\n-    ex2 = ex;\n-    ex3 = ex;\n+    ex1[1] = ex3[1];\n+    ex2 = ex1;\n+    ex3 = ex1;\n \n     print(ex);\n     print('');\n \n"
                },
                {
                    "date": 1642739262474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     ex1[1] = ex3[1];\n     ex2 = ex1;\n     ex3 = ex1;\n \n-    print(ex);\n+    print(ex3[1]);\n     print('');\n \n     // J = 2;\n     // // ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642739320656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     ex1[1] = ex3[1];\n     ex2 = ex1;\n     ex3 = ex1;\n \n-    print(ex3[1]);\n+    print(ex3[4]);\n     print('');\n \n     // J = 2;\n     // // ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642739341061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     ex1[1] = ex3[1];\n     ex2 = ex1;\n     ex3 = ex1;\n \n-    print(ex3[4]);\n+    print(ex3[1][4]);\n     print('');\n \n     // J = 2;\n     // // ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642739566347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,13 +138,13 @@\n     ex1[1] = ex3[1];\n     ex2 = ex1;\n     ex3 = ex1;\n \n-    print(ex3[1][4]);\n     print('');\n \n-    // J = 2;\n-    // // ex[J][I] = ex[J - 1][I] * ex[1][I];\n+    J = 2;\n+    ex3[J][I] = ex[J - 1][1];\n+    print(ex3[2]);\n     // ex3.update(-6, (value) {\n     //   return value..[1] = ex2[1][1];\n     // });\n     // ex[-6] = ex3[-6];\n"
                },
                {
                    "date": 1642739601744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,10 +141,10 @@\n \n     print('');\n \n     J = 2;\n-    ex3[J][I] = ex[J - 1][1];\n-    print(ex3[2]);\n+    ex1[J][I] = ex1[J - 1][1];\n+    print(ex1[2]);\n     // ex3.update(-6, (value) {\n     //   return value..[1] = ex2[1][1];\n     // });\n     // ex[-6] = ex3[-6];\n"
                },
                {
                    "date": 1642739636726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     print('');\n \n     J = 2;\n     ex1[J][I] = ex1[J - 1][1];\n-    print(ex1[2]);\n+    // print(ex1[2]);\n     // ex3.update(-6, (value) {\n     //   return value..[1] = ex2[1][1];\n     // });\n     // ex[-6] = ex3[-6];\n@@ -167,9 +167,9 @@\n     //   J += 1;\n     // }\n     I++;\n   }\n-  // print(ex);\n+  print(ex1);\n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n"
                },
                {
                    "date": 1642739743457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,13 +141,13 @@\n \n     print('');\n \n     J = 2;\n-    ex1[J][I] = ex1[J - 1][1];\n+    // ex1[J][I] = ex1[J - 1][1];\n     // print(ex1[2]);\n-    // ex3.update(-6, (value) {\n-    //   return value..[1] = ex2[1][1];\n-    // });\n+    ex1.update(-6, (value) {\n+      return value..[1] = ex1[1][1];\n+    });\n     // ex[-6] = ex3[-6];\n     // print(ex[4]);\n \n     // J = 2;\n"
                },
                {
                    "date": 1642739932042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,11 +143,12 @@\n \n     J = 2;\n     // ex1[J][I] = ex1[J - 1][1];\n     // print(ex1[2]);\n-    ex1.update(-6, (value) {\n-      return value..[1] = ex1[1][1];\n+    ex2.update(-6, (value) {\n+      return value..[1] = ex3[1][1];\n     });\n+    ex1[-6][1] = ex2[-6][1];\n     // ex[-6] = ex3[-6];\n     // print(ex[4]);\n \n     // J = 2;\n"
                },
                {
                    "date": 1642739962987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n     // print(ex1[2]);\n     ex2.update(-6, (value) {\n       return value..[1] = ex3[1][1];\n     });\n-    ex1[-6][1] = ex2[-6][1];\n+    ex1[-6] = ex2[-6];\n     // ex[-6] = ex3[-6];\n     // print(ex[4]);\n \n     // J = 2;\n"
                },
                {
                    "date": 1642739998328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n     J = 2;\n     // ex1[J][I] = ex1[J - 1][1];\n     // print(ex1[2]);\n     ex2.update(-6, (value) {\n-      return value..[1] = ex3[1][1];\n+      return value..[1] = 99;\n     });\n     ex1[-6] = ex2[-6];\n     // ex[-6] = ex3[-6];\n     // print(ex[4]);\n"
                },
                {
                    "date": 1642748718275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,9 @@\n   return arr1;\n }\n \n Map _array2(int xmin, int xmax, int ymin, int ymax) {\n-  Map _arr1 = _array1(ymin, ymax);\n-  Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n+  Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _array1(ymin, ymax)};\n   return arr2;\n }\n \n // # непосредственный расчет положения Луны\n@@ -143,31 +142,31 @@\n \n     J = 2;\n     // ex1[J][I] = ex1[J - 1][1];\n     // print(ex1[2]);\n-    ex2.update(-6, (value) {\n-      return value..[1] = 99;\n-    });\n-    ex1[-6] = ex2[-6];\n+    // ex2.update(-6, (value) {\n+    //   return value..[1] = 99;\n+    // });\n+    // ex1[-6] = ex2[-6];\n     // ex[-6] = ex3[-6];\n     // print(ex[4]);\n \n-    // J = 2;\n-    // while (J <= max) {\n-    //   // ex.update(J, (value) {\n-    //   //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n-    //   // }); // одинаковы с нижним\n-    //   ex[J][I] = ex2[J - 1][I] * ex2[1][I];\n-    //   // print(I);\n-    //   J += 1;\n-    // }\n+    J = 2;\n+    while (J <= max) {\n+      // ex.update(J, (value) {\n+      //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n+      // }); // одинаковы с нижним\n+      ex[J][I] = ex[J - 1][I] * ex[1][I];\n+      // print(I);\n+      J += 1;\n+    }\n \n-    // J = 1;\n-    // while (J <= max) {\n-    //   Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n-    //   ex[-J][I] = r;\n-    //   J += 1;\n-    // }\n+    J = 1;\n+    while (J <= max) {\n+      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      ex[-J][I] = r;\n+      J += 1;\n+    }\n     I++;\n   }\n   print(ex1);\n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n"
                },
                {
                    "date": 1642748753136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,13 +129,13 @@\n \n     ex2.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n-    ex1[0] = ex2[0];\n+    ex[0] = ex2[0];\n     ex3.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n-    ex1[1] = ex3[1];\n+    ex[1] = ex3[1];\n     ex2 = ex1;\n     ex3 = ex1;\n \n     print('');\n"
                },
                {
                    "date": 1642748880434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,32 +126,22 @@\n     //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n     // ex[a][b][c]   ex[a][I]) = 0j\n     // ex.update(-6, (value) => Complex(0, 2));\n \n-    ex2.update(0, (value) {\n+    ex.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n     }); // !\n-    ex[0] = ex2[0];\n-    ex3.update(1, (value) {\n+    // ex[0] = ex2[0];\n+    ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     }); // !\n-    ex[1] = ex3[1];\n-    ex2 = ex1;\n-    ex3 = ex1;\n+    // ex[1] = ex3[1];\n+    // ex2 = ex1;\n+    // ex3 = ex1;\n \n     print('');\n \n     J = 2;\n-    // ex1[J][I] = ex1[J - 1][1];\n-    // print(ex1[2]);\n-    // ex2.update(-6, (value) {\n-    //   return value..[1] = 99;\n-    // });\n-    // ex1[-6] = ex2[-6];\n-    // ex[-6] = ex3[-6];\n-    // print(ex[4]);\n-\n-    J = 2;\n     while (J <= max) {\n       // ex.update(J, (value) {\n       //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n       // }); // одинаковы с нижним\n"
                },
                {
                    "date": 1642749118832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,11 +53,8 @@\n dynamic calcMoon(time) {\n   double T = time / 36525;\n \n   Map ex = _array2(-6, 6, 1, 4); // правильно\n-  Map ex1 = _array2(-6, 6, 1, 4);\n-  Map ex2 = _array2(-6, 6, 1, 4);\n-  Map ex3 = _array2(-6, 6, 1, 4);\n \n   double sine(double phi) => sin(_pi2 * phi);\n   double frac(double x) => x - x.floor();\n \n@@ -122,30 +119,20 @@\n       arg = D;\n       max = 6;\n       fac = 1.0;\n     }\n-    //[a - ключ -6:+6] [b - {1: 0j, 2: 0j, 3: 0j, 4: 0j}] [c - 0j]\n-    // ex[a][b][c]   ex[a][I]) = 0j\n-    // ex.update(-6, (value) => Complex(0, 2));\n \n     ex.update(0, (value) {\n       return value..[I] = Complex(1, 0);\n-    }); // !\n-    // ex[0] = ex2[0];\n+    });\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n-    }); // !\n-    // ex[1] = ex3[1];\n-    // ex2 = ex1;\n-    // ex3 = ex1;\n+    });\n \n     print('');\n \n     J = 2;\n     while (J <= max) {\n-      // ex.update(J, (value) {\n-      //   return value..[I] = ex2[J - 1][I] * ex2[1][I];\n-      // }); // одинаковы с нижним\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       // print(I);\n       J += 1;\n     }\n@@ -157,9 +144,9 @@\n       J += 1;\n     }\n     I++;\n   }\n-  print(ex1);\n+\n   var _vars = vars(ex, dlam, ds, gam1c, sinpi);\n   dlam = _vars[0];\n   ds = _vars[1];\n   gam1c = _vars[2];\n"
                },
                {
                    "date": 1642749156421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    print('');\n+    print(ex[1]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642749224121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    print(ex[1]);\n+    print(ex[0][1]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642749284177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,14 +127,14 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    print(ex[0][1]);\n+    // print(ex[0][1]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      // print(I);\n+      print(ex[J][I]);\n       J += 1;\n     }\n \n     J = 1;\n"
                },
                {
                    "date": 1642749383262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,16 +132,16 @@\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n-      print(ex[J][I]);\n       J += 1;\n     }\n \n     J = 1;\n     while (J <= max) {\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[-J][I] = r;\n+      print(ex[-J][I]);\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642749489836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,11 +137,12 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n+      print(ex[J][I]);\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[-J][I] = r;\n-      print(ex[-J][I]);\n+      // print(ex[-J][I]);\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642749605073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,12 +137,12 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      print(ex[J][I]);\n+      // print(ex[J][I]);\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[-J][I] = r;\n-      // print(ex[-J][I]);\n+      print(ex[-J][I]);\n       J += 1;\n     }\n     I++;\n   }\n"
                },
                {
                    "date": 1642749678918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,8 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      // print(ex[J][I]);\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[-J][I] = r;\n       print(ex[-J][I]);\n       J += 1;\n"
                },
                {
                    "date": 1642749866745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    // print(ex[0][1]);\n+    print(ex[0]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n@@ -139,9 +139,9 @@\n     J = 1;\n     while (J <= max) {\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[-J][I] = r;\n-      print(ex[-J][I]);\n+      // print(ex[-J][I]);\n       J += 1;\n     }\n     I++;\n   }\n@@ -151,12 +151,8 @@\n   ds = _vars[1];\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n \n-  // print(z);\n-  // print(dlam);\n-  // print(ex);\n-\n   double N = -477.8936;\n \n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n@@ -180,9 +176,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n \n-  print('dlam $dlam');\n+  print('dlam $dlam arc $arc N $N');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642749927240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    print(ex[0]);\n+    print(ex[-6]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642749952346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    print(ex[-6]);\n+    print(ex[-5]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642750014677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    print(ex[-5]);\n+    print(ex[-4]);\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n@@ -175,9 +175,9 @@\n   // dlam = -26560.02894438416;\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n-\n+  print('');\n   print('dlam $dlam arc $arc N $N');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n"
                },
                {
                    "date": 1642750179075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,10 +151,28 @@\n   ds = _vars[1];\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n \n-  double N = -477.8936;\n+  // double N = -477.8936;\n+  double addn(coeffn, p, q, r, s) {\n+    Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n+    print(r.imaginary);\n+    print(ex[p][1]);\n+    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n+  }\n \n+  double N = 0;\n+  N += addn(-526.069, 0, 0, 1, -2);\n+  N += addn(-3.352, 0, 0, 1, -4);\n+  N += addn(44.297, 1, 0, 1, -2);\n+  N += addn(-6.000, 1, 0, 1, -4);\n+  N += addn(20.599, -1, 0, 1, 0);\n+  N += addn(-30.598, -1, 0, 1, -2);\n+  N += addn(-24.649, -2, 0, 1, 0);\n+  N += addn(-2.000, -2, 0, 1, -2);\n+  N += addn(-22.571, 0, 1, 1, -2);\n+  N += addn(10.985, 0, -1, 1, -2);\n+\n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n       0.35 * sine(0.5785 - 25.1042 * T) +\n       0.66 * sine(0.4591 + 1335.8075 * T) +\n"
                },
                {
                    "date": 1642750219463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,26 +152,26 @@\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n \n   // double N = -477.8936;\n-  double addn(coeffn, p, q, r, s) {\n-    Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n-    print(r.imaginary);\n-    print(ex[p][1]);\n-    return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n-  }\n+  // double addn(coeffn, p, q, r, s) {\n+  //   Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n+  //   print(r.imaginary);\n+  //   print(ex[p][1]);\n+  //   return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n+  // }\n \n   double N = 0;\n-  N += addn(-526.069, 0, 0, 1, -2);\n-  N += addn(-3.352, 0, 0, 1, -4);\n-  N += addn(44.297, 1, 0, 1, -2);\n-  N += addn(-6.000, 1, 0, 1, -4);\n-  N += addn(20.599, -1, 0, 1, 0);\n-  N += addn(-30.598, -1, 0, 1, -2);\n-  N += addn(-24.649, -2, 0, 1, 0);\n-  N += addn(-2.000, -2, 0, 1, -2);\n-  N += addn(-22.571, 0, 1, 1, -2);\n-  N += addn(10.985, 0, -1, 1, -2);\n+  // N += addn(-526.069, 0, 0, 1, -2);\n+  // N += addn(-3.352, 0, 0, 1, -4);\n+  // N += addn(44.297, 1, 0, 1, -2);\n+  // N += addn(-6.000, 1, 0, 1, -4);\n+  // N += addn(20.599, -1, 0, 1, 0);\n+  // N += addn(-30.598, -1, 0, 1, -2);\n+  // N += addn(-24.649, -2, 0, 1, 0);\n+  // N += addn(-2.000, -2, 0, 1, -2);\n+  // N += addn(-22.571, 0, 1, 1, -2);\n+  // N += addn(10.985, 0, -1, 1, -2);\n \n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n       0.35 * sine(0.5785 - 25.1042 * T) +\n"
                },
                {
                    "date": 1642750250405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,17 +151,17 @@\n   ds = _vars[1];\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n \n-  // double N = -477.8936;\n+  double N = -477.8936;\n   // double addn(coeffn, p, q, r, s) {\n   //   Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n   //   print(r.imaginary);\n   //   print(ex[p][1]);\n   //   return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   // }\n \n-  double N = 0;\n+  // double N = 0;\n   // N += addn(-526.069, 0, 0, 1, -2);\n   // N += addn(-3.352, 0, 0, 1, -4);\n   // N += addn(44.297, 1, 0, 1, -2);\n   // N += addn(-6.000, 1, 0, 1, -4);\n"
                },
                {
                    "date": 1642750327805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,17 +151,17 @@\n   ds = _vars[1];\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n \n-  double N = -477.8936;\n+  // double N = -477.8936;\n   // double addn(coeffn, p, q, r, s) {\n   //   Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n   //   print(r.imaginary);\n   //   print(ex[p][1]);\n   //   return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n   // }\n \n-  // double N = 0;\n+  double N = 0;\n   // N += addn(-526.069, 0, 0, 1, -2);\n   // N += addn(-3.352, 0, 0, 1, -4);\n   // N += addn(44.297, 1, 0, 1, -2);\n   // N += addn(-6.000, 1, 0, 1, -4);\n@@ -194,9 +194,9 @@\n   // arc = 206264.80624709636;\n   // latSeconds = -8727.275114246811;\n // -477.8936 -26560.0289 206264.8062 -8727.27511 //\n   print('');\n-  print('dlam $dlam arc $arc N $N');\n+  print('dlam $dlam arc $arc N $N latSeconds $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642750424038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,28 +151,8 @@\n   ds = _vars[1];\n   gam1c = _vars[2];\n   sinpi = _vars[3];\n \n-  // double N = -477.8936;\n-  // double addn(coeffn, p, q, r, s) {\n-  //   Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n-  //   print(r.imaginary);\n-  //   print(ex[p][1]);\n-  //   return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n-  // }\n-\n-  double N = 0;\n-  // N += addn(-526.069, 0, 0, 1, -2);\n-  // N += addn(-3.352, 0, 0, 1, -4);\n-  // N += addn(44.297, 1, 0, 1, -2);\n-  // N += addn(-6.000, 1, 0, 1, -4);\n-  // N += addn(20.599, -1, 0, 1, 0);\n-  // N += addn(-30.598, -1, 0, 1, -2);\n-  // N += addn(-24.649, -2, 0, 1, 0);\n-  // N += addn(-2.000, -2, 0, 1, -2);\n-  // N += addn(-22.571, 0, 1, 1, -2);\n-  // N += addn(10.985, 0, -1, 1, -2);\n-\n   dlam += (0.82 * sine(0.7736 - 62.5512 * T) +\n       0.31 * sine(0.0466 - 125.1025 * T) +\n       0.35 * sine(0.5785 - 25.1042 * T) +\n       0.66 * sine(0.4591 + 1335.8075 * T) +\n@@ -183,20 +163,17 @@\n       0.24 * sine(0.2275 - 5.7374 * T) +\n       0.28 * sine(0.2965 + 2.6929 * T) +\n       0.33 * sine(0.3132 + 6.3368 * T));\n \n-  var S = F + ds / arc;\n-  var latSeconds =\n+  double S = F + ds / arc;\n+  double N = 0;\n+  double latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-  // dlam -= 8440;\n-  // dlam = -26560.02894438416;\n-  // arc = 206264.80624709636;\n-  // latSeconds = -8727.275114246811;\n-// -477.8936 -26560.0289 206264.8062 -8727.27511 //\n+\n   print('');\n-  print('dlam $dlam arc $arc N $N latSeconds $latSeconds');\n+  print('dlam $dlam arc $arc latSeconds $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642763159479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    print(ex[-4]);\n+    print(fac * cos(arg));\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642763241062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,10 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    print(fac * cos(arg));\n+    // print(fac * cos(arg));\n+    print('$fac $arg');\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642763427069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,10 @@\n   int I = 1;\n   int max, J;\n   double arg, fac;\n \n+  print('$L $ls $F $dgam');\n+\n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n       max = 4;\n@@ -128,9 +130,9 @@\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n     // print(fac * cos(arg));\n-    print('$fac $arg');\n+    // print('$fac $arg');\n \n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n"
                },
                {
                    "date": 1642763504596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n   int I = 1;\n   int max, J;\n   double arg, fac;\n \n-  print('$L $ls $F $dgam');\n+  print('$L $ls $F $dgam $D');\n \n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n"
                },
                {
                    "date": 1642763807883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,10 @@\n   int max, J;\n   double arg, fac;\n \n   print('$L $ls $F $dgam $D');\n+  print('');\n+  print('$L $ls $F $dgam $D');\n \n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n"
                },
                {
                    "date": 1642763886831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,11 +100,12 @@\n \n   int I = 1;\n   int max, J;\n   double arg, fac;\n-\n-  print('$L $ls $F $dgam $D');\n+  print('T dl0 dl dls df dd');\n+  print('$T $dl0 $dl $dls $df $dd');\n   print('');\n+  print('L ls F dgam D');\n   print('$L $ls $F $dgam $D');\n \n   while (I <= 4) {\n     if (I == 1) {\n"
                },
                {
                    "date": 1642764092402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,9 @@\n   double dlam = 0;\n   double ds = 0;\n   double gam1c = 0;\n   double sinpi = 3422.7000;\n+  T = -0.22597663702816398;\n   double s1 = sine(0.19833 + 0.05611 * T);\n   double s2 = sine(0.27869 + 0.04508 * T);\n   double s3 = sine(0.16827 - 0.36903 * T);\n   double s4 = sine(0.34734 - 5.37261 * T);\n"
                },
                {
                    "date": 1642764190407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n       0.28 * sine(0.2965 + 2.6929 * T) +\n       0.33 * sine(0.3132 + 6.3368 * T));\n \n   double S = F + ds / arc;\n-  double N = 0;\n+  double N = -477.8936062038722;\n   double latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n"
                },
                {
                    "date": 1642764229398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n       0.28 * sine(0.2965 + 2.6929 * T) +\n       0.33 * sine(0.3132 + 6.3368 * T));\n \n   double S = F + ds / arc;\n-  double N = -477.8936062038722;\n+  double N = 0;\n   double latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n"
                },
                {
                    "date": 1642764259987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n   double latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-\n+  latSeconds = -8727.275114246811;\n   print('');\n   print('dlam $dlam arc $arc latSeconds $latSeconds');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n"
                },
                {
                    "date": 1642764518101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,8 +179,10 @@\n           N;\n   latSeconds = -8727.275114246811;\n   print('');\n   print('dlam $dlam arc $arc latSeconds $latSeconds');\n+  print('');\n+  print('pi2 * frac((l0 + dlam / arc) / pi2)');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642764533449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n   latSeconds = -8727.275114246811;\n   print('');\n   print('dlam $dlam arc $arc latSeconds $latSeconds');\n   print('');\n-  print('pi2 * frac((l0 + dlam / arc) / pi2)');\n+  print(pi2 * frac((l0 + dlam / arc) / pi2));\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642764557653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n   double latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-  latSeconds = -8727.275114246811;\n+  // latSeconds = -8727.275114246811;\n   print('');\n   print('dlam $dlam arc $arc latSeconds $latSeconds');\n   print('');\n   print(pi2 * frac((l0 + dlam / arc) / pi2));\n"
                },
                {
                    "date": 1642764632491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n   double dlam = 0;\n   double ds = 0;\n   double gam1c = 0;\n   double sinpi = 3422.7000;\n-  T = -0.22597663702816398;\n+  // T = -0.22597663702816398;\n   double s1 = sine(0.19833 + 0.05611 * T);\n   double s2 = sine(0.27869 + 0.04508 * T);\n   double s3 = sine(0.16827 - 0.36903 * T);\n   double s4 = sine(0.34734 - 5.37261 * T);\n"
                },
                {
                    "date": 1642764699290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,13 +101,13 @@\n \n   int I = 1;\n   int max, J;\n   double arg, fac;\n-  print('T dl0 dl dls df dd');\n-  print('$T $dl0 $dl $dls $df $dd');\n-  print('');\n-  print('L ls F dgam D');\n-  print('$L $ls $F $dgam $D');\n+  // print('T dl0 dl dls df dd');\n+  // print('$T $dl0 $dl $dls $df $dd');\n+  // print('');\n+  // print('L ls F dgam D');\n+  // print('$L $ls $F $dgam $D');\n \n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n@@ -176,12 +176,12 @@\n   double latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n-  // latSeconds = -8727.275114246811;\n+\n+  // print('');\n+  // print('dlam $dlam arc $arc latSeconds $latSeconds');\n   print('');\n-  print('dlam $dlam arc $arc latSeconds $latSeconds');\n-  print('');\n   print(pi2 * frac((l0 + dlam / arc) / pi2));\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n"
                },
                {
                    "date": 1642764833080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n+  print(T);\n \n   Map ex = _array2(-6, 6, 1, 4); // правильно\n \n   double sine(double phi) => sin(_pi2 * phi);\n"
                },
                {
                    "date": 1642764902929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n   print(T);\n+  // T = -0.22597663702816398;\n \n   Map ex = _array2(-6, 6, 1, 4); // правильно\n \n   double sine(double phi) => sin(_pi2 * phi);\n@@ -63,9 +64,9 @@\n   double dlam = 0;\n   double ds = 0;\n   double gam1c = 0;\n   double sinpi = 3422.7000;\n-  // T = -0.22597663702816398;\n+\n   double s1 = sine(0.19833 + 0.05611 * T);\n   double s2 = sine(0.27869 + 0.04508 * T);\n   double s3 = sine(0.16827 - 0.36903 * T);\n   double s4 = sine(0.34734 - 5.37261 * T);\n@@ -180,10 +181,10 @@\n           N;\n \n   // print('');\n   // print('dlam $dlam arc $arc latSeconds $latSeconds');\n+  print(pi2 * frac((l0 + dlam / arc) / pi2));\n   print('');\n-  print(pi2 * frac((l0 + dlam / arc) / pi2));\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642769407583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,13 +103,8 @@\n \n   int I = 1;\n   int max, J;\n   double arg, fac;\n-  // print('T dl0 dl dls df dd');\n-  // print('$T $dl0 $dl $dls $df $dd');\n-  // print('');\n-  // print('L ls F dgam D');\n-  // print('$L $ls $F $dgam $D');\n \n   while (I <= 4) {\n     if (I == 1) {\n       arg = L;\n@@ -135,11 +130,8 @@\n     ex.update(1, (value) {\n       return value..[I] = Complex(fac * cos(arg), fac * sin(arg));\n     });\n \n-    // print(fac * cos(arg));\n-    // print('$fac $arg');\n-\n     J = 2;\n     while (J <= max) {\n       ex[J][I] = ex[J - 1][I] * ex[1][I];\n       J += 1;\n@@ -148,9 +140,8 @@\n     J = 1;\n     while (J <= max) {\n       Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n       ex[-J][I] = r;\n-      // print(ex[-J][I]);\n       J += 1;\n     }\n     I++;\n   }\n@@ -179,33 +170,11 @@\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n \n-  // print('');\n-  // print('dlam $dlam arc $arc latSeconds $latSeconds');\n   print(pi2 * frac((l0 + dlam / arc) / pi2));\n   print('');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n }\n-\n-\n-// void addn(coeffn, p, q, r, s) {\n-//   Complex r = Complex.conjugate(ex[p][1], ex[p][1]);\n-//   print(r.imaginary);\n-//   print(ex[p][1]);\n-//   return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]); //.imaginery\n-// }\n-  // double N = 0;\n-  // N += addn(-526.069, 0, 0, 1, -2);\n-  // N += addn(-3.352, 0, 0, 1, -4);\n-  // N += addn(44.297, 1, 0, 1, -2);\n-  // N += addn(-6.000, 1, 0, 1, -4);\n-  // N += addn(20.599, -1, 0, 1, 0);\n-  // N += addn(-30.598, -1, 0, 1, -2);\n-  // N += addn(-24.649, -2, 0, 1, 0);\n-  // N += addn(-2.000, -2, 0, 1, -2);\n-  // N += addn(-22.571, 0, 1, 1, -2);\n-  // N += addn(10.985, 0, -1, 1, -2);\n-\n"
                },
                {
                    "date": 1642769494663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,10 @@\n \n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n \n-  return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n-  // , degrees(m.geo_eclip_lon)\n+  // return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n+  return degrees(gepos[1])\n }\n \n Map _array1(int xmin, int xmax) {\n   Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n"
                },
                {
                    "date": 1642769543867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n-Vector geoMoon(time) {\n+double geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n   MoonPos m0 = calcMoon(time);\n   // print(m0.lon);\n \n@@ -35,9 +35,9 @@\n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n \n   // return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n-  return degrees(gepos[1])\n+  return deg360(gepos[1]);\n }\n \n Map _array1(int xmin, int xmax) {\n   Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n"
                },
                {
                    "date": 1642769632657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n \n   // return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n-  return deg360(gepos[1]);\n+  return deg360(gepos[0]);\n }\n \n Map _array1(int xmin, int xmax) {\n   Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n"
                },
                {
                    "date": 1642769644147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n \n   // return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n-  return deg360(gepos[0]);\n+  return deg360(gepos[2]);\n }\n \n Map _array1(int xmin, int xmax) {\n   Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n"
                },
                {
                    "date": 1642769752587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n-double geoMoon(time) {\n+Vector geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n   MoonPos m0 = calcMoon(time);\n   // print(m0.lon);\n \n@@ -33,11 +33,12 @@\n   var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n+  print(deg360(gepos[2]));\n \n-  // return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n-  return deg360(gepos[2]);\n+  return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n+  // , degrees(m.geo_eclip_lon)\n }\n \n Map _array1(int xmin, int xmax) {\n   Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n"
                },
                {
                    "date": 1642769816431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n-  print(deg360(gepos[2]));\n+  print(deg360(m0.lon));\n \n   return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n   // , degrees(m.geo_eclip_lon)\n }\n"
                },
                {
                    "date": 1642769863300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,8 @@\n \n // # непосредственный расчет положения Луны\n dynamic calcMoon(time) {\n   double T = time / 36525;\n-  print(T);\n-  // T = -0.22597663702816398;\n \n   Map ex = _array2(-6, 6, 1, 4); // правильно\n \n   double sine(double phi) => sin(_pi2 * phi);\n@@ -171,10 +169,10 @@\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n \n-  print(pi2 * frac((l0 + dlam / arc) / pi2));\n-  print('');\n+  // print(pi2 * frac((l0 + dlam / arc) / pi2));\n+  // print('');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642769961486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n-  print(deg360(m0.lon));\n+  print(m0.lon);\n \n   return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n   // , degrees(m.geo_eclip_lon)\n }\n"
                },
                {
                    "date": 1642770285519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n-  print(m0.lon);\n+  print(degrees(m0.lon));\n \n   return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n   // , degrees(m.geo_eclip_lon)\n }\n"
                },
                {
                    "date": 1642770343921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n double _pi2 = 2.0 * pi;\n double _arc = 3600.0 * 180.0 / pi;\n \n-Vector geoMoon(time) {\n+List geoMoon(time) {\n   //Вычисление геоцентрической позиции Луны\n   MoonPos m0 = calcMoon(time);\n   // print(m0.lon);\n \n@@ -35,9 +35,9 @@\n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n   print(degrees(m0.lon));\n \n-  return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n+  return [Vector(mpos2[0], mpos2[1], mpos2[2], time), degrees(m0.lon)];\n   // , degrees(m.geo_eclip_lon)\n }\n \n Map _array1(int xmin, int xmax) {\n"
                },
                {
                    "date": 1642770483706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,8 @@\n   var mpos1 = ecl2equVec(time, gepos);\n \n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n-  print(degrees(m0.lon));\n \n   return [Vector(mpos2[0], mpos2[1], mpos2[2], time), degrees(m0.lon)];\n   // , degrees(m.geo_eclip_lon)\n }\n"
                },
                {
                    "date": 1642827238175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n   // Convert from mean equinox of date to J2000.\n   var mpos2 = precession(mpos1, time, PrecessDir.into2000);\n \n   return [Vector(mpos2[0], mpos2[1], mpos2[2], time), degrees(m0.lon)];\n-  // , degrees(m.geo_eclip_lon)\n }\n \n Map _array1(int xmin, int xmax) {\n   Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n@@ -136,9 +135,10 @@\n     }\n \n     J = 1;\n     while (J <= max) {\n-      Complex r = Complex.conjugate(ex[J][I], ex[J][I]);\n+      Complex r =\n+          Complex.conjugate(ex[J][I], ex[J][I]); // меняет знак в мат.выражении\n       ex[-J][I] = r;\n       J += 1;\n     }\n     I++;\n@@ -168,10 +168,8 @@\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n \n-  // print(pi2 * frac((l0 + dlam / arc) / pi2));\n-  // print('');\n   return MoonPos(\n       pi2 * frac((l0 + dlam / arc) / pi2),\n       pi / (180 * 3600) * latSeconds,\n       (arc * earthEquatorialRadiusAU) / (0.999953253 * sinpi));\n"
                },
                {
                    "date": 1642827258349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n       0.28 * sine(0.2965 + 2.6929 * T) +\n       0.33 * sine(0.3132 + 6.3368 * T));\n \n   double S = F + ds / arc;\n-  double N = 0;\n+  double N = 0; // почти не влияет\n   double latSeconds =\n       (1.000002708 + 139.978 * dgam) * (18518.511 + 1.189 + gam1c) * sin(S) -\n           6.24 * sin(3 * S) +\n           N;\n"
                }
            ],
            "date": 1642138036012,
            "name": "Commit-0",
            "content": "// from math import cos, sin, pi, degrees, radians, floor\n// from vsop.src.classes import Vector, PrecessDir\n// from vsop.src.constants import ARC, EARTH_EQUATORIAL_RADIUS_AU, PI2\n// from vsop.src.func import ecl2equ_vec, precession\nimport 'dart:math';\nimport 'src/classes.dart';\nimport 'src/constants.dart';\nimport 'src/func.dart';\nimport 'src/complex.dart';\n\ndouble _PI2 = 2.0 * pi;\ndouble _ARC = 3600.0 * 180.0 / pi;\n\nVector GeoMoon(time) {\n  //Вычисление геоцентрической позиции Луны\n  var m = CalcMoon(time);\n\n  // Преобразование геоцентрических эклиптических сферических координат в прямоугольные/Cartesian\n  double dist_cos_lat = m.distance_au * cos(m.geo_eclip_lat);\n  List gepos = [\n    dist_cos_lat * cos(m.geo_eclip_lon),\n    dist_cos_lat * sin(m.geo_eclip_lon),\n    m.distance_au * sin(m.geo_eclip_lat)\n  ];\n\n  // Преобразование эклиптических координат в экваториальные'.\n  var mpos1 = ecl2equ_vec(time, gepos);\n\n  // Convert from mean equinox of date to J2000.\n  var mpos2 = precession(mpos1, time, PrecessDir.Into2000);\n\n  return Vector(mpos2[0], mpos2[1], mpos2[2], time);\n  // , degrees(m.geo_eclip_lon)\n}\n\nMap _Array1(int xmin, int xmax) {\n  Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n  return arr1;\n}\n\nMap _Array2(int xmin, int xmax, int ymin, int ymax) {\n  Map _arr1 = _Array1(ymin, ymax);\n  Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n  return arr2;\n}\n\nclass _moonpos {\n  double lon, lat, dist;\n  _moonpos(this.lon, this.lat, this.dist) {\n    var geo_eclip_lon = lon;\n    var geo_eclip_lat = lat;\n    var distance_au = dist;\n  }\n}\n\n// # непосредственный расчет положения Луны\ndynamic CalcMoon(time) {\n  var T = time.tt / 36525;\n  var ex = _Array2(-6, 6, 1, 4);\n  print(ex.runtimeType);\n\n  double Sine(double phi) => sin(_PI2 * phi);\n\n  double Frac(double x) => x - x.floor();\n\n  var T2 = T * T;\n  double DLAM = 0;\n  double DS = 0;\n  double GAM1C = 0;\n  double SINPI = 3422.7000;\n  var S1 = Sine(0.19833 + 0.05611 * T);\n  var S2 = Sine(0.27869 + 0.04508 * T);\n  var S3 = Sine(0.16827 - 0.36903 * T);\n  var S4 = Sine(0.34734 - 5.37261 * T);\n  var S5 = Sine(0.10498 - 5.37899 * T);\n  var S6 = Sine(0.42681 - 0.41855 * T);\n  var S7 = Sine(0.14943 - 5.37511 * T);\n  var DL0 =\n      0.84 * S1 + 0.31 * S2 + 14.27 * S3 + 7.26 * S4 + 0.28 * S5 + 0.24 * S6;\n  var DL =\n      2.94 * S1 + 0.31 * S2 + 14.27 * S3 + 9.34 * S4 + 1.12 * S5 + 0.83 * S6;\n  var DLS = -6.40 * S1 - 1.89 * S6;\n  var DF = 0.21 * S1 +\n      0.31 * S2 +\n      14.27 * S3 -\n      88.70 * S4 -\n      15.30 * S5 +\n      0.24 * S6 -\n      1.86 * S7;\n  var DD = DL0 - DLS;\n  var DGAM = ((-3332E-9 * Sine(0.59734 - 5.37261 * T) -\n      539E-9 * Sine(0.35498 - 5.37899 * T) -\n      64E-9 * Sine(0.39943 - 5.37511 * T)));\n\n  var L0 = _PI2 * Frac(0.60643382 + 1336.85522467 * T - 0.00000313 * T2) +\n      DL0 / _ARC;\n  var L =\n      _PI2 * Frac(0.37489701 + 1325.55240982 * T + 0.00002565 * T2) + DL / _ARC;\n  var LS =\n      _PI2 * Frac(0.99312619 + 99.99735956 * T - 0.00000044 * T2) + DLS / _ARC;\n  var F =\n      _PI2 * Frac(0.25909118 + 1342.22782980 * T - 0.00000892 * T2) + DF / _ARC;\n  var D =\n      _PI2 * Frac(0.82736186 + 1236.85308708 * T - 0.00000397 * T2) + DD / _ARC;\n\n  var I = 1;\n  var ARG, MAX, FAC, J;\n  while (I <= 4) {\n    if (I == 1) {\n      ARG = L;\n      MAX = 4;\n      FAC = 1.000002208;\n    }\n    if (I == 2) {\n      ARG = LS;\n      MAX = 3;\n      FAC = 0.997504612 - 0.002495388 * T;\n    }\n    if (I == 3) {\n      ARG = F;\n      MAX = 4;\n      FAC = 1.000002708 + 139.978 * DGAM;\n    } else {\n      ARG = D;\n      MAX = 6;\n      FAC = 1.0;\n    }\n\n    // var ex[0][I] = complex(1, 0);\n    // var ex[1][I] = complex(FAC * cos(ARG), FAC * sin(ARG));\n\n    J = 2;\n    while (J <= MAX) {\n      ex[J][I] = ex[J - 1][I] * ex[1][I];\n      J += 1;\n    }\n\n    J = 1;\n    while (J <= MAX) {\n      ex[-J][I] = ex[J][I].conjugate();\n      J += 1;\n    }\n\n    I++;\n  }\n\n// AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n  var z = ex[4][4];\n  DLAM += 13.902 * z.imag;\n//     DS    += 14.06 * z.imag\n//     GAM1C += -0.001 * z.real\n//     SINPI += 0.2607 * z.real\n\n//     # AddSol(0.403000, -4.010000, 0.394000, 0.002300, 0.000000, 0.000000, 0.000000, 3.000000)\n//     z = ex[3][4]\n//     DLAM  += 0.403 * z.imag\n//     DS    += -4.01 * z.imag\n//     GAM1C += 0.394 * z.real\n//     SINPI += 0.0023 * z.real\n\n//     # AddSol(2369.912000, 2373.360000, 0.601000, 28.233300, 0.000000, 0.000000, 0.000000, 2.000000)\n//     z = ex[2][4]\n//     DLAM  += 2369.912 * z.imag\n//     DS    += 2373.36 * z.imag\n//     GAM1C += 0.601 * z.real\n//     SINPI += 28.2333 * z.real\n\n//     # AddSol(-125.154000, -112.790000, -0.725000, -0.978100, 0.000000, 0.000000, 0.000000, 1.000000)\n//     z = ex[1][4]\n//     DLAM  += -125.154 * z.imag\n//     DS    += -112.79 * z.imag\n//     GAM1C += -0.725 * z.real\n//     SINPI += -0.9781 * z.real\n\n//     # AddSol(1.979000, 6.980000, -0.445000, 0.043300, 1.000000, 0.000000, 0.000000, 4.000000)\n//     z = ex[1][1] * ex[4][4]\n//     DLAM  += 1.979 * z.imag\n//     DS    += 6.98 * z.imag\n//     GAM1C += -0.445 * z.real\n//     SINPI += 0.0433 * z.real\n\n//     # AddSol(191.953000, 192.720000, 0.029000, 3.086100, 1.000000, 0.000000, 0.000000, 2.000000)\n//     z = ex[1][1] * ex[2][4]\n//     DLAM  += 191.953 * z.imag\n//     DS    += 192.72 * z.imag\n//     GAM1C += 0.029 * z.real\n//     SINPI += 3.0861 * z.real\n\n//     # AddSol(-8.466000, -13.510000, 0.455000, -0.109300, 1.000000, 0.000000, 0.000000, 1.000000)\n//     z = ex[1][1] * ex[1][4]\n//     DLAM  += -8.466 * z.imag\n//     DS    += -13.51 * z.imag\n//     GAM1C += 0.455 * z.real\n//     SINPI += -0.1093 * z.real\n\n//     # AddSol(22639.500000, 22609.070000, 0.079000, 186.539800, 1.000000, 0.000000, 0.000000, 0.000000)\n//     z = ex[1][1]\n//     DLAM  += 22639.500 * z.imag\n//     DS    += 22609.07 * z.imag\n//     GAM1C += 0.079 * z.real\n//     SINPI += 186.5398 * z.real\n\n//     # AddSol(18.609000, 3.590000, -0.094000, 0.011800, 1.000000, 0.000000, 0.000000, -1.000000)\n//     z = ex[1][1] * ex[-1][4]\n//     DLAM  += 18.609 * z.imag\n//     DS    += 3.59 * z.imag\n//     GAM1C += -0.094 * z.real\n//     SINPI += 0.0118 * z.real\n\n//     # AddSol(-4586.465000, -4578.130000, -0.077000, 34.311700, 1.000000, 0.000000, 0.000000, -2.000000)\n//     z = ex[1][1] * ex[-2][4]\n//     DLAM  += -4586.465 * z.imag\n//     DS    += -4578.13 * z.imag\n//     GAM1C += -0.077 * z.real\n//     SINPI += 34.3117 * z.real\n\n//     # AddSol(3.215000, 5.440000, 0.192000, -0.038600, 1.000000, 0.000000, 0.000000, -3.000000)\n//     z = ex[1][1] * ex[-3][4]\n//     DLAM  += 3.215 * z.imag\n//     DS    += 5.44 * z.imag\n//     GAM1C += 0.192 * z.real\n//     SINPI += -0.0386 * z.real\n\n//     # AddSol(-38.428000, -38.640000, 0.001000, 0.600800, 1.000000, 0.000000, 0.000000, -4.000000)\n//     z = ex[1][1] * ex[-4][4]\n//     DLAM  += -38.428 * z.imag\n//     DS    += -38.64 * z.imag\n//     GAM1C += 0.001 * z.real\n//     SINPI += 0.6008 * z.real\n\n//     # AddSol(-0.393000, -1.430000, -0.092000, 0.008600, 1.000000, 0.000000, 0.000000, -6.000000)\n//     z = ex[1][1] * ex[-6][4]\n//     DLAM  += -0.393 * z.imag\n//     DS    += -1.43 * z.imag\n//     GAM1C += -0.092 * z.real\n//     SINPI += 0.0086 * z.real\n\n//     # AddSol(-0.289000, -1.590000, 0.123000, -0.005300, 0.000000, 1.000000, 0.000000, 4.000000)\n//     z = ex[1][2] * ex[4][4]\n//     DLAM  += -0.289 * z.imag\n//     DS    += -1.59 * z.imag\n//     GAM1C += 0.123 * z.real\n//     SINPI += -0.0053 * z.real\n\n//     # AddSol(-24.420000, -25.100000, 0.040000, -0.300000, 0.000000, 1.000000, 0.000000, 2.000000)\n//     z = ex[1][2] * ex[2][4]\n//     DLAM  += -24.420 * z.imag\n//     DS    += -25.10 * z.imag\n//     GAM1C += 0.040 * z.real\n//     SINPI += -0.3000 * z.real\n\n//     # AddSol(18.023000, 17.930000, 0.007000, 0.149400, 0.000000, 1.000000, 0.000000, 1.000000)\n//     z = ex[1][2] * ex[1][4]\n//     DLAM  += 18.023 * z.imag\n//     DS    += 17.93 * z.imag\n//     GAM1C += 0.007 * z.real\n//     SINPI += 0.1494 * z.real\n\n//     # AddSol(-668.146000, -126.980000, -1.302000, -0.399700, 0.000000, 1.000000, 0.000000, 0.000000)\n//     z = ex[1][2]\n//     DLAM  += -668.146 * z.imag\n//     DS    += -126.98 * z.imag\n//     GAM1C += -1.302 * z.real\n//     SINPI += -0.3997 * z.real\n\n//     # AddSol(0.560000, 0.320000, -0.001000, -0.003700, 0.000000, 1.000000, 0.000000, -1.000000)\n//     z = ex[1][2] * ex[-1][4]\n//     DLAM  += 0.560 * z.imag\n//     DS    += 0.32 * z.imag\n//     GAM1C += -0.001 * z.real\n//     SINPI += -0.0037 * z.real\n\n//     # AddSol(-165.145000, -165.060000, 0.054000, 1.917800, 0.000000, 1.000000, 0.000000, -2.000000)\n//     z = ex[1][2] * ex[-2][4]\n//     DLAM  += -165.145 * z.imag\n//     DS    += -165.06 * z.imag\n//     GAM1C += 0.054 * z.real\n//     SINPI += 1.9178 * z.real\n\n//     # AddSol(-1.877000, -6.460000, -0.416000, 0.033900, 0.000000, 1.000000, 0.000000, -4.000000)\n//     z = ex[1][2] * ex[-4][4]\n//     DLAM  += -1.877 * z.imag\n//     DS    += -6.46 * z.imag\n//     GAM1C += -0.416 * z.real\n//     SINPI += 0.0339 * z.real\n\n//     # AddSol(0.213000, 1.020000, -0.074000, 0.005400, 2.000000, 0.000000, 0.000000, 4.000000)\n//     z = ex[2][1] * ex[4][4]\n//     DLAM  += 0.213 * z.imag\n//     DS    += 1.02 * z.imag\n//     GAM1C += -0.074 * z.real\n//     SINPI += 0.0054 * z.real\n\n//     # AddSol(14.387000, 14.780000, -0.017000, 0.283300, 2.000000, 0.000000, 0.000000, 2.000000)\n//     z = ex[2][1] * ex[2][4]\n//     DLAM  += 14.387 * z.imag\n//     DS    += 14.78 * z.imag\n//     GAM1C += -0.017 * z.real\n//     SINPI += 0.2833 * z.real\n\n//     # AddSol(-0.586000, -1.200000, 0.054000, -0.010000, 2.000000, 0.000000, 0.000000, 1.000000)\n//     z = ex[2][1] * ex[1][4]\n//     DLAM  += -0.586 * z.imag\n//     DS    += -1.20 * z.imag\n//     GAM1C += 0.054 * z.real\n//     SINPI += -0.0100 * z.real\n\n//     # AddSol(769.016000, 767.960000, 0.107000, 10.165700, 2.000000, 0.000000, 0.000000, 0.000000)\n//     z = ex[2][1]\n//     DLAM  += 769.016 * z.imag\n//     DS    += 767.96 * z.imag\n//     GAM1C += 0.107 * z.real\n//     SINPI += 10.1657 * z.real\n\n//     # AddSol(1.750000, 2.010000, -0.018000, 0.015500, 2.000000, 0.000000, 0.000000, -1.000000)\n//     z = ex[2][1] * ex[-1][4]\n//     DLAM  += 1.750 * z.imag\n//     DS    += 2.01 * z.imag\n//     GAM1C += -0.018 * z.real\n//     SINPI += 0.0155 * z.real\n\n//     # AddSol(-211.656000, -152.530000, 5.679000, -0.303900, 2.000000, 0.000000, 0.000000, -2.000000)\n//     z = ex[2][1] * ex[-2][4]\n//     DLAM  += -211.656 * z.imag\n//     DS    += -152.53 * z.imag\n//     GAM1C += 5.679 * z.real\n//     SINPI += -0.3039 * z.real\n\n//     # AddSol(1.225000, 0.910000, -0.030000, -0.008800, 2.000000, 0.000000, 0.000000, -3.000000)\n//     z = ex[2][1] * ex[-3][4]\n//     DLAM  += 1.225 * z.imag\n//     DS    += 0.91 * z.imag\n//     GAM1C += -0.030 * z.real\n//     SINPI += -0.0088 * z.real\n\n//     # AddSol(-30.773000, -34.070000, -0.308000, 0.372200, 2.000000, 0.000000, 0.000000, -4.000000)\n//     z = ex[2][1] * ex[-4][4]\n//     DLAM  += -30.773 * z.imag\n//     DS    += -34.07 * z.imag\n//     GAM1C += -0.308 * z.real\n//     SINPI += 0.3722 * z.real\n\n//     # AddSol(-0.570000, -1.400000, -0.074000, 0.010900, 2.000000, 0.000000, 0.000000, -6.000000)\n//     z = ex[2][1] * ex[-6][4]\n//     DLAM  += -0.570 * z.imag\n//     DS    += -1.40 * z.imag\n//     GAM1C += -0.074 * z.real\n//     SINPI += 0.0109 * z.real\n\n//     # AddSol(-2.921000, -11.750000, 0.787000, -0.048400, 1.000000, 1.000000, 0.000000, 2.000000)\n//     z = ex[1][1] * ex[1][2] * ex[2][4]\n//     DLAM  += -2.921 * z.imag\n//     DS    += -11.75 * z.imag\n//     GAM1C += 0.787 * z.real\n//     SINPI += -0.0484 * z.real\n\n//     # AddSol(1.267000, 1.520000, -0.022000, 0.016400, 1.000000, 1.000000, 0.000000, 1.000000)\n//     z = ex[1][1] * ex[1][2] * ex[1][4]\n//     DLAM  += 1.267 * z.imag\n//     DS    += 1.52 * z.imag\n//     GAM1C += -0.022 * z.real\n//     SINPI += 0.0164 * z.real\n\n//     # AddSol(-109.673000, -115.180000, 0.461000, -0.949000, 1.000000, 1.000000, 0.000000, 0.000000)\n//     z = ex[1][1] * ex[1][2]\n//     DLAM  += -109.673 * z.imag\n//     DS    += -115.18 * z.imag\n//     GAM1C += 0.461 * z.real\n//     SINPI += -0.9490 * z.real\n\n//     # AddSol(-205.962000, -182.360000, 2.056000, 1.443700, 1.000000, 1.000000, 0.000000, -2.000000)\n//     z = ex[1][1] * ex[1][2] * ex[-2][4]\n//     DLAM  += -205.962 * z.imag\n//     DS    += -182.36 * z.imag\n//     GAM1C += 2.056 * z.real\n//     SINPI += 1.4437 * z.real\n\n//     # AddSol(0.233000, 0.360000, 0.012000, -0.002500, 1.000000, 1.000000, 0.000000, -3.000000)\n//     z = ex[1][1] * ex[1][2] * ex[-3][4]\n//     DLAM  += 0.233 * z.imag\n//     DS    += 0.36 * z.imag\n//     GAM1C += 0.012 * z.real\n//     SINPI += -0.0025 * z.real\n\n//     # AddSol(-4.391000, -9.660000, -0.471000, 0.067300, 1.000000, 1.000000, 0.000000, -4.000000)\n//     z = ex[1][1] * ex[1][2] * ex[-4][4]\n//     DLAM  += -4.391 * z.imag\n//     DS    += -9.66 * z.imag\n//     GAM1C += -0.471 * z.real\n//     SINPI += 0.0673 * z.real\n\n//     # AddSol(0.283000, 1.530000, -0.111000, 0.006000, 1.000000, -1.000000, 0.000000, 4.000000)\n//     z = ex[1][1] * ex[-1][2] * ex[4][4]\n//     DLAM  += 0.283 * z.imag\n//     DS    += 1.53 * z.imag\n//     GAM1C += -0.111 * z.real\n//     SINPI += 0.0060 * z.real\n\n//     # AddSol(14.577000, 31.700000, -1.540000, 0.230200, 1.000000, -1.000000, 0.000000, 2.000000)\n//     z = ex[1][1] * ex[-1][2] * ex[2][4]\n//     DLAM  += 14.577 * z.imag\n//     DS    += 31.70 * z.imag\n//     GAM1C += -1.540 * z.real\n//     SINPI += 0.2302 * z.real\n\n//     # AddSol(147.687000, 138.760000, 0.679000, 1.152800, 1.000000, -1.000000, 0.000000, 0.000000)\n//     z = ex[1][1] * ex[-1][2]\n//     DLAM  += 147.687 * z.imag\n//     DS    += 138.76 * z.imag\n//     GAM1C += 0.679 * z.real\n//     SINPI += 1.1528 * z.real\n\n//     # AddSol(-1.089000, 0.550000, 0.021000, 0.000000, 1.000000, -1.000000, 0.000000, -1.000000)\n//     z = ex[1][1] * ex[-1][2] * ex[-1][4]\n//     DLAM  += -1.089 * z.imag\n//     DS    += 0.55 * z.imag\n//     GAM1C += 0.021 * z.real\n\n//     # AddSol(28.475000, 23.590000, -0.443000, -0.225700, 1.000000, -1.000000, 0.000000, -2.000000)\n//     z = ex[1][1] * ex[-1][2] * ex[-2][4]\n//     DLAM  += 28.475 * z.imag\n//     DS    += 23.59 * z.imag\n//     GAM1C += -0.443 * z.real\n//     SINPI += -0.2257 * z.real\n\n//     # AddSol(-0.276000, -0.380000, -0.006000, -0.003600, 1.000000, -1.000000, 0.000000, -3.000000)\n//     z = ex[1][1] * ex[-1][2] * ex[-3][4]\n//     DLAM  += -0.276 * z.imag\n//     DS    += -0.38 * z.imag\n//     GAM1C += -0.006 * z.real\n//     SINPI += -0.0036 * z.real\n\n//     # AddSol(0.636000, 2.270000, 0.146000, -0.010200, 1.000000, -1.000000, 0.000000, -4.000000)\n//     z = ex[1][1] * ex[-1][2] * ex[-4][4]\n//     DLAM  += 0.636 * z.imag\n//     DS    += 2.27 * z.imag\n//     GAM1C += 0.146 * z.real\n//     SINPI += -0.0102 * z.real\n\n//     # AddSol(-0.189000, -1.680000, 0.131000, -0.002800, 0.000000, 2.000000, 0.000000, 2.000000)\n//     z = ex[2][2] * ex[2][4]\n//     DLAM  += -0.189 * z.imag\n//     DS    += -1.68 * z.imag\n//     GAM1C += 0.131 * z.real\n//     SINPI += -0.0028 * z.real\n\n//     # AddSol(-7.486000, -0.660000, -0.037000, -0.008600, 0.000000, 2.000000, 0.000000, 0.000000)\n//     z = ex[2][2]\n//     DLAM  += -7.486 * z.imag\n//     DS    += -0.66 * z.imag\n//     GAM1C += -0.037 * z.real\n//     SINPI += -0.0086 * z.real\n\n//     # AddSol(-8.096000, -16.350000, -0.740000, 0.091800, 0.000000, 2.000000, 0.000000, -2.000000)\n//     z = ex[2][2] * ex[-2][4]\n//     DLAM  += -8.096 * z.imag\n//     DS    += -16.35 * z.imag\n//     GAM1C += -0.740 * z.real\n//     SINPI += 0.0918 * z.real\n\n//     # AddSol(-5.741000, -0.040000, 0.000000, -0.000900, 0.000000, 0.000000, 2.000000, 2.000000)\n//     z = ex[2][3] * ex[2][4]\n//     DLAM  += -5.741 * z.imag\n//     DS    += -0.04 * z.imag\n//     SINPI += -0.0009 * z.real\n\n//     # AddSol(0.255000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 2.000000, 1.000000)\n//     z = ex[2][3] * ex[1][4]\n//     DLAM  += 0.255 * z.imag\n\n//     # AddSol(-411.608000, -0.200000, 0.000000, -0.012400, 0.000000, 0.000000, 2.000000, 0.000000)\n//     z = ex[2][3]\n//     DLAM  += -411.608 * z.imag\n//     DS    += -0.20 * z.imag\n//     SINPI += -0.0124 * z.real\n\n//     # AddSol(0.584000, 0.840000, 0.000000, 0.007100, 0.000000, 0.000000, 2.000000, -1.000000)\n//     z = ex[2][3] * ex[-1][4]\n//     DLAM  += 0.584 * z.imag\n//     DS    += 0.84 * z.imag\n//     SINPI += 0.0071 * z.real\n\n//     # AddSol(-55.173000, -52.140000, 0.000000, -0.105200, 0.000000, 0.000000, 2.000000, -2.000000)\n//     z = ex[2][3] * ex[-2][4]\n//     DLAM  += -55.173 * z.imag\n//     DS    += -52.14 * z.imag\n//     SINPI += -0.1052 * z.real\n\n//     # AddSol(0.254000, 0.250000, 0.000000, -0.001700, 0.000000, 0.000000, 2.000000, -3.000000)\n//     z = ex[2][3] * ex[-3][4]\n//     DLAM  += 0.254 * z.imag\n//     DS    += 0.25 * z.imag\n//     SINPI += -0.0017 * z.real\n\n//     # AddSol(0.025000, -1.670000, 0.000000, 0.003100, 0.000000, 0.000000, 2.000000, -4.000000)\n//     z = ex[2][3] * ex[-4][4]\n//     DLAM  += 0.025 * z.imag\n//     DS    += -1.67 * z.imag\n//     SINPI += 0.0031 * z.real\n\n//     # AddSol(1.060000, 2.960000, -0.166000, 0.024300, 3.000000, 0.000000, 0.000000, 2.000000)\n//     z = ex[3][1] * ex[2][4]\n//     DLAM  += 1.060 * z.imag\n//     DS    += 2.96 * z.imag\n//     GAM1C += -0.166 * z.real\n//     SINPI += 0.0243 * z.real\n\n//     # AddSol(36.124000, 50.640000, -1.300000, 0.621500, 3.000000, 0.000000, 0.000000, 0.000000)\n//     z = ex[3][1]\n//     DLAM  += 36.124 * z.imag\n//     DS    += 50.64 * z.imag\n//     GAM1C += -1.300 * z.real\n//     SINPI += 0.6215 * z.real\n\n//     # AddSol(-13.193000, -16.400000, 0.258000, -0.118700, 3.000000, 0.000000, 0.000000, -2.000000)\n//     z = ex[3][1] * ex[-2][4]\n//     DLAM  += -13.193 * z.imag\n//     DS    += -16.40 * z.imag\n//     GAM1C += 0.258 * z.real\n//     SINPI += -0.1187 * z.real\n\n//     # AddSol(-1.187000, -0.740000, 0.042000, 0.007400, 3.000000, 0.000000, 0.000000, -4.000000)\n//     z = ex[3][1] * ex[-4][4]\n//     DLAM  += -1.187 * z.imag\n//     DS    += -0.74 * z.imag\n//     GAM1C += 0.042 * z.real\n//     SINPI += 0.0074 * z.real\n\n//     # AddSol(-0.293000, -0.310000, -0.002000, 0.004600, 3.000000, 0.000000, 0.000000, -6.000000)\n//     z = ex[3][1] * ex[-6][4]\n//     DLAM  += -0.293 * z.imag\n//     DS    += -0.31 * z.imag\n//     GAM1C += -0.002 * z.real\n//     SINPI += 0.0046 * z.real\n\n//     # AddSol(-0.290000, -1.450000, 0.116000, -0.005100, 2.000000, 1.000000, 0.000000, 2.000000)\n//     z = ex[2][1] * ex[1][2] * ex[2][4]\n//     DLAM  += -0.290 * z.imag\n//     DS    += -1.45 * z.imag\n//     GAM1C += 0.116 * z.real\n//     SINPI += -0.0051 * z.real\n\n//     # AddSol(-7.649000, -10.560000, 0.259000, -0.103800, 2.000000, 1.000000, 0.000000, 0.000000)\n//     z = ex[2][1] * ex[1][2]\n//     DLAM  += -7.649 * z.imag\n//     DS    += -10.56 * z.imag\n//     GAM1C += 0.259 * z.real\n//     SINPI += -0.1038 * z.real\n\n//     # AddSol(-8.627000, -7.590000, 0.078000, -0.019200, 2.000000, 1.000000, 0.000000, -2.000000)\n//     z = ex[2][1] * ex[1][2] * ex[-2][4]\n//     DLAM  += -8.627 * z.imag\n//     DS    += -7.59 * z.imag\n//     GAM1C += 0.078 * z.real\n//     SINPI += -0.0192 * z.real\n\n//     # AddSol(-2.740000, -2.540000, 0.022000, 0.032400, 2.000000, 1.000000, 0.000000, -4.000000)\n//     z = ex[2][1] * ex[1][2] * ex[-4][4]\n//     DLAM  += -2.740 * z.imag\n//     DS    += -2.54 * z.imag\n//     GAM1C += 0.022 * z.real\n//     SINPI += 0.0324 * z.real\n\n//     # AddSol(1.181000, 3.320000, -0.212000, 0.021300, 2.000000, -1.000000, 0.000000, 2.000000)\n//     z = ex[2][1] * ex[-1][2] * ex[2][4]\n//     DLAM  += 1.181 * z.imag\n//     DS    += 3.32 * z.imag\n//     GAM1C += -0.212 * z.real\n//     SINPI += 0.0213 * z.real\n\n//     # AddSol(9.703000, 11.670000, -0.151000, 0.126800, 2.000000, -1.000000, 0.000000, 0.000000)\n//     z = ex[2][1] * ex[-1][2]\n//     DLAM  += 9.703 * z.imag\n//     DS    += 11.67 * z.imag\n//     GAM1C += -0.151 * z.real\n//     SINPI += 0.1268 * z.real\n\n//     # AddSol(-0.352000, -0.370000, 0.001000, -0.002800, 2.000000, -1.000000, 0.000000, -1.000000)\n//     z = ex[2][1] * ex[-1][2] * ex[-1][4]\n//     DLAM  += -0.352 * z.imag\n//     DS    += -0.37 * z.imag\n//     GAM1C += 0.001 * z.real\n//     SINPI += -0.0028 * z.real\n\n//     # AddSol(-2.494000, -1.170000, -0.003000, -0.001700, 2.000000, -1.000000, 0.000000, -2.000000)\n//     z = ex[2][1] * ex[-1][2] * ex[-2][4]\n//     DLAM  += -2.494 * z.imag\n//     DS    += -1.17 * z.imag\n//     GAM1C += -0.003 * z.real\n//     SINPI += -0.0017 * z.real\n\n//     # AddSol(0.360000, 0.200000, -0.012000, -0.004300, 2.000000, -1.000000, 0.000000, -4.000000)\n//     z = ex[2][1] * ex[-1][2] * ex[-4][4]\n//     DLAM  += 0.360 * z.imag\n//     DS    += 0.20 * z.imag\n//     GAM1C += -0.012 * z.real\n//     SINPI += -0.0043 * z.real\n\n//     # AddSol(-1.167000, -1.250000, 0.008000, -0.010600, 1.000000, 2.000000, 0.000000, 0.000000)\n//     z = ex[1][1] * ex[2][2]\n//     DLAM  += -1.167 * z.imag\n//     DS    += -1.25 * z.imag\n//     GAM1C += 0.008 * z.real\n//     SINPI += -0.0106 * z.real\n\n//     # AddSol(-7.412000, -6.120000, 0.117000, 0.048400, 1.000000, 2.000000, 0.000000, -2.000000)\n//     z = ex[1][1] * ex[2][2] * ex[-2][4]\n//     DLAM  += -7.412 * z.imag\n//     DS    += -6.12 * z.imag\n//     GAM1C += 0.117 * z.real\n//     SINPI += 0.0484 * z.real\n\n//     # AddSol(-0.311000, -0.650000, -0.032000, 0.004400, 1.000000, 2.000000, 0.000000, -4.000000)\n//     z = ex[1][1] * ex[2][2] * ex[-4][4]\n//     DLAM  += -0.311 * z.imag\n//     DS    += -0.65 * z.imag\n//     GAM1C += -0.032 * z.real\n//     SINPI += 0.0044 * z.real\n\n//     # AddSol(0.757000, 1.820000, -0.105000, 0.011200, 1.000000, -2.000000, 0.000000, 2.000000)\n//     z = ex[1][1] * ex[-2][2] * ex[2][4]\n//     DLAM  += 0.757 * z.imag\n//     DS    += 1.82 * z.imag\n//     GAM1C += -0.105 * z.real\n//     SINPI += 0.0112 * z.real\n\n//     # AddSol(2.580000, 2.320000, 0.027000, 0.019600, 1.000000, -2.000000, 0.000000, 0.000000)\n//     z = ex[1][1] * ex[-2][2]\n//     DLAM  += 2.580 * z.imag\n//     DS    += 2.32 * z.imag\n//     GAM1C += 0.027 * z.real\n//     SINPI += 0.0196 * z.real\n\n//     # AddSol(2.533000, 2.400000, -0.014000, -0.021200, 1.000000, -2.000000, 0.000000, -2.000000)\n//     z = ex[1][1] * ex[-2][2] * ex[-2][4]\n//     DLAM  += 2.533 * z.imag\n//     DS    += 2.40 * z.imag\n//     GAM1C += -0.014 * z.real\n//     SINPI += -0.0212 * z.real\n\n//     # AddSol(-0.344000, -0.570000, -0.025000, 0.003600, 0.000000, 3.000000, 0.000000, -2.000000)\n//     z = ex[3][2] * ex[-2][4]\n//     DLAM  += -0.344 * z.imag\n//     DS    += -0.57 * z.imag\n//     GAM1C += -0.025 * z.real\n//     SINPI += 0.0036 * z.real\n\n//     # AddSol(-0.992000, -0.020000, 0.000000, 0.000000, 1.000000, 0.000000, 2.000000, 2.000000)\n//     z = ex[1][1] * ex[2][3] * ex[2][4]\n//     DLAM  += -0.992 * z.imag\n//     DS    += -0.02 * z.imag\n\n//     # AddSol(-45.099000, -0.020000, 0.000000, -0.001000, 1.000000, 0.000000, 2.000000, 0.000000)\n//     z = ex[1][1] * ex[2][3]\n//     DLAM  += -45.099 * z.imag\n//     DS    += -0.02 * z.imag\n//     SINPI += -0.0010 * z.real\n\n//     # AddSol(-0.179000, -9.520000, 0.000000, -0.083300, 1.000000, 0.000000, 2.000000, -2.000000)\n//     z = ex[1][1] * ex[2][3] * ex[-2][4]\n//     DLAM  += -0.179 * z.imag\n//     DS    += -9.52 * z.imag\n//     SINPI += -0.0833 * z.real\n\n//     # AddSol(-0.301000, -0.330000, 0.000000, 0.001400, 1.000000, 0.000000, 2.000000, -4.000000)\n//     z = ex[1][1] * ex[2][3] * ex[-4][4]\n//     DLAM  += -0.301 * z.imag\n//     DS    += -0.33 * z.imag\n//     SINPI += 0.0014 * z.real\n\n//     # AddSol(-6.382000, -3.370000, 0.000000, -0.048100, 1.000000, 0.000000, -2.000000, 2.000000)\n//     z = ex[1][1] * ex[-2][3] * ex[2][4]\n//     DLAM  += -6.382 * z.imag\n//     DS    += -3.37 * z.imag\n//     SINPI += -0.0481 * z.real\n\n//     # AddSol(39.528000, 85.130000, 0.000000, -0.713600, 1.000000, 0.000000, -2.000000, 0.000000)\n//     z = ex[1][1] * ex[-2][3]\n//     DLAM  += 39.528 * z.imag\n//     DS    += 85.13 * z.imag\n//     SINPI += -0.7136 * z.real\n\n//     # AddSol(9.366000, 0.710000, 0.000000, -0.011200, 1.000000, 0.000000, -2.000000, -2.000000)\n//     z = ex[1][1] * ex[-2][3] * ex[-2][4]\n//     DLAM  += 9.366 * z.imag\n//     DS    += 0.71 * z.imag\n//     SINPI += -0.0112 * z.real\n\n//     # AddSol(0.202000, 0.020000, 0.000000, 0.000000, 1.000000, 0.000000, -2.000000, -4.000000)\n//     z = ex[1][1] * ex[-2][3] * ex[-4][4]\n//     DLAM  += 0.202 * z.imag\n//     DS    += 0.02 * z.imag\n\n//     # AddSol(0.415000, 0.100000, 0.000000, 0.001300, 0.000000, 1.000000, 2.000000, 0.000000)\n//     z = ex[1][2] * ex[2][3]\n//     DLAM  += 0.415 * z.imag\n//     DS    += 0.10 * z.imag\n//     SINPI += 0.0013 * z.real\n\n//     # AddSol(-2.152000, -2.260000, 0.000000, -0.006600, 0.000000, 1.000000, 2.000000, -2.000000)\n//     z = ex[1][2] * ex[2][3] * ex[-2][4]\n//     DLAM  += -2.152 * z.imag\n//     DS    += -2.26 * z.imag\n//     SINPI += -0.0066 * z.real\n\n//     # AddSol(-1.440000, -1.300000, 0.000000, 0.001400, 0.000000, 1.000000, -2.000000, 2.000000)\n//     z = ex[1][2] * ex[-2][3] * ex[2][4]\n//     DLAM  += -1.440 * z.imag\n//     DS    += -1.30 * z.imag\n//     SINPI += 0.0014 * z.real\n\n//     # AddSol(0.384000, -0.040000, 0.000000, 0.000000, 0.000000, 1.000000, -2.000000, -2.000000)\n//     z = ex[1][2] * ex[-2][3] * ex[-2][4]\n//     DLAM  += 0.384 * z.imag\n//     DS    += -0.04 * z.imag\n\n//     # AddSol(1.938000, 3.600000, -0.145000, 0.040100, 4.000000, 0.000000, 0.000000, 0.000000)\n//     z = ex[4][1]\n//     DLAM  += 1.938 * z.imag\n//     DS    += 3.60 * z.imag\n//     GAM1C += -0.145 * z.real\n//     SINPI += 0.0401 * z.real\n\n//     # AddSol(-0.952000, -1.580000, 0.052000, -0.013000, 4.000000, 0.000000, 0.000000, -2.000000)\n//     z = ex[4][1] * ex[-2][4]\n//     DLAM  += -0.952 * z.imag\n//     DS    += -1.58 * z.imag\n//     GAM1C += 0.052 * z.real\n//     SINPI += -0.0130 * z.real\n\n//     # AddSol(-0.551000, -0.940000, 0.032000, -0.009700, 3.000000, 1.000000, 0.000000, 0.000000)\n//     z = ex[3][1] * ex[1][2]\n//     DLAM  += -0.551 * z.imag\n//     DS    += -0.94 * z.imag\n//     GAM1C += 0.032 * z.real\n//     SINPI += -0.0097 * z.real\n\n//     # AddSol(-0.482000, -0.570000, 0.005000, -0.004500, 3.000000, 1.000000, 0.000000, -2.000000)\n//     z = ex[3][1] * ex[1][2] * ex[-2][4]\n//     DLAM  += -0.482 * z.imag\n//     DS    += -0.57 * z.imag\n//     GAM1C += 0.005 * z.real\n//     SINPI += -0.0045 * z.real\n\n//     # AddSol(0.681000, 0.960000, -0.026000, 0.011500, 3.000000, -1.000000, 0.000000, 0.000000)\n//     z = ex[3][1] * ex[-1][2]\n//     DLAM  += 0.681 * z.imag\n//     DS    += 0.96 * z.imag\n//     GAM1C += -0.026 * z.real\n//     SINPI += 0.0115 * z.real\n\n//     # AddSol(-0.297000, -0.270000, 0.002000, -0.000900, 2.000000, 2.000000, 0.000000, -2.000000)\n//     z = ex[2][1] * ex[2][2] * ex[-2][4]\n//     DLAM  += -0.297 * z.imag\n//     DS    += -0.27 * z.imag\n//     GAM1C += 0.002 * z.real\n//     SINPI += -0.0009 * z.real\n\n//     # AddSol(0.254000, 0.210000, -0.003000, 0.000000, 2.000000, -2.000000, 0.000000, -2.000000)\n//     z = ex[2][1] * ex[-2][2] * ex[-2][4]\n//     DLAM  += 0.254 * z.imag\n//     DS    += 0.21 * z.imag\n//     GAM1C += -0.003 * z.real\n\n//     # AddSol(-0.250000, -0.220000, 0.004000, 0.001400, 1.000000, 3.000000, 0.000000, -2.000000)\n//     z = ex[1][1] * ex[3][2] * ex[-2][4]\n//     DLAM  += -0.250 * z.imag\n//     DS    += -0.22 * z.imag\n//     GAM1C += 0.004 * z.real\n//     SINPI += 0.0014 * z.real\n\n//     # AddSol(-3.996000, 0.000000, 0.000000, 0.000400, 2.000000, 0.000000, 2.000000, 0.000000)\n//     z = ex[2][1] * ex[2][3]\n//     DLAM  += -3.996 * z.imag\n//     SINPI += 0.0004 * z.real\n\n//     # AddSol(0.557000, -0.750000, 0.000000, -0.009000, 2.000000, 0.000000, 2.000000, -2.000000)\n//     z = ex[2][1] * ex[2][3] * ex[-2][4]\n//     DLAM  += 0.557 * z.imag\n//     DS    += -0.75 * z.imag\n//     SINPI += -0.0090 * z.real\n\n//     # AddSol(-0.459000, -0.380000, 0.000000, -0.005300, 2.000000, 0.000000, -2.000000, 2.000000)\n//     z = ex[2][1] * ex[-2][3] * ex[2][4]\n//     DLAM  += -0.459 * z.imag\n//     DS    += -0.38 * z.imag\n//     SINPI += -0.0053 * z.real\n\n//     # AddSol(-1.298000, 0.740000, 0.000000, 0.000400, 2.000000, 0.000000, -2.000000, 0.000000)\n//     z = ex[2][1] * ex[-2][3]\n//     DLAM  += -1.298 * z.imag\n//     DS    += 0.74 * z.imag\n//     SINPI += 0.0004 * z.real\n\n//     # AddSol(0.538000, 1.140000, 0.000000, -0.014100, 2.000000, 0.000000, -2.000000, -2.000000)\n//     z = ex[2][1] * ex[-2][3] * ex[-2][4]\n//     DLAM  += 0.538 * z.imag\n//     DS    += 1.14 * z.imag\n//     SINPI += -0.0141 * z.real\n\n//     # AddSol(0.263000, 0.020000, 0.000000, 0.000000, 1.000000, 1.000000, 2.000000, 0.000000)\n//     z = ex[1][1] * ex[1][2] * ex[2][3]\n//     DLAM  += 0.263 * z.imag\n//     DS    += 0.02 * z.imag\n\n//     # AddSol(0.426000, 0.070000, 0.000000, -0.000600, 1.000000, 1.000000, -2.000000, -2.000000)\n//     z = ex[1][1] * ex[1][2] * ex[-2][3] * ex[-2][4]\n//     DLAM  += 0.426 * z.imag\n//     DS    += 0.07 * z.imag\n//     SINPI += -0.0006 * z.real\n\n//     # AddSol(-0.304000, 0.030000, 0.000000, 0.000300, 1.000000, -1.000000, 2.000000, 0.000000)\n//     z = ex[1][1] * ex[-1][2] * ex[2][3]\n//     DLAM  += -0.304 * z.imag\n//     DS    += 0.03 * z.imag\n//     SINPI += 0.0003 * z.real\n\n//     # AddSol(-0.372000, -0.190000, 0.000000, -0.002700, 1.000000, -1.000000, -2.000000, 2.000000)\n//     z = ex[1][1] * ex[-1][2] * ex[-2][3] * ex[2][4]\n//     DLAM  += -0.372 * z.imag\n//     DS    += -0.19 * z.imag\n//     SINPI += -0.0027 * z.real\n\n//     # AddSol(0.418000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 4.000000, 0.000000)\n//     z = ex[4][3]\n//     DLAM  += 0.418 * z.imag\n\n//     # AddSol(-0.330000, -0.040000, 0.000000, 0.000000, 3.000000, 0.000000, 2.000000, 0.000000)\n//     z = ex[3][1] * ex[2][3]\n//     DLAM  += -0.330 * z.imag\n//     DS    += -0.04 * z.imag\n\n//     def ADDN(coeffn, p, q, r, s):\n//         return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag\n\n//     N = 0\n//     N += ADDN(-526.069, 0, 0,1,-2)\n//     N += ADDN(  -3.352, 0, 0,1,-4)\n//     N += ADDN( +44.297,+1, 0,1,-2)\n//     N += ADDN(  -6.000,+1, 0,1,-4)\n//     N += ADDN( +20.599,-1, 0,1, 0)\n//     N += ADDN( -30.598,-1, 0,1,-2)\n//     N += ADDN( -24.649,-2, 0,1, 0)\n//     N += ADDN(  -2.000,-2, 0,1,-2)\n//     N += ADDN( -22.571, 0,+1,1,-2)\n//     N += ADDN( +10.985, 0,-1,1,-2)\n\n//     DLAM += (\n//         +0.82*Sine(0.7736  -62.5512*T)+0.31*Sine(0.0466 -125.1025*T)\n//         +0.35*Sine(0.5785  -25.1042*T)+0.66*Sine(0.4591+1335.8075*T)\n//         +0.64*Sine(0.3130  -91.5680*T)+1.14*Sine(0.1480+1331.2898*T)\n//         +0.21*Sine(0.5918+1056.5859*T)+0.44*Sine(0.5784+1322.8595*T)\n//         +0.24*Sine(0.2275   -5.7374*T)+0.28*Sine(0.2965   +2.6929*T)\n//         +0.33*Sine(0.3132   +6.3368*T)\n//     )\n//     S = F + DS/ARC\n//     lat_seconds = (1.000002708 + 139.978*DGAM)*(18518.511+1.189+GAM1C)*sin(S) - 6.24*sin(3*S) + N\n//     return _moonpos(\n//         PI2 * Frac((L0+DLAM/ARC) / PI2),\n//         (pi / (180 * 3600)) * lat_seconds,\n//         (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n//     )\n}\n"
        }
    ]
}