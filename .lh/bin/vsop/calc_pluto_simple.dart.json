{
    "sourceFile": "bin/vsop/calc_pluto_simple.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1642571044805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642571557055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,49 @@\n \n   return [lonTopos, lonEcl];\n }\n \n+List<double> dataSun(\n+    double N, double i, double a, double w, double e, double M, double d) {\n+// Шаг 1 - вычислить E экцентрическую аномалию\n+// sin/cos выдают в радианах - поэтому сразу конвертировать *pi/180\n+  var _e = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n\\ No newline at end of file\n+  var E = radians(_e);\n \n-/* Примечание \n-все что закомментировал - только потому что мне |пока не требуется| выводить данные\n-LAT RA R DECL\n-*/\n+// Шаг 2 - вычислить прямоугольные координаты солнца в плоскости эклиптики\n+// где x - угол направленный к перигелию\n+  var x = cos(E) - e;\n+  var y = sin(E) * sqrt(1 - e * e);\n+\n+// Шаг 3 - конвертировать в расстояние и истинную аномалию\n+  var r = sqrt(x * x + y * y); //расстояние\n+  var _v = atan2(y, x);\n+  var v = deg_360(degrees(_v)); // -> истинная аномалия в градусах\n+\n+// Шаг 4 (главный) - Теперь подсчитать ГЕОЦЕНТРИКУ !!!\n+// lat = 0 # т.к это само солнце в своей плоскости\n+// R = 0   # т.к это само солнце и расст до солнца = 0\n+  var _lon = v + w;\n+  var _lonEcl = deg_360(_lon);\n+  var lonEcl = deg_360(_lon + 180);\n+  var lonTopos = deg_360(_lon); // по факту = топоцентрике\n+\n+  var xEclip = r * cos(radians(_lonEcl));\n+  var yEclip = r * sin(radians(_lonEcl));\n+\n+  return [lonTopos, lonEcl, xEclip, yEclip];\n+}\n+\n+Map<String, double> initVals(double d) {\n+  var dictSun = {\n+    'N_sun': 0.0, //N = Долгота восходящего узла/ascending node\n+    'i_sun': 0.0, //i = наклон плоскости экватора к эклиптике\n+    'a_sun': 1.000000, // (AU) a = средняя дистанция до солнца\n+    'w_sun': 282.9404 + 4.70935E-5 * d, //w = аргумент перигелия\n+    'e_sun': 0.016709 -\n+        1.151E-9 * d, //e = экцентриситет (0=круг, 0-1=эллипс, 1=парабола)\n+    'M_sun': deg_360(356.0470 +\n+        0.9856002585 * d), //M = среднее угловое расстояние (0 в перигелии)\n+    'L_sun': deg_360(\n+        (282.9404 + 4.70935E-5 * d) + deg_360(356.0470 + 0.9856002585 * d))\n+  };\n+}\n"
                },
                {
                    "date": 1642571622608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,5 +115,6 @@\n         0.9856002585 * d), //M = среднее угловое расстояние (0 в перигелии)\n     'L_sun': deg_360(\n         (282.9404 + 4.70935E-5 * d) + deg_360(356.0470 + 0.9856002585 * d))\n   };\n-}\n\\ No newline at end of file\n+  return dictSun;\n+}\n"
                },
                {
                    "date": 1642571709436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n \n   return [lonTopos, lonEcl, xEclip, yEclip];\n }\n \n-Map<String, double> initVals(double d) {\n+Map<String, double> sunVals(double d) {\n   var dictSun = {\n     'N_sun': 0.0, //N = Долгота восходящего узла/ascending node\n     'i_sun': 0.0, //i = наклон плоскости экватора к эклиптике\n     'a_sun': 1.000000, // (AU) a = средняя дистанция до солнца\n@@ -117,4 +117,16 @@\n         (282.9404 + 4.70935E-5 * d) + deg_360(356.0470 + 0.9856002585 * d))\n   };\n   return dictSun;\n }\n+\n+void main(List<String> args) {\n+  var d = numDate(1977, 5, 27, 16, 52);\n+  var data = sunVals(d);\n+  var lst = localSidTime(16, 52, data['L_sun'], 0);\n+  var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n+      data['w_sun']!, data['e_sun']!, data['M_sun']!, d);\n+\n+  var xsun = sun[2];\n+  var ysun = sun[3];\n+  print('$xsun $ysun');\n+}\n"
                },
                {
                    "date": 1642571821319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,12 +121,13 @@\n \n void main(List<String> args) {\n   var d = numDate(1977, 5, 27, 16, 52);\n   var data = sunVals(d);\n-  var lst = localSidTime(16, 52, data['L_sun'], 0);\n+\n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n       data['w_sun']!, data['e_sun']!, data['M_sun']!, d);\n \n   var xsun = sun[2];\n   var ysun = sun[3];\n-  print('$xsun $ysun');\n+  var pluto = dataPluto(xsun, ysun, d);\n+  print(pluto);\n }\n"
                },
                {
                    "date": 1642571991846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,50 +49,33 @@\n \n // Шаг 2 Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n   var xh = r * cos(radians(lonEcl)) * cos(radians(lat));\n   var yh = r * sin(radians(lonEcl)) * cos(radians(lat));\n-  // var zh = r * sin(radians(lat));\n+  var zh = r * sin(radians(lat));\n \n   var xgeoc = xh + xsun;\n   var ygeoc = yh + ysun;\n-  // var zgeoc = zh;\n+  var zgeoc = zh;\n \n-// Шаг 3 - теперь переводим прямоугольные координаты в сферические\n-  // var oblecl = 23.4393 - 3.563E-7 * d;\n-  // var xequat = xgeoc;\n-  // var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n-  // var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n-\n-  // var RA = deg_360(degrees(atan2(yequat, xequat)));\n-  // var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n-  // var R = sqrt(xequat * xequat + yequat * yequat + zequat * zequat);\n-\n   var _lonTopos = atan2(ygeoc, xgeoc);\n   var lonTopos = deg_360(degrees(_lonTopos));\n \n-  return [lonTopos, lonEcl];\n+  // return [lonTopos, lonEcl];\n+  return [xh, yh, zh, xgeoc, ygeoc, zgeoc];\n }\n \n List<double> dataSun(\n     double N, double i, double a, double w, double e, double M, double d) {\n-// Шаг 1 - вычислить E экцентрическую аномалию\n-// sin/cos выдают в радианах - поэтому сразу конвертировать *pi/180\n   var _e = M + degrees(e) * sin(radians(M)) * (1.0 + e * cos(radians(M)));\n   var E = radians(_e);\n \n-// Шаг 2 - вычислить прямоугольные координаты солнца в плоскости эклиптики\n-// где x - угол направленный к перигелию\n   var x = cos(E) - e;\n   var y = sin(E) * sqrt(1 - e * e);\n \n-// Шаг 3 - конвертировать в расстояние и истинную аномалию\n   var r = sqrt(x * x + y * y); //расстояние\n   var _v = atan2(y, x);\n   var v = deg_360(degrees(_v)); // -> истинная аномалия в градусах\n \n-// Шаг 4 (главный) - Теперь подсчитать ГЕОЦЕНТРИКУ !!!\n-// lat = 0 # т.к это само солнце в своей плоскости\n-// R = 0   # т.к это само солнце и расст до солнца = 0\n   var _lon = v + w;\n   var _lonEcl = deg_360(_lon);\n   var lonEcl = deg_360(_lon + 180);\n   var lonTopos = deg_360(_lon); // по факту = топоцентрике\n"
                },
                {
                    "date": 1642572203783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n   };\n   return dictSun;\n }\n \n-void main(List<String> args) {\n+List pluto() {\n   var d = numDate(1977, 5, 27, 16, 52);\n   var data = sunVals(d);\n \n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n@@ -111,6 +111,6 @@\n \n   var xsun = sun[2];\n   var ysun = sun[3];\n   var pluto = dataPluto(xsun, ysun, d);\n-  print(pluto);\n+  return pluto;\n }\n"
                },
                {
                    "date": 1642573008451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,4 +113,8 @@\n   var ysun = sun[3];\n   var pluto = dataPluto(xsun, ysun, d);\n   return pluto;\n }\n+\n+void main(List<String> args) {\n+  print(pluto());\n+}\n"
                },
                {
                    "date": 1642573199549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,13 +55,18 @@\n   var xgeoc = xh + xsun;\n   var ygeoc = yh + ysun;\n   var zgeoc = zh;\n \n+  var oblecl = 23.4393 - 3.563E-7 * d;\n+  var xequat = xgeoc;\n+  var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n+  var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n+\n   var _lonTopos = atan2(ygeoc, xgeoc);\n   var lonTopos = deg_360(degrees(_lonTopos));\n \n   // return [lonTopos, lonEcl];\n-  return [xh, yh, zh, xgeoc, ygeoc, zgeoc];\n+  return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n }\n \n List<double> dataSun(\n     double N, double i, double a, double w, double e, double M, double d) {\n"
                },
                {
                    "date": 1642573267684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,10 @@\n \n   var _lonTopos = atan2(ygeoc, xgeoc);\n   var lonTopos = deg_360(degrees(_lonTopos));\n \n-  // return [lonTopos, lonEcl];\n-  return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n+  return [lonTopos, lonEcl];\n+  // return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n }\n \n List<double> dataSun(\n     double N, double i, double a, double w, double e, double M, double d) {\n"
                },
                {
                    "date": 1642573328365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,10 @@\n \n   var _lonTopos = atan2(ygeoc, xgeoc);\n   var lonTopos = deg_360(degrees(_lonTopos));\n \n-  return [lonTopos, lonEcl];\n-  // return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n+  // return [lonTopos, lonEcl];\n+  return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n }\n \n List<double> dataSun(\n     double N, double i, double a, double w, double e, double M, double d) {\n"
                },
                {
                    "date": 1642573454578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,10 +106,10 @@\n   };\n   return dictSun;\n }\n \n-List pluto() {\n-  var d = numDate(1977, 5, 27, 16, 52);\n+List pluto(year, month, day, hour, minute) {\n+  var d = numDate(year, month, day, hour, minute);\n   var data = sunVals(d);\n \n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n       data['w_sun']!, data['e_sun']!, data['M_sun']!, d);\n"
                },
                {
                    "date": 1642573598028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,7 +119,7 @@\n   var pluto = dataPluto(xsun, ysun, d);\n   return pluto;\n }\n \n-void main(List<String> args) {\n-  print(pluto());\n-}\n+// void main(List<String> args) {\n+//   print(pluto());\n+// }\n"
                },
                {
                    "date": 1642574006365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,7 +119,7 @@\n   var pluto = dataPluto(xsun, ysun, d);\n   return pluto;\n }\n \n-// void main(List<String> args) {\n-//   print(pluto());\n-// }\n+void main(List<String> args) {\n+  print(pluto(1977, 5, 27, 16, 52));\n+}\n"
                },
                {
                    "date": 1642575455091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,24 +49,24 @@\n \n // Шаг 2 Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n   var xh = r * cos(radians(lonEcl)) * cos(radians(lat));\n   var yh = r * sin(radians(lonEcl)) * cos(radians(lat));\n-  var zh = r * sin(radians(lat));\n+  // var zh = r * sin(radians(lat));\n \n   var xgeoc = xh + xsun;\n   var ygeoc = yh + ysun;\n-  var zgeoc = zh;\n+  // var zgeoc = zh;\n \n-  var oblecl = 23.4393 - 3.563E-7 * d;\n-  var xequat = xgeoc;\n-  var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n-  var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n+  // var oblecl = 23.4393 - 3.563E-7 * d;\n+  // var xequat = xgeoc;\n+  // var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n+  // var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n \n   var _lonTopos = atan2(ygeoc, xgeoc);\n   var lonTopos = deg_360(degrees(_lonTopos));\n \n-  // return [lonTopos, lonEcl];\n-  return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n+  return [lonTopos, lonEcl];\n+  // return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n }\n \n List<double> dataSun(\n     double N, double i, double a, double w, double e, double M, double d) {\n"
                },
                {
                    "date": 1642575485430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n   var _lonTopos = atan2(ygeoc, xgeoc);\n   var lonTopos = deg_360(degrees(_lonTopos));\n \n-  return [lonTopos, lonEcl];\n+  return [lonEcl, lonTopos];\n   // return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n }\n \n List<double> dataSun(\n"
                },
                {
                    "date": 1642575585372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,9 @@\n }\n \n List pluto(year, month, day, hour, minute) {\n   var d = numDate(year, month, day, hour, minute);\n+  print(d);\n   var data = sunVals(d);\n \n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n       data['w_sun']!, data['e_sun']!, data['M_sun']!, d);\n"
                },
                {
                    "date": 1642575733495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,24 +49,24 @@\n \n // Шаг 2 Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n   var xh = r * cos(radians(lonEcl)) * cos(radians(lat));\n   var yh = r * sin(radians(lonEcl)) * cos(radians(lat));\n-  // var zh = r * sin(radians(lat));\n+  var zh = r * sin(radians(lat));\n \n   var xgeoc = xh + xsun;\n   var ygeoc = yh + ysun;\n-  // var zgeoc = zh;\n+  var zgeoc = zh;\n \n-  // var oblecl = 23.4393 - 3.563E-7 * d;\n-  // var xequat = xgeoc;\n-  // var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n-  // var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n+  var oblecl = 23.4393 - 3.563E-7 * d;\n+  var xequat = xgeoc;\n+  var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n+  var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n \n   var _lonTopos = atan2(ygeoc, xgeoc);\n   var lonTopos = deg_360(degrees(_lonTopos));\n \n-  return [lonEcl, lonTopos];\n-  // return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n+  // return [lonEcl, lonTopos];\n+  return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n }\n \n List<double> dataSun(\n     double N, double i, double a, double w, double e, double M, double d) {\n@@ -106,11 +106,11 @@\n   };\n   return dictSun;\n }\n \n-List pluto(year, month, day, hour, minute) {\n-  var d = numDate(year, month, day, hour, minute);\n-  print(d);\n+List pluto(d) {\n+  // var d = numDate(year, month, day, hour, minute);\n+  // print(d);\n   var data = sunVals(d);\n \n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n       data['w_sun']!, data['e_sun']!, data['M_sun']!, d);\n@@ -120,7 +120,7 @@\n   var pluto = dataPluto(xsun, ysun, d);\n   return pluto;\n }\n \n-void main(List<String> args) {\n-  print(pluto(1977, 5, 27, 16, 52));\n-}\n+// void main(List<String> args) {\n+//   print(pluto(d));\n+// }\n"
                },
                {
                    "date": 1642575917751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,24 +49,24 @@\n \n // Шаг 2 Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n   var xh = r * cos(radians(lonEcl)) * cos(radians(lat));\n   var yh = r * sin(radians(lonEcl)) * cos(radians(lat));\n-  var zh = r * sin(radians(lat));\n+  // var zh = r * sin(radians(lat));\n \n   var xgeoc = xh + xsun;\n   var ygeoc = yh + ysun;\n-  var zgeoc = zh;\n+  // var zgeoc = zh;\n \n-  var oblecl = 23.4393 - 3.563E-7 * d;\n-  var xequat = xgeoc;\n-  var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n-  var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n+  // var oblecl = 23.4393 - 3.563E-7 * d;\n+  // var xequat = xgeoc;\n+  // var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n+  // var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n \n   var _lonTopos = atan2(ygeoc, xgeoc);\n   var lonTopos = deg_360(degrees(_lonTopos));\n \n-  // return [lonEcl, lonTopos];\n-  return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n+  return [lonEcl, lonTopos];\n+  // return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n }\n \n List<double> dataSun(\n     double N, double i, double a, double w, double e, double M, double d) {\n"
                },
                {
                    "date": 1642575991976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n \n List pluto(d) {\n   // var d = numDate(year, month, day, hour, minute);\n   // print(d);\n-  var data = sunVals(d);\n+  var data = sunVals(d.ut);\n \n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n       data['w_sun']!, data['e_sun']!, data['M_sun']!, d);\n \n"
                },
                {
                    "date": 1642576019403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,13 +112,13 @@\n   // print(d);\n   var data = sunVals(d.ut);\n \n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n-      data['w_sun']!, data['e_sun']!, data['M_sun']!, d);\n+      data['w_sun']!, data['e_sun']!, data['M_sun']!, d.ut);\n \n   var xsun = sun[2];\n   var ysun = sun[3];\n-  var pluto = dataPluto(xsun, ysun, d);\n+  var pluto = dataPluto(xsun, ysun, d.ut);\n   return pluto;\n }\n \n // void main(List<String> args) {\n"
                },
                {
                    "date": 1642608730017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   // var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n   // var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n \n   var _lonTopos = atan2(ygeoc, xgeoc);\n-  var lonTopos = deg_360(degrees(_lonTopos));\n+  var lonTopos = deg360(degrees(_lonTopos));\n \n   return [lonEcl, lonTopos];\n   // return [xh, yh, zh, xgeoc, ygeoc, zgeoc, xequat, yequat, zequat];\n }\n@@ -77,14 +77,14 @@\n   var y = sin(E) * sqrt(1 - e * e);\n \n   var r = sqrt(x * x + y * y); //расстояние\n   var _v = atan2(y, x);\n-  var v = deg_360(degrees(_v)); // -> истинная аномалия в градусах\n+  var v = deg360(degrees(_v)); // -> истинная аномалия в градусах\n \n   var _lon = v + w;\n-  var _lonEcl = deg_360(_lon);\n-  var lonEcl = deg_360(_lon + 180);\n-  var lonTopos = deg_360(_lon); // по факту = топоцентрике\n+  var _lonEcl = deg360(_lon);\n+  var lonEcl = deg360(_lon + 180);\n+  var lonTopos = deg360(_lon); // по факту = топоцентрике\n \n   var xEclip = r * cos(radians(_lonEcl));\n   var yEclip = r * sin(radians(_lonEcl));\n \n@@ -98,12 +98,12 @@\n     'a_sun': 1.000000, // (AU) a = средняя дистанция до солнца\n     'w_sun': 282.9404 + 4.70935E-5 * d, //w = аргумент перигелия\n     'e_sun': 0.016709 -\n         1.151E-9 * d, //e = экцентриситет (0=круг, 0-1=эллипс, 1=парабола)\n-    'M_sun': deg_360(356.0470 +\n+    'M_sun': deg360(356.0470 +\n         0.9856002585 * d), //M = среднее угловое расстояние (0 в перигелии)\n-    'L_sun': deg_360(\n-        (282.9404 + 4.70935E-5 * d) + deg_360(356.0470 + 0.9856002585 * d))\n+    'L_sun': deg360(\n+        (282.9404 + 4.70935E-5 * d) + deg360(356.0470 + 0.9856002585 * d))\n   };\n   return dictSun;\n }\n \n"
                },
                {
                    "date": 1642859356799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,10 +107,8 @@\n   return dictSun;\n }\n \n List pluto(d) {\n-  // var d = numDate(year, month, day, hour, minute);\n-  // print(d);\n   var data = sunVals(d.ut);\n \n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n       data['w_sun']!, data['e_sun']!, data['M_sun']!, d.ut);\n@@ -119,8 +117,4 @@\n   var ysun = sun[3];\n   var pluto = dataPluto(xsun, ysun, d.ut);\n   return pluto;\n }\n-\n-// void main(List<String> args) {\n-//   print(pluto(d));\n-// }\n"
                },
                {
                    "date": 1642908291883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,14 +107,14 @@\n   return dictSun;\n }\n \n List pluto(d) {\n-  var data = sunVals(d.ut);\n+  var data = sunVals(d);\n \n   var sun = dataSun(data['N_sun']!, data['i_sun']!, data['a_sun']!,\n-      data['w_sun']!, data['e_sun']!, data['M_sun']!, d.ut);\n+      data['w_sun']!, data['e_sun']!, data['M_sun']!, d);\n \n   var xsun = sun[2];\n   var ysun = sun[3];\n-  var pluto = dataPluto(xsun, ysun, d.ut);\n+  var pluto = dataPluto(xsun, ysun, d);\n   return pluto;\n }\n"
                }
            ],
            "date": 1642571044805,
            "name": "Commit-0",
            "content": "import 'src/func.dart';\nimport 'dart:math';\n\nList<double> dataPluto(double xsun, double ysun, double d) {\n// так как не существует теории - есть приближение валидное для 1800-2000гг\n// вспомогательные величины S P\n  var S = 50.03 + 0.033459652 * d;\n  var P = 238.95 + 0.003968789 * d;\n\n// Шаг 1 - расчитать эклиптические координаты / lonecl - Гелиоцентрическая ккордината\n  var lonEcl = 238.9508 +\n      0.00400703 * d -\n      19.799 * sin(radians(P)) +\n      19.848 * cos(radians(P)) +\n      0.897 * sin(radians(2 * P)) -\n      4.956 * cos(radians(2 * P)) +\n      0.610 * sin(radians(3 * P)) +\n      1.211 * cos(radians(3 * P)) -\n      0.341 * sin(radians(4 * P)) -\n      0.190 * cos(radians(4 * P)) +\n      0.128 * sin(radians(5 * P)) -\n      0.034 * cos(radians(5 * P)) -\n      0.038 * sin(radians(6 * P)) +\n      0.031 * cos(radians(6 * P)) +\n      0.020 * sin(radians(S - P)) -\n      0.010 * cos(radians(S - P));\n  var lat = -3.9082 -\n      5.453 * sin(radians(P)) -\n      14.975 * cos(radians(P)) +\n      3.527 * sin(radians(2 * P)) +\n      1.673 * cos(radians(2 * P)) -\n      1.051 * sin(radians(3 * P)) +\n      0.328 * cos(radians(3 * P)) +\n      0.179 * sin(radians(4 * P)) -\n      0.292 * cos(radians(4 * P)) +\n      0.019 * sin(radians(5 * P)) +\n      0.100 * cos(radians(5 * P)) -\n      0.031 * sin(radians(6 * P)) -\n      0.026 * cos(radians(6 * P)) +\n      0.011 * cos(radians(S - P));\n\n  var r = 40.72 +\n      6.68 * sin(radians(P)) +\n      6.90 * cos(radians(P)) -\n      1.18 * sin(radians(2 * P)) -\n      0.03 * cos(radians(2 * P)) +\n      0.15 * sin(radians(3 * P)) -\n      0.14 * cos(radians(3 * P)); //расстояние\n\n// Шаг 2 Переводим в ГЕОЦЕНТРИЧЕСКИЕ координаты\n  var xh = r * cos(radians(lonEcl)) * cos(radians(lat));\n  var yh = r * sin(radians(lonEcl)) * cos(radians(lat));\n  // var zh = r * sin(radians(lat));\n\n  var xgeoc = xh + xsun;\n  var ygeoc = yh + ysun;\n  // var zgeoc = zh;\n\n// Шаг 3 - теперь переводим прямоугольные координаты в сферические\n  // var oblecl = 23.4393 - 3.563E-7 * d;\n  // var xequat = xgeoc;\n  // var yequat = ygeoc * cos(radians(oblecl)) - zgeoc * sin(radians(oblecl));\n  // var zequat = ygeoc * sin(radians(oblecl)) + zgeoc * cos(radians(oblecl));\n\n  // var RA = deg_360(degrees(atan2(yequat, xequat)));\n  // var Decl = degrees(atan2(zequat, sqrt(xequat * xequat + yequat * yequat)));\n  // var R = sqrt(xequat * xequat + yequat * yequat + zequat * zequat);\n\n  var _lonTopos = atan2(ygeoc, xgeoc);\n  var lonTopos = deg_360(degrees(_lonTopos));\n\n  return [lonTopos, lonEcl];\n}\n\n\n/* Примечание \nвсе что закомментировал - только потому что мне |пока не требуется| выводить данные\nLAT RA R DECL\n*/"
        }
    ]
}