{
    "sourceFile": "bin/vsop/astronomy.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 233,
            "patches": [
                {
                    "date": 1642126749691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642158387578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,15 @@\n-// import re, sys\n-// from datetime import datetime\n-// from math import floor, fmod\n+import 'src/barycenter.dart';\n+import 'src/classes.dart';\n+import 'src/constants.dart';\n+import 'src/errors.dart';\n+import 'src/espenac.dart';\n+import 'src/rotateVector.dart';\n+import 'src/vsop.dart';\n+import 'calc_moon.dart';\n+import 'calc_pluto.dart';\n+import 'dart:math';\n \n-// from vsop.calc_moon import GeoMoon\n-// from vsop.calc_pluto import CalcPluto\n-\n-// from vsop.src.barycenter import CalcSolarSystemBarycenter, major_bodies_t\n-// from vsop.src.classes import *\n-// from vsop.src.constants import EARTH_MOON_MASS_RATIO, EPOCH, C_AUDAY, vsop\n-// from vsop.src.espenac import Timex\n-// from vsop.src.errors import *\n-// from vsop.src.rotateVector import Ecliptic, VsopRotate, VsopSphereToRect\n-// from vsop.src.vsop import CalcVsop, CalcVsopPosVel, VsopHelioDistance\n-\n-\n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n \n"
                },
                {
                    "date": 1642158892063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,28 +12,30 @@\n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n \n-// def ParseArgs(Y, M, D, h, m, LAT, LON):\n-//     time = Time.Make(Y, M, D, h, m, 0)\n-//     observer = Observer(LAT, LON)\n-//     return (observer, time)\n+List ParseArgs(Y, M, D, h, m, LAT, LON) {\n+    var time = Time.Make(Y, M, D, h, m, 0);\n+    var observer = Observer(LAT, LON);\n+    return [observer, time];}\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n \n-// class Time:\n-//     \"\"\"Represents a date and time used for performing astronomy calculations.\"\"\"\n+class Time {\n+    //Represents a date and time used for performing astronomy calculations.\n \n-//     def __init__(self, ut, tt=None):\n-//         self.ut = ut\n-//         if tt is None:\n-//             _DeltaT = Timex.DeltaT_EspenakMeeus\n-//             self.tt = ut + _DeltaT(ut) / 86400.0\n-//         else:\n-//             self.tt = tt\n+  var ut, tt;\n+  Time(this.ut, this.tt);\n \n+  if (tt == null) {\n+    var DeltaT = Timex().DeltaT_EspenakMeeus(ut);\n+    tt = ut + DeltaT / 86400.0;\n+  }       \n+  else\n+      {tt = tt;}\n+}\n //     def Make(year, month, day, hour, minute, second):\n //         \"\"\"Creates a #Time object from a UTC calendar date and time\"\"\"\n //         micro = round(fmod(second, 1.0) * 1000000)\n //         second = floor(second - micro/1000000)\n"
                },
                {
                    "date": 1642161214174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,38 +12,45 @@\n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n \n-List ParseArgs(Y, M, D, h, m, LAT, LON) {\n-    var time = Time.Make(Y, M, D, h, m, 0);\n-    var observer = Observer(LAT, LON);\n-    return [observer, time];}\n+List ParseArgs(int Y, int M, int D, int h, int m, double lat, double lon) {\n+  Time time = Time.Make(Y, M, D, h, m, 0);\n+  Observer observer = Observer(lat, lon, 0);\n+  return [observer, time];\n+}\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n \n class Time {\n-    //Represents a date and time used for performing astronomy calculations.\n-\n   var ut, tt;\n-  Time(this.ut, this.tt);\n+  Time(this.ut);\n+  double init(ut, tt) {\n+    if (tt == null) {\n+      var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n+      tt = ut + deltaT / 86400.0;\n+    } else {\n+      tt = tt;\n+    }\n+    return tt;\n+  }\n \n-  if (tt == null) {\n-    var DeltaT = Timex().DeltaT_EspenakMeeus(ut);\n-    tt = ut + DeltaT / 86400.0;\n-  }       \n-  else\n-      {tt = tt;}\n+  Time Make(int year, int month, int day, int hour, int minute, int second) {\n+    //Creates a #Time object from a UTC calendar date and time\"\n+    // double second = 0;\n+    // double micro = 0;\n+    //round(fmod(second, 1.0) * 1000000);\n+    second = (second - 0 / 1000000).toInt();\n+    //floor(second - micro / 1000000);\n+    DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n+    dynamic ut = (d - EPOCH).total_seconds() / 86400;\n+    return Time(ut);\n+  }\n }\n-//     def Make(year, month, day, hour, minute, second):\n-//         \"\"\"Creates a #Time object from a UTC calendar date and time\"\"\"\n-//         micro = round(fmod(second, 1.0) * 1000000)\n-//         second = floor(second - micro/1000000)\n-//         d = datetime(year, month, day, hour, minute, second, micro)\n-//         ut = (d - EPOCH).total_seconds() / 86400\n-//         return Time(ut)\n \n+\n //     def AddDays(self, days):\n //         \"\"\"Calculates the sum or difference of a #Time \"\"\"\n //         return Time(self.ut + days)\n \n"
                },
                {
                    "date": 1642177628677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,13 @@\n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n \n-List ParseArgs(int Y, int M, int D, int h, int m, double lat, double lon) {\n-  Time time = Time.Make(Y, M, D, h, m, 0);\n-  Observer observer = Observer(lat, lon, 0);\n-  return [observer, time];\n-}\n+// List ParseArgs(int Y, int M, int D, int h, int m, double lat, double lon) {\n+//   Time time = Time.Make(Y, M, D, h, m, 0);\n+//   Observer observer = Observer(lat, lon, 0);\n+//   return [observer, time];\n+// }\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n@@ -35,19 +35,19 @@\n     }\n     return tt;\n   }\n \n-  Time Make(int year, int month, int day, int hour, int minute, int second) {\n-    //Creates a #Time object from a UTC calendar date and time\"\n-    // double second = 0;\n-    // double micro = 0;\n-    //round(fmod(second, 1.0) * 1000000);\n-    second = (second - 0 / 1000000).toInt();\n-    //floor(second - micro / 1000000);\n-    DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-    dynamic ut = (d - EPOCH).total_seconds() / 86400;\n-    return Time(ut);\n-  }\n+  // Time Make(int year, int month, int day, int hour, int minute, int second) {\n+  //   //Creates a #Time object from a UTC calendar date and time\"\n+  //   // double second = 0;\n+  //   // double micro = 0;\n+  //   //round(fmod(second, 1.0) * 1000000);\n+  //   second = (second - 0 / 1000000).toInt();\n+  //   //floor(second - micro / 1000000);\n+  //   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n+  //   dynamic ut = (d - EPOCH).total_seconds() / 86400;\n+  //   return Time(ut);\n+  // }\n }\n \n \n //     def AddDays(self, days):\n"
                },
                {
                    "date": 1642180722989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,13 @@\n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n \n-// List ParseArgs(int Y, int M, int D, int h, int m, double lat, double lon) {\n-//   Time time = Time.Make(Y, M, D, h, m, 0);\n-//   Observer observer = Observer(lat, lon, 0);\n-//   return [observer, time];\n-// }\n+List ParseArgs(int Y, int M, int D, int h, int m, double lat, double lon) {\n+  Time time = Time.Make(Y, M, D, h, m, 0);\n+  Observer observer = Observer(lat, lon, 0);\n+  return [observer, time];\n+}\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n@@ -35,19 +35,18 @@\n     }\n     return tt;\n   }\n \n-  // Time Make(int year, int month, int day, int hour, int minute, int second) {\n-  //   //Creates a #Time object from a UTC calendar date and time\"\n-  //   // double second = 0;\n-  //   // double micro = 0;\n-  //   //round(fmod(second, 1.0) * 1000000);\n-  //   second = (second - 0 / 1000000).toInt();\n-  //   //floor(second - micro / 1000000);\n-  //   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-  //   dynamic ut = (d - EPOCH).total_seconds() / 86400;\n-  //   return Time(ut);\n-  // }\n+// floor(x) = int(x) // fmod(x,y) = x%y\n+  Time Make(int year, int month, int day, int hour, int minute, int second) {\n+    DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n+    int _EPOCH = EPOCH.millisecondsSinceEpoch * 1000; //секунды\n+    double micro = second % 1.0 * 1000000.round();\n+    second = (second - micro / 1000000).floor();\n+    int _d = d.millisecondsSinceEpoch * 1000; //секунды\n+    double ut = (_d - _EPOCH) / 86400;\n+    return Time(ut);\n+  }\n }\n \n \n //     def AddDays(self, days):\n"
                },
                {
                    "date": 1642181110655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n // # 1. Парсинг входной даты\n // # -------------------------\n \n List ParseArgs(int Y, int M, int D, int h, int m, double lat, double lon) {\n-  Time time = Time.Make(Y, M, D, h, m, 0);\n+  Time time = Time().Make(Y, M, D, h, m, 0);\n   Observer observer = Observer(lat, lon, 0);\n   return [observer, time];\n }\n \n@@ -24,28 +24,28 @@\n // # --------------------------------------\n \n class Time {\n   var ut, tt;\n-  Time(this.ut);\n-  double init(ut, tt) {\n-    if (tt == null) {\n-      var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n-      tt = ut + deltaT / 86400.0;\n-    } else {\n-      tt = tt;\n-    }\n-    return tt;\n-  }\n+  // Time(this.ut);\n+  // double init(ut, tt) {\n+  //   if (tt == null) {\n+  //     var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n+  //     tt = ut + deltaT / 86400.0;\n+  //   } else {\n+  //     tt = tt;\n+  //   }\n+  //   return tt;\n+  // }\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n-  Time Make(int year, int month, int day, int hour, int minute, int second) {\n+  dynamic Make(int year, int month, int day, int hour, int minute, int second) {\n     DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n     int _EPOCH = EPOCH.millisecondsSinceEpoch * 1000; //секунды\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n     int _d = d.millisecondsSinceEpoch * 1000; //секунды\n     double ut = (_d - _EPOCH) / 86400;\n-    return Time(ut);\n+    return ut;\n   }\n }\n \n \n"
                },
                {
                    "date": 1642181251423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n \n-List ParseArgs(int Y, int M, int D, int h, int m, double lat, double lon) {\n-  Time time = Time().Make(Y, M, D, h, m, 0);\n+List ParseArgs(year, month, day, hour, minute, lat, lon) {\n+  Time time = Time().Make(year, month, day, hour, minute, 0);\n   Observer observer = Observer(lat, lon, 0);\n   return [observer, time];\n }\n \n"
                },
                {
                    "date": 1642181408159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n // # 1. Парсинг входной даты\n // # -------------------------\n \n List ParseArgs(year, month, day, hour, minute, lat, lon) {\n-  Time time = Time().Make(year, month, day, hour, minute, 0);\n+  double time = Time().Make(year, month, day, hour, minute, 0);\n   Observer observer = Observer(lat, lon, 0);\n   return [observer, time];\n }\n \n"
                },
                {
                    "date": 1642302875021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n // # -------------------------\n \n List ParseArgs(year, month, day, hour, minute, lat, lon) {\n   double time = Time().Make(year, month, day, hour, minute, 0);\n-  Observer observer = Observer(lat, lon, 0);\n+  Observer observer = Observer(lat, lon);\n   return [observer, time];\n }\n \n // # --------------------------------------\n"
                },
                {
                    "date": 1642303334756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,12 @@\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n   dynamic Make(int year, int month, int day, int hour, int minute, int second) {\n     DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-    int _EPOCH = EPOCH.millisecondsSinceEpoch * 1000; //секунды\n+    int _EPOCH = EPOCH.millisecondsSinceEpoch; //секунды\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n-    int _d = d.millisecondsSinceEpoch * 1000; //секунды\n+    int _d = d.millisecondsSinceEpoch; //секунды\n     double ut = (_d - _EPOCH) / 86400;\n     return ut;\n   }\n }\n"
                },
                {
                    "date": 1642303441255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,13 @@\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n   dynamic Make(int year, int month, int day, int hour, int minute, int second) {\n     DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-    int _EPOCH = EPOCH.millisecondsSinceEpoch; //секунды\n+    int _EPOCH = EPOCH.millisecondsSinceEpoch * 1000; //секунды\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n-    int _d = d.millisecondsSinceEpoch; //секунды\n-    double ut = (_d - _EPOCH) / 86400;\n+    int _d = d.millisecondsSinceEpoch * 1000; //секунды\n+    double ut = (_d - _EPOCH) / 864000000;\n     return ut;\n   }\n }\n \n"
                },
                {
                    "date": 1642303462954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     int _EPOCH = EPOCH.millisecondsSinceEpoch * 1000; //секунды\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n     int _d = d.millisecondsSinceEpoch * 1000; //секунды\n-    double ut = (_d - _EPOCH) / 864000000;\n+    double ut = (_d - _EPOCH) / 8640000;\n     return ut;\n   }\n }\n \n"
                },
                {
                    "date": 1642303478094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     int _EPOCH = EPOCH.millisecondsSinceEpoch * 1000; //секунды\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n     int _d = d.millisecondsSinceEpoch * 1000; //секунды\n-    double ut = (_d - _EPOCH) / 8640000;\n+    double ut = (_d - _EPOCH) / 86400000000;\n     return ut;\n   }\n }\n \n"
                },
                {
                    "date": 1642303593040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,12 @@\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n   dynamic Make(int year, int month, int day, int hour, int minute, int second) {\n     DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-    int _EPOCH = EPOCH.millisecondsSinceEpoch * 1000; //секунды\n+    int _EPOCH = EPOCH.millisecondsSinceEpoch; //секунды\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n-    int _d = d.millisecondsSinceEpoch * 1000; //секунды\n+    int _d = d.millisecondsSinceEpoch; //секунды\n     double ut = (_d - _EPOCH) / 86400000000;\n     return ut;\n   }\n }\n"
                },
                {
                    "date": 1642303611705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     int _EPOCH = EPOCH.millisecondsSinceEpoch; //секунды\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n     int _d = d.millisecondsSinceEpoch; //секунды\n-    double ut = (_d - _EPOCH) / 86400000000;\n+    double ut = (_d - _EPOCH) / 8640000;\n     return ut;\n   }\n }\n \n"
                },
                {
                    "date": 1642303631487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     int _EPOCH = EPOCH.millisecondsSinceEpoch; //секунды\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n     int _d = d.millisecondsSinceEpoch; //секунды\n-    double ut = (_d - _EPOCH) / 8640000;\n+    double ut = (_d - _EPOCH) / 86400000;\n     return ut;\n   }\n }\n \n"
                },
                {
                    "date": 1642303728484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,13 @@\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n   dynamic Make(int year, int month, int day, int hour, int minute, int second) {\n     DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-    int _EPOCH = EPOCH.millisecondsSinceEpoch; //секунды\n+    int _EPOCH = EPOCH.millisecondsSinceEpoch;\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n-    int _d = d.millisecondsSinceEpoch; //секунды\n-    double ut = (_d - _EPOCH) / 86400000;\n+    int _d = d.millisecondsSinceEpoch;\n+    double ut = (_d - _EPOCH) / 86400000; // => секунды\n     return ut;\n   }\n }\n \n"
                },
                {
                    "date": 1642303976389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n // # --------------------------------------\n \n class Time {\n   var ut, tt;\n-  // Time(this.ut);\n+  Time(this.ut);\n   // double init(ut, tt) {\n   //   if (tt == null) {\n   //     var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n   //     tt = ut + deltaT / 86400.0;\n@@ -42,10 +42,11 @@\n     int _EPOCH = EPOCH.millisecondsSinceEpoch;\n     double micro = second % 1.0 * 1000000.round();\n     second = (second - micro / 1000000).floor();\n     int _d = d.millisecondsSinceEpoch;\n-    double ut = (_d - _EPOCH) / 86400000; // => секунды\n-    return ut;\n+    Time ut = Time((_d - _EPOCH) / 86400000); // => секунды\n+    // Time gd = Time(ut);\n+    return Time(ut);\n   }\n }\n \n \n"
                },
                {
                    "date": 1642304265508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,42 +13,41 @@\n // # 1. Парсинг входной даты\n // # -------------------------\n \n List ParseArgs(year, month, day, hour, minute, lat, lon) {\n-  double time = Time().Make(year, month, day, hour, minute, 0);\n+  double time = Make(year, month, day, hour, minute, 0);\n   Observer observer = Observer(lat, lon);\n   return [observer, time];\n }\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n \n-class Time {\n-  var ut, tt;\n-  Time(this.ut);\n-  // double init(ut, tt) {\n-  //   if (tt == null) {\n-  //     var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n-  //     tt = ut + deltaT / 86400.0;\n-  //   } else {\n-  //     tt = tt;\n-  //   }\n-  //   return tt;\n-  // }\n+// class Time {\n+//   var ut, tt;\n+// Time(this.ut);\n+// double init(ut, tt) {\n+//   if (tt == null) {\n+//     var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n+//     tt = ut + deltaT / 86400.0;\n+//   } else {\n+//     tt = tt;\n+//   }\n+//   return tt;\n+// }\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n-  dynamic Make(int year, int month, int day, int hour, int minute, int second) {\n-    DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-    int _EPOCH = EPOCH.millisecondsSinceEpoch;\n-    double micro = second % 1.0 * 1000000.round();\n-    second = (second - micro / 1000000).floor();\n-    int _d = d.millisecondsSinceEpoch;\n-    Time ut = Time((_d - _EPOCH) / 86400000); // => секунды\n-    // Time gd = Time(ut);\n-    return Time(ut);\n-  }\n+double Make(int year, int month, int day, int hour, int minute, int second) {\n+  DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n+  int _EPOCH = EPOCH.millisecondsSinceEpoch;\n+  double micro = second % 1.0 * 1000000.round();\n+  second = (second - micro / 1000000).floor();\n+  int _d = d.millisecondsSinceEpoch;\n+  double ut = (_d - _EPOCH) / 86400000; // => секунды\n+  return ut;\n }\n+// }\n \n \n //     def AddDays(self, days):\n //         \"\"\"Calculates the sum or difference of a #Time \"\"\"\n"
                },
                {
                    "date": 1642304792761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,21 +22,8 @@\n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n \n-// class Time {\n-//   var ut, tt;\n-// Time(this.ut);\n-// double init(ut, tt) {\n-//   if (tt == null) {\n-//     var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n-//     tt = ut + deltaT / 86400.0;\n-//   } else {\n-//     tt = tt;\n-//   }\n-//   return tt;\n-// }\n-\n // floor(x) = int(x) // fmod(x,y) = x%y\n double Make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _EPOCH = EPOCH.millisecondsSinceEpoch;\n@@ -45,15 +32,9 @@\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _EPOCH) / 86400000; // => секунды\n   return ut;\n }\n-// }\n \n-\n-//     def AddDays(self, days):\n-//         \"\"\"Calculates the sum or difference of a #Time \"\"\"\n-//         return Time(self.ut + days)\n-\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n@@ -156,4 +137,23 @@\n //         ltime = ltime2\n \n //     raise Error('Light-travel time solver did not converge: dt={}'.format(dt))\n \n+\n+\n+\n+// class Time {\n+//   var ut, tt;\n+// Time(this.ut);\n+// double init(ut, tt) {\n+//   if (tt == null) {\n+//     var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n+//     tt = ut + deltaT / 86400.0;\n+//   } else {\n+//     tt = tt;\n+//   }\n+//   return tt;\n+// }\n+\n+//     def AddDays(self, days):\n+//         \"\"\"Calculates the sum or difference of a #Time \"\"\"\n+//         return Time(self.ut + days)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642306881406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,16 +37,18 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-// def HelioEclipLon(body, time):\n-//     \"\"\"Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\"\"\"\n+double HelioEclipLon(body, ut) {\n+  if (body == Body.Sun) {\n+    print('InvalidBodyError()');\n+  }\n \n-//     if body == Body.Sun:\n-//         raise InvalidBodyError()\n-//     hv = HelioVector(body, time)\n-//     helio = Ecliptic(hv, time)\n-//     return helio.elon\n+  // var hv = HelioVector(body, ut);\n+  // var helio = Ecliptic(hv, ut);\n+  return ut;\n+}\n+    //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n // def HelioVector(body, time):\n //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n"
                },
                {
                    "date": 1642306975160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,16 +37,16 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-double HelioEclipLon(body, ut) {\n+double HelioEclipLon(body, time) {\n   if (body == Body.Sun) {\n     print('InvalidBodyError()');\n   }\n \n   // var hv = HelioVector(body, ut);\n   // var helio = Ecliptic(hv, ut);\n-  return ut;\n+  return time;\n }\n     //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n // def HelioVector(body, time):\n"
                },
                {
                    "date": 1642307434280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,15 @@\n   // var hv = HelioVector(body, ut);\n   // var helio = Ecliptic(hv, ut);\n   return time;\n }\n-    //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n+//Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n-// def HelioVector(body, time):\n+Vector? helioVector(body, time) {\n+  if (body == Body.Sun) {\n+    return Vector(0.0, 0.0, 0.0, time);\n+  }\n+}\n //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n //     if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n"
                },
                {
                    "date": 1642307500906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,16 +37,16 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-double HelioEclipLon(body, time) {\n+List HelioEclipLon(body, time) {\n   if (body == Body.Sun) {\n     print('InvalidBodyError()');\n   }\n \n-  // var hv = HelioVector(body, ut);\n+  var hv = helioVector(body, time);\n   // var helio = Ecliptic(hv, ut);\n-  return time;\n+  return [time, hv];\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n"
                },
                {
                    "date": 1642307586029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n   if (body == Body.Sun) {\n-    return Vector(0.0, 0.0, 0.0, time);\n+    return Vector(1.0, 1.0, 2.0, time);\n   }\n }\n //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n"
                },
                {
                    "date": 1642307639309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n List HelioEclipLon(body, time) {\n-  if (body == Body.Sun) {\n+  if (body == Body.Venus) {\n     print('InvalidBodyError()');\n   }\n \n   var hv = helioVector(body, time);\n@@ -49,9 +49,9 @@\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n-  if (body == Body.Sun) {\n+  if (body == Body.Mercury) {\n     return Vector(1.0, 1.0, 2.0, time);\n   }\n }\n //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n"
                },
                {
                    "date": 1642307668373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   }\n \n   var hv = helioVector(body, time);\n   // var helio = Ecliptic(hv, ut);\n-  return [time, hv];\n+  return [time, hv.toString()];\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n"
                },
                {
                    "date": 1642307708181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   }\n \n   var hv = helioVector(body, time);\n   // var helio = Ecliptic(hv, ut);\n-  return [time, hv.toString()];\n+  return [time, hv?.x];\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n"
                },
                {
                    "date": 1642307773753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   }\n \n   var hv = helioVector(body, time);\n   // var helio = Ecliptic(hv, ut);\n-  return [time, hv?.x];\n+  return [time, hv?.Length(1, 2, 4)];\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n"
                },
                {
                    "date": 1642324207295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n Vector? helioVector(body, time) {\n   if (body == Body.Mercury) {\n     return Vector(1.0, 1.0, 2.0, time);\n   }\n-}\n+\n //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n //     if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n@@ -81,10 +81,10 @@\n //     if body == Body.SSB:\n //         return CalcSolarSystemBarycenter(time)\n \n //     raise InvalidBodyError()\n+}\n \n-\n // def HelioDistance(body, time):\n //     \"\"\"Расчет дистанции до солнца.\n //     Returns -> расстояние в AU.\n //     \"\"\"\n"
                },
                {
                    "date": 1642324359375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,11 @@\n \n //     if 0 <= body.value < len(vsop):\n //         return CalcVsop(vsop[body.value], time)\n \n-//     if body == Body.Sun:\n-//         return Vector(0.0, 0.0, 0.0, time)\n+  if (body == Body.Sun) {\n+    return Vector(0.0, 0.0, 0.0, time);\n+  }\n \n //     if body == Body.Moon:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]  # 0 - вектор | 1 - долгота луны\n"
                },
                {
                    "date": 1642376383670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,17 @@\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n+class Timeit {\n+  double? tt;\n+  double? ut;\n+  Timeit(double ut) {\n+    this.ut = ut;\n+    var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n+    this.tt = ut + deltaT / 86400.0;\n+  }\n+}\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n double Make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n"
                },
                {
                    "date": 1642378050013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,19 +25,19 @@\n class Timeit {\n   double? tt;\n   double? ut;\n   Timeit(double ut) {\n-    this.ut = ut;\n+    ut = ut;\n     var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n-    this.tt = ut + deltaT / 86400.0;\n+    tt = ut + deltaT / 86400.0;\n   }\n }\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n double Make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _EPOCH = EPOCH.millisecondsSinceEpoch;\n-  double micro = second % 1.0 * 1000000.round();\n+  double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _EPOCH) / 86400000; // => секунды\n   return ut;\n"
                },
                {
                    "date": 1642378082588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n // floor(x) = int(x) // fmod(x,y) = x%y\n double Make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _EPOCH = EPOCH.millisecondsSinceEpoch;\n-  double micro = second % 1.0 * 1000000.floor();\n+  double micro = second % 1.0 * 1000000.round();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _EPOCH) / 86400000; // => секунды\n   return ut;\n"
                },
                {
                    "date": 1642378102400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n // floor(x) = int(x) // fmod(x,y) = x%y\n double Make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _EPOCH = EPOCH.millisecondsSinceEpoch;\n-  double micro = second % 1.0 * 1000000.round();\n+  double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _EPOCH) / 86400000; // => секунды\n   return ut;\n"
                },
                {
                    "date": 1642378119280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n // floor(x) = int(x) // fmod(x,y) = x%y\n double Make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _EPOCH = EPOCH.millisecondsSinceEpoch;\n-  double micro = second % 1.0 * 1000000.floor();\n+  double micro = second % 1.0 * 1000000.truncate();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _EPOCH) / 86400000; // => секунды\n   return ut;\n"
                },
                {
                    "date": 1642378769714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n // # 1. Парсинг входной даты\n // # -------------------------\n \n List ParseArgs(year, month, day, hour, minute, lat, lon) {\n-  double time = Make(year, month, day, hour, minute, 0);\n+  double time = make(year, month, day, hour, minute, 0);\n   Observer observer = Observer(lat, lon);\n   return [observer, time];\n }\n \n@@ -32,9 +32,9 @@\n   }\n }\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n-double Make(int year, int month, int day, int hour, int minute, int second) {\n+double make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _EPOCH = EPOCH.millisecondsSinceEpoch;\n   double micro = second % 1.0 * 1000000.truncate();\n   second = (second - micro / 1000000).floor();\n"
                },
                {
                    "date": 1642378837834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n // floor(x) = int(x) // fmod(x,y) = x%y\n double make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _EPOCH = EPOCH.millisecondsSinceEpoch;\n-  double micro = second % 1.0 * 1000000.truncate();\n+  double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _EPOCH) / 86400000; // => секунды\n   return ut;\n"
                },
                {
                    "date": 1642379204166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,13 +34,13 @@\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n double make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-  int _EPOCH = EPOCH.millisecondsSinceEpoch;\n+  int _epoch = EPOCH.millisecondsSinceEpoch;\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n-  double ut = (_d - _EPOCH) / 86400000; // => секунды\n+  double ut = (_d - _epoch) / 86400000; // => секунды\n   return ut;\n }\n \n // # ------------------------\n"
                },
                {
                    "date": 1642379852683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,16 +46,18 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-List HelioEclipLon(body, time) {\n+Vector HelioEclipLon(body, time) {\n   if (body == Body.Venus) {\n     print('InvalidBodyError()');\n   }\n \n-  var hv = helioVector(body, time);\n-  // var helio = Ecliptic(hv, ut);\n-  return [time, hv?.Length(1, 2, 4)];\n+  // var hv = helioVector(body, time);\n+  if (body == Body.Sun) {\n+    return Vector(0.0, 0.0, 0.0, time);\n+  }\n+  return Vector(0.0, 0.0, 0.0, time);\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n"
                },
                {
                    "date": 1642379869864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n-import 'src/barycenter.dart';\n+// import 'src/barycenter.dart';\n import 'src/classes.dart';\n import 'src/constants.dart';\n-import 'src/errors.dart';\n+// import 'src/errors.dart';\n import 'src/espenac.dart';\n-import 'src/rotateVector.dart';\n-import 'src/vsop.dart';\n-import 'calc_moon.dart';\n-import 'calc_pluto.dart';\n-import 'dart:math';\n+// import 'src/rotateVector.dart';\n+// import 'src/vsop.dart';\n+// import 'calc_moon.dart';\n+// import 'calc_pluto.dart';\n+// import 'dart:math';\n \n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n"
                },
                {
                    "date": 1642380378195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n \n-List ParseArgs(year, month, day, hour, minute, lat, lon) {\n+List parseArgs(year, month, day, hour, minute, lat, lon) {\n   double time = make(year, month, day, hour, minute, 0);\n   Observer observer = Observer(lat, lon);\n   return [observer, time];\n }\n@@ -46,9 +46,9 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-Vector HelioEclipLon(body, time) {\n+Vector helioEclipLon(body, time) {\n   if (body == Body.Venus) {\n     print('InvalidBodyError()');\n   }\n \n"
                },
                {
                    "date": 1642380496705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   double? tt;\n   double? ut;\n   Timeit(double ut) {\n     ut = ut;\n-    var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n+    var deltaT = Timex().deltaTEspenakMeeus(ut);\n     tt = ut + deltaT / 86400.0;\n   }\n }\n \n"
                },
                {
                    "date": 1642380987942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n // import 'src/barycenter.dart';\n+import 'dart:svg';\n+\n import 'src/classes.dart';\n import 'src/constants.dart';\n // import 'src/errors.dart';\n import 'src/espenac.dart';\n // import 'src/rotateVector.dart';\n-// import 'src/vsop.dart';\n+import 'src/vsop.dart';\n // import 'calc_moon.dart';\n // import 'calc_pluto.dart';\n // import 'dart:math';\n \n@@ -71,10 +73,11 @@\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n-//     if 0 <= body.value < len(vsop):\n-//         return CalcVsop(vsop[body.value], time)\n+  if (body.index <= 0 && body.index < vsop.length) {\n+    return CalcVsop(vsop[body.value], time);\n+  }\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n"
                },
                {
                    "date": 1642381022566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n   if (body.index <= 0 && body.index < vsop.length) {\n-    return CalcVsop(vsop[body.value], time);\n+    return CalcVsop(vsop[body.index], time);\n   }\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n"
                },
                {
                    "date": 1642381132160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,10 @@\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n   if (body.index <= 0 && body.index < vsop.length) {\n-    return CalcVsop(vsop[body.index], time);\n+    print(vsop[body.index]);\n+    // return CalcVsop(vsop[body.index], time);\n   }\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n"
                },
                {
                    "date": 1642381311984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,12 @@\n   if (body == Body.Venus) {\n     print('InvalidBodyError()');\n   }\n \n+  if (body.index <= 0 && body.index < vsop.length) {\n+    print(vsop[body.index]);\n+    // return CalcVsop(vsop[body.index], time);\n+  }\n   // var hv = helioVector(body, time);\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n"
                },
                {
                    "date": 1642381395835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-Vector helioEclipLon(body, time) {\n+String helioEclipLon(body, time) {\n   if (body == Body.Venus) {\n     print('InvalidBodyError()');\n   }\n \n@@ -59,11 +59,11 @@\n     // return CalcVsop(vsop[body.index], time);\n   }\n   // var hv = helioVector(body, time);\n   if (body == Body.Sun) {\n-    return Vector(0.0, 0.0, 0.0, time);\n+    return 'Vector(0.0, 0.0, 0.0, time)';\n   }\n-  return Vector(0.0, 0.0, 0.0, time);\n+  return 'Vector(0.0, 0.0, 0.0, time)';\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n"
                },
                {
                    "date": 1642381459302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,11 @@\n // import 'src/barycenter.dart';\n-import 'dart:svg';\n-\n import 'src/classes.dart';\n import 'src/constants.dart';\n // import 'src/errors.dart';\n import 'src/espenac.dart';\n // import 'src/rotateVector.dart';\n-import 'src/vsop.dart';\n+// import 'src/vsop.dart';\n // import 'calc_moon.dart';\n // import 'calc_pluto.dart';\n // import 'dart:math';\n \n@@ -28,9 +26,9 @@\n   double? tt;\n   double? ut;\n   Timeit(double ut) {\n     ut = ut;\n-    var deltaT = Timex().deltaTEspenakMeeus(ut);\n+    var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n     tt = ut + deltaT / 86400.0;\n   }\n }\n \n@@ -48,22 +46,18 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-String helioEclipLon(body, time) {\n+Vector HelioEclipLon(body, time) {\n   if (body == Body.Venus) {\n     print('InvalidBodyError()');\n   }\n \n-  if (body.index <= 0 && body.index < vsop.length) {\n-    print(vsop[body.index]);\n-    // return CalcVsop(vsop[body.index], time);\n-  }\n   // var hv = helioVector(body, time);\n   if (body == Body.Sun) {\n-    return 'Vector(0.0, 0.0, 0.0, time)';\n+    return Vector(0.0, 0.0, 0.0, time);\n   }\n-  return 'Vector(0.0, 0.0, 0.0, time)';\n+  return Vector(0.0, 0.0, 0.0, time);\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n@@ -77,12 +71,10 @@\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n-  if (body.index <= 0 && body.index < vsop.length) {\n-    print(vsop[body.index]);\n-    // return CalcVsop(vsop[body.index], time);\n-  }\n+//     if 0 <= body.value < len(vsop):\n+//         return CalcVsop(vsop[body.value], time)\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n"
                },
                {
                    "date": 1642381520530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,11 @@\n Vector HelioEclipLon(body, time) {\n   if (body == Body.Venus) {\n     print('InvalidBodyError()');\n   }\n+  if (body.index <= 0 && body.index < vsop.length) {\n+    print(vsop[body.index]);\n+  }\n \n   // var hv = helioVector(body, time);\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n"
                },
                {
                    "date": 1642381599007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n Vector HelioEclipLon(body, time) {\n   if (body == Body.Venus) {\n     print('InvalidBodyError()');\n   }\n-  if (body.index <= 0 && body.index < vsop.length) {\n+  if (body.index == 1 && body.index < vsop.length) {\n     print(vsop[body.index]);\n   }\n \n   // var hv = helioVector(body, time);\n"
                },
                {
                    "date": 1642381706475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,19 +47,19 @@\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n Vector HelioEclipLon(body, time) {\n-  if (body == Body.Venus) {\n-    print('InvalidBodyError()');\n-  }\n+  // if (body == Body.Venus) {\n+  //   print('InvalidBodyError()');\n+  // }\n   if (body.index == 1 && body.index < vsop.length) {\n     print(vsop[body.index]);\n   }\n \n   // var hv = helioVector(body, time);\n-  if (body == Body.Sun) {\n-    return Vector(0.0, 0.0, 0.0, time);\n-  }\n+  // if (body == Body.Sun) {\n+  //   return Vector(0.0, 0.0, 0.0, time);\n+  // }\n   return Vector(0.0, 0.0, 0.0, time);\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n"
                },
                {
                    "date": 1642398430977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n   }\n }\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n-double make(int year, int month, int day, int hour, int minute, int second) {\n+Timeit make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _epoch = EPOCH.millisecondsSinceEpoch;\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n-  return ut;\n+  return Timeit(ut);\n }\n \n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n"
                },
                {
                    "date": 1642398457378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n // # 1. Парсинг входной даты\n // # -------------------------\n \n List parseArgs(year, month, day, hour, minute, lat, lon) {\n-  double time = make(year, month, day, hour, minute, 0);\n+  Timeit time = make(year, month, day, hour, minute, 0);\n   Observer observer = Observer(lat, lon);\n   return [observer, time];\n }\n \n"
                },
                {
                    "date": 1642398483442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n // # 1. Парсинг входной даты\n // # -------------------------\n \n List parseArgs(year, month, day, hour, minute, lat, lon) {\n-  Timeit time = make(year, month, day, hour, minute, 0);\n+  double time = make(year, month, day, hour, minute, 0);\n   Observer observer = Observer(lat, lon);\n   return [observer, time];\n }\n \n@@ -32,16 +32,16 @@\n   }\n }\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n-Timeit make(int year, int month, int day, int hour, int minute, int second) {\n+double make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _epoch = EPOCH.millisecondsSinceEpoch;\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n-  return Timeit(ut);\n+  return ut;\n }\n \n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n"
                },
                {
                    "date": 1642398605438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import 'src/constants.dart';\n // import 'src/errors.dart';\n import 'src/espenac.dart';\n // import 'src/rotateVector.dart';\n-// import 'src/vsop.dart';\n+import 'src/vsop.dart';\n // import 'calc_moon.dart';\n // import 'calc_pluto.dart';\n // import 'dart:math';\n \n@@ -51,9 +51,10 @@\n   // if (body == Body.Venus) {\n   //   print('InvalidBodyError()');\n   // }\n   if (body.index == 1 && body.index < vsop.length) {\n-    print(vsop[body.index]);\n+    return calcVsop(vsop[body.value], time);\n+    // print(vsop[body.index]);\n   }\n \n   // var hv = helioVector(body, time);\n   // if (body == Body.Sun) {\n"
                },
                {
                    "date": 1642398622426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-Vector HelioEclipLon(body, time) {\n+Vector helioEclipLon(body, time) {\n   // if (body == Body.Venus) {\n   //   print('InvalidBodyError()');\n   // }\n   if (body.index == 1 && body.index < vsop.length) {\n"
                },
                {
                    "date": 1642398636148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n   // if (body == Body.Venus) {\n   //   print('InvalidBodyError()');\n   // }\n   if (body.index == 1 && body.index < vsop.length) {\n-    return calcVsop(vsop[body.value], time);\n+    return calcVsop(vsop[body.index], time);\n     // print(vsop[body.index]);\n   }\n \n   // var hv = helioVector(body, time);\n"
                },
                {
                    "date": 1642400762854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,10 @@\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n-  if (body == Body.Mercury) {\n-    return Vector(1.0, 1.0, 2.0, time);\n+  if (body == Body.Sun) {\n+    return Vector(0.0, 0.0, 0.0, time);\n   }\n \n //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n"
                },
                {
                    "date": 1642400771659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n Vector helioEclipLon(body, time) {\n   // if (body == Body.Venus) {\n   //   print('InvalidBodyError()');\n   // }\n-  if (body.index == 1 && body.index < vsop.length) {\n+  if (body.index == 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], time);\n     // print(vsop[body.index]);\n   }\n \n"
                },
                {
                    "date": 1642400912764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n Vector helioEclipLon(body, time) {\n   // if (body == Body.Venus) {\n   //   print('InvalidBodyError()');\n   // }\n-  if (body.index == 0 && body.index < vsop.length) {\n+  if (body.index <= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], time);\n     // print(vsop[body.index]);\n   }\n \n"
                },
                {
                    "date": 1642400981585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n   // if (body == Body.Venus) {\n   //   print('InvalidBodyError()');\n   // }\n   if (body.index <= 0 && body.index < vsop.length) {\n+    print(vsop[body.index]);\n     return calcVsop(vsop[body.index], time);\n-    // print(vsop[body.index]);\n   }\n \n   // var hv = helioVector(body, time);\n   // if (body == Body.Sun) {\n"
                },
                {
                    "date": 1642401081835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,10 @@\n   // if (body == Body.Venus) {\n   //   print('InvalidBodyError()');\n   // }\n   if (body.index <= 0 && body.index < vsop.length) {\n-    print(vsop[body.index]);\n+    // print(vsop[body.index]);\n+    print(body.value);\n     return calcVsop(vsop[body.index], time);\n   }\n \n   // var hv = helioVector(body, time);\n"
                },
                {
                    "date": 1642401102778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n   //   print('InvalidBodyError()');\n   // }\n   if (body.index <= 0 && body.index < vsop.length) {\n     // print(vsop[body.index]);\n-    print(body.value);\n+    print(body.index);\n     return calcVsop(vsop[body.index], time);\n   }\n \n   // var hv = helioVector(body, time);\n"
                },
                {
                    "date": 1642401163053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,11 @@\n Vector helioEclipLon(body, time) {\n   // if (body == Body.Venus) {\n   //   print('InvalidBodyError()');\n   // }\n-  if (body.index <= 0 && body.index < vsop.length) {\n+  if (body.index == 1 && body.index < vsop.length) {\n     // print(vsop[body.index]);\n-    print(body.index);\n+    // print(body.index);\n     return calcVsop(vsop[body.index], time);\n   }\n \n   // var hv = helioVector(body, time);\n"
                },
                {
                    "date": 1642401209624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,11 @@\n   // var hv = helioVector(body, time);\n   // if (body == Body.Sun) {\n   //   return Vector(0.0, 0.0, 0.0, time);\n   // }\n-  return Vector(0.0, 0.0, 0.0, time);\n+  else {\n+    return Vector(0.0, 0.0, 0.0, time);\n+  }\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n"
                },
                {
                    "date": 1642402039169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import 'src/classes.dart';\n import 'src/constants.dart';\n // import 'src/errors.dart';\n import 'src/espenac.dart';\n-// import 'src/rotateVector.dart';\n+import 'src/rotateVector.dart';\n import 'src/vsop.dart';\n // import 'calc_moon.dart';\n // import 'calc_pluto.dart';\n // import 'dart:math';\n@@ -47,29 +47,26 @@\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n Vector helioEclipLon(body, time) {\n-  // if (body == Body.Venus) {\n-  //   print('InvalidBodyError()');\n-  // }\n+\n+  var hv = helioVector(body, time);\n+  var helio = Ecliptic(hv, time);\n+  return\n+\n+}\n+//Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n+\n+Vector? helioVector(body, time) {\n   if (body.index == 1 && body.index < vsop.length) {\n     // print(vsop[body.index]);\n     // print(body.index);\n     return calcVsop(vsop[body.index], time);\n   }\n-\n-  // var hv = helioVector(body, time);\n-  // if (body == Body.Sun) {\n-  //   return Vector(0.0, 0.0, 0.0, time);\n-  // }\n-  else {\n+  if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n-}\n-//Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n-\n-Vector? helioVector(body, time) {\n-  if (body == Body.Sun) {\n+  else {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n \n //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n@@ -81,11 +78,8 @@\n \n //     if 0 <= body.value < len(vsop):\n //         return CalcVsop(vsop[body.value], time)\n \n-  if (body == Body.Sun) {\n-    return Vector(0.0, 0.0, 0.0, time);\n-  }\n \n //     if body == Body.Moon:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]  # 0 - вектор | 1 - долгота луны\n"
                },
                {
                    "date": 1642402074082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,13 +47,11 @@\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n Vector helioEclipLon(body, time) {\n-\n   var hv = helioVector(body, time);\n-  var helio = Ecliptic(hv, time);\n-  return\n-\n+  var helio = ecliptic(hv, time);\n+  return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n@@ -63,10 +61,9 @@\n     return calcVsop(vsop[body.index], time);\n   }\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n-  }\n-  else {\n+  } else {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n \n //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n@@ -78,9 +75,8 @@\n \n //     if 0 <= body.value < len(vsop):\n //         return CalcVsop(vsop[body.value], time)\n \n-\n //     if body == Body.Moon:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]  # 0 - вектор | 1 - долгота луны\n //         return Vector(e.x+m.x, e.y+m.y, e.z+m.z, time)\n"
                },
                {
                    "date": 1642402115593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-Vector helioEclipLon(body, time) {\n+double helioEclipLon(body, time) {\n   var hv = helioVector(body, time);\n   var helio = ecliptic(hv, time);\n   return helio.elon;\n }\n"
                },
                {
                    "date": 1642402148414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n-  if (body.index == 1 && body.index < vsop.length) {\n+  if (body.index == 0 && body.index < vsop.length) {\n     // print(vsop[body.index]);\n     // print(body.index);\n     return calcVsop(vsop[body.index], time);\n   }\n"
                },
                {
                    "date": 1642402462057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,13 @@\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n   if (body.index == 0 && body.index < vsop.length) {\n-    // print(vsop[body.index]);\n-    // print(body.index);\n     return calcVsop(vsop[body.index], time);\n   }\n+  if (body == Body.Venus) {\n+    return calcVsop(vsop[body.index], time);\n+  }\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n     return Vector(0.0, 0.0, 0.0, time);\n"
                },
                {
                    "date": 1642402710542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n   if (body.index == 0 && body.index < vsop.length) {\n+    print('vsop.length = ${vsop.length}');\n     return calcVsop(vsop[body.index], time);\n   }\n   if (body == Body.Venus) {\n     return calcVsop(vsop[body.index], time);\n"
                },
                {
                    "date": 1642402748826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,15 +54,15 @@\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n-  if (body.index == 0 && body.index < vsop.length) {\n-    print('vsop.length = ${vsop.length}');\n+  if (body.index >= 0 && body.index < vsop.length) {\n+    // print('vsop.length = ${vsop.length}');\n     return calcVsop(vsop[body.index], time);\n   }\n-  if (body == Body.Venus) {\n-    return calcVsop(vsop[body.index], time);\n-  }\n+  // if (body == Body.Venus) {\n+  //   return calcVsop(vsop[body.index], time);\n+  // }\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n     return Vector(0.0, 0.0, 0.0, time);\n"
                },
                {
                    "date": 1642403165821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,15 +55,10 @@\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n   if (body.index >= 0 && body.index < vsop.length) {\n-    // print('vsop.length = ${vsop.length}');\n     return calcVsop(vsop[body.index], time);\n-  }\n-  // if (body == Body.Venus) {\n-  //   return calcVsop(vsop[body.index], time);\n-  // }\n-  if (body == Body.Sun) {\n+  } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n"
                },
                {
                    "date": 1642404131109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,26 +54,21 @@\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector? helioVector(body, time) {\n+  //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n+\n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], time);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n-  } else {\n-    return Vector(0.0, 0.0, 0.0, time);\n   }\n \n-//     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n-\n //     if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n-//     if 0 <= body.value < len(vsop):\n-//         return CalcVsop(vsop[body.value], time)\n-\n //     if body == Body.Moon:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]  # 0 - вектор | 1 - долгота луны\n //         return Vector(e.x+m.x, e.y+m.y, e.z+m.z, time)\n@@ -86,9 +81,11 @@\n \n //     if body == Body.SSB:\n //         return CalcSolarSystemBarycenter(time)\n \n-//     raise InvalidBodyError()\n+  else {\n+    return Vector(0.0, 0.0, 0.0, time);\n+  }\n }\n \n // def HelioDistance(body, time):\n //     \"\"\"Расчет дистанции до солнца.\n"
                },
                {
                    "date": 1642404153710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,25 +62,25 @@\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n \n-//     if body == Body.Pluto:\n+//     else if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n-//     if body == Body.Moon:\n+//     else if body == Body.Moon:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]  # 0 - вектор | 1 - долгота луны\n //         return Vector(e.x+m.x, e.y+m.y, e.z+m.z, time)\n \n-//     if body == Body.EMB:\n+//     else if body == Body.EMB:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]\n //         d = 1.0 + EARTH_MOON_MASS_RATIO\n //         return Vector(e.x+(m.x/d), e.y+(m.y/d), e.z+(m.z/d), time)\n \n-//     if body == Body.SSB:\n+//     else if body == Body.SSB:\n //         return CalcSolarSystemBarycenter(time)\n \n   else {\n     return Vector(0.0, 0.0, 0.0, time);\n"
                },
                {
                    "date": 1642405248430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,11 +58,12 @@\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], time);\n-  } else if (body == Body.Sun) {\n-    return Vector(0.0, 0.0, 0.0, time);\n   }\n+  // else if (body == Body.Sun) {\n+  //   return Vector(0.0, 0.0, 0.0, time);\n+  // }\n \n //     else if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n"
                },
                {
                    "date": 1642430185694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,12 +58,11 @@\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], time);\n+  } else if (body.value == Body.Sun) {\n+    return Vector(0.0, 0.0, 0.0, time);\n   }\n-  // else if (body == Body.Sun) {\n-  //   return Vector(0.0, 0.0, 0.0, time);\n-  // }\n \n //     else if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n"
                },
                {
                    "date": 1642430203712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], time);\n-  } else if (body.value == Body.Sun) {\n+  } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n \n //     else if body == Body.Pluto:\n"
                },
                {
                    "date": 1642478210621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // import 'src/errors.dart';\n import 'src/espenac.dart';\n import 'src/rotateVector.dart';\n import 'src/vsop.dart';\n-// import 'calc_moon.dart';\n+import 'calc_moon.dart';\n // import 'calc_pluto.dart';\n // import 'dart:math';\n \n // # -------------------------\n@@ -67,12 +67,12 @@\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n-//     else if body == Body.Moon:\n-//         e = _CalcEarth(time)\n-//         m = GeoMoon(time)[0]  # 0 - вектор | 1 - долгота луны\n-//         return Vector(e.x+m.x, e.y+m.y, e.z+m.z, time)\n+    else if (body == Body.Moon) {\n+        Vector e = _CalcEarth(time);\n+        Vector m = GeoMoon(time)[0];  // 0 - вектор | 1 - долгота луны\n+        return Vector(e.x+m.x, e.y+m.y, e.z+m.z, time);}\n \n //     else if body == Body.EMB:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]\n@@ -102,9 +102,11 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-// def _CalcEarth(time):\n+Vector _CalcEarth(time) {\n+  return calcVsop(vsop[body.index], time);\n+// }\n //     return CalcVsop(vsop[Body.Earth.value], time)\n \n \n // def GeoLon(body, time):\n"
                },
                {
                    "date": 1642478225926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n     else if (body == Body.Moon) {\n         Vector e = _CalcEarth(time);\n-        Vector m = GeoMoon(time)[0];  // 0 - вектор | 1 - долгота луны\n+        Vector m = geoMoon(time)[0];  // 0 - вектор | 1 - долгота луны\n         return Vector(e.x+m.x, e.y+m.y, e.z+m.z, time);}\n \n //     else if body == Body.EMB:\n //         e = _CalcEarth(time)\n"
                },
                {
                    "date": 1642478383777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,13 @@\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n-    else if (body == Body.Moon) {\n-        Vector e = _CalcEarth(time);\n-        Vector m = geoMoon(time)[0];  // 0 - вектор | 1 - долгота луны\n-        return Vector(e.x+m.x, e.y+m.y, e.z+m.z, time);}\n+  else if (body == Body.Moon) {\n+    Vector e = _CalcEarth(time, body.index);\n+    Vector m = geoMoon(time); // 0 - вектор | 1 - долгота луны\n+    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, time);\n+  }\n \n //     else if body == Body.EMB:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]\n@@ -102,11 +103,11 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-Vector _CalcEarth(time) {\n+Vector _CalcEarth(time, body) {\n   return calcVsop(vsop[body.index], time);\n-// }\n+}\n //     return CalcVsop(vsop[Body.Earth.value], time)\n \n \n // def GeoLon(body, time):\n"
                },
                {
                    "date": 1642478394918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n   else if (body == Body.Moon) {\n-    Vector e = _CalcEarth(time, body.index);\n+    Vector e = calcEarth(time, body.index);\n     Vector m = geoMoon(time); // 0 - вектор | 1 - долгота луны\n     return Vector(e.x + m.x, e.y + m.y, e.z + m.z, time);\n   }\n \n@@ -103,9 +103,9 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-Vector _CalcEarth(time, body) {\n+Vector calcEarth(time, body) {\n   return calcVsop(vsop[body.index], time);\n }\n //     return CalcVsop(vsop[Body.Earth.value], time)\n \n"
                },
                {
                    "date": 1642479132070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   double? tt;\n   double? ut;\n   Timeit(double ut) {\n     ut = ut;\n-    var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n+    var deltaT = Timex().deltaTEspenakMeeus(ut);\n     tt = ut + deltaT / 86400.0;\n   }\n }\n \n"
                },
                {
                    "date": 1642479456322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,11 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-double helioEclipLon(body, time) {\n-  var hv = helioVector(body, time);\n-  var helio = ecliptic(hv, time);\n+double helioEclipLon(body, tt) {\n+  var hv = helioVector(body, tt);\n+  var helio = ecliptic(hv, tt);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n"
                },
                {
                    "date": 1642479523753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,11 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-double helioEclipLon(body, tt) {\n-  var hv = helioVector(body, tt);\n-  var helio = ecliptic(hv, tt);\n+double helioEclipLon(body, ut) {\n+  var hv = helioVector(body, ut);\n+  var helio = ecliptic(hv, ut);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n"
                },
                {
                    "date": 1642479707234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,11 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n-double helioEclipLon(body, ut) {\n-  var hv = helioVector(body, ut);\n-  var helio = ecliptic(hv, ut);\n+double helioEclipLon(body, time) {\n+  var hv = helioVector(body, time);\n+  var helio = ecliptic(hv, time);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n"
                },
                {
                    "date": 1642479731419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n List parseArgs(year, month, day, hour, minute, lat, lon) {\n   double time = make(year, month, day, hour, minute, 0);\n   Observer observer = Observer(lat, lon);\n-  return [observer, time];\n+  return [observer, Timeit(time)];\n }\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n"
                },
                {
                    "date": 1642480113230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,12 @@\n // # --------------------------------------\n class Timeit {\n   double? tt;\n   double? ut;\n-  Timeit(double ut) {\n-    ut = ut;\n-    var deltaT = Timex().deltaTEspenakMeeus(ut);\n-    tt = ut + deltaT / 86400.0;\n+  Timeit(double time) {\n+    ut = time;\n+    var deltaT = Timex().deltaTEspenakMeeus(time);\n+    tt = time + deltaT / 86400.0;\n   }\n }\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n"
                },
                {
                    "date": 1642480333992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,10 @@\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n double helioEclipLon(body, time) {\n-  var hv = helioVector(body, time);\n-  var helio = ecliptic(hv, time);\n+  var hv = helioVector(body, time.ut);\n+  var helio = ecliptic(hv, time.ut);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n"
                },
                {
                    "date": 1642480424106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,26 +53,26 @@\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n-Vector? helioVector(body, time) {\n+Vector? helioVector(body, ut) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n   if (body.index >= 0 && body.index < vsop.length) {\n-    return calcVsop(vsop[body.index], time);\n+    return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n-    return Vector(0.0, 0.0, 0.0, time);\n+    return Vector(0.0, 0.0, 0.0, ut);\n   }\n \n //     else if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n   else if (body == Body.Moon) {\n-    Vector e = calcEarth(time, body.index);\n-    Vector m = geoMoon(time); // 0 - вектор | 1 - долгота луны\n-    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, time);\n+    Vector e = calcEarth(ut, body.index);\n+    Vector m = geoMoon(ut); // 0 - вектор | 1 - долгота луны\n+    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, ut);\n   }\n \n //     else if body == Body.EMB:\n //         e = _CalcEarth(time)\n@@ -83,9 +83,9 @@\n //     else if body == Body.SSB:\n //         return CalcSolarSystemBarycenter(time)\n \n   else {\n-    return Vector(0.0, 0.0, 0.0, time);\n+    return Vector(0.0, 0.0, 0.0, ut);\n   }\n }\n \n // def HelioDistance(body, time):\n"
                },
                {
                    "date": 1642480522343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,15 +47,15 @@\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n double helioEclipLon(body, time) {\n-  var hv = helioVector(body, time.ut);\n+  var hv = helioVector(body, time.ut, time.tt);\n   var helio = ecliptic(hv, time.ut);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n-Vector? helioVector(body, ut) {\n+Vector? helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n@@ -68,11 +68,11 @@\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n   else if (body == Body.Moon) {\n-    Vector e = calcEarth(ut, body.index);\n-    Vector m = geoMoon(ut); // 0 - вектор | 1 - долгота луны\n-    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, ut);\n+    Vector e = calcEarth(tt, body.index);\n+    Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n+    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n   }\n \n //     else if body == Body.EMB:\n //         e = _CalcEarth(time)\n"
                },
                {
                    "date": 1642480855957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n   else if (body == Body.Moon) {\n+    print('object');\n     Vector e = calcEarth(tt, body.index);\n     Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n     return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n   }\n"
                },
                {
                    "date": 1642480932462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,22 +60,19 @@\n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n+  } else if (body == Body.Moon) {\n+    print('object');\n+    Vector e = calcEarth(tt, body.index);\n+    Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n+    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n   }\n-\n //     else if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n \n-  else if (body == Body.Moon) {\n-    print('object');\n-    Vector e = calcEarth(tt, body.index);\n-    Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n-    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n-  }\n-\n //     else if body == Body.EMB:\n //         e = _CalcEarth(time)\n //         m = GeoMoon(time)[0]\n //         d = 1.0 + EARTH_MOON_MASS_RATIO\n"
                },
                {
                    "date": 1642480961205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n Vector? helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n-  if (body.index >= 0 && body.index < vsop.length) {\n+  if (body.index == 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Moon) {\n"
                },
                {
                    "date": 1642481032410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n Vector? helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n-  if (body.index == 0 && body.index < vsop.length) {\n+  if (body.index == 1 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Moon) {\n"
                },
                {
                    "date": 1642481175719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n Vector calcEarth(time, body) {\n-  return calcVsop(vsop[body.index], time);\n+  return calcVsop(vsop[body], time);\n }\n //     return CalcVsop(vsop[Body.Earth.value], time)\n \n \n"
                },
                {
                    "date": 1642481743109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,18 +56,19 @@\n \n Vector? helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n-  if (body.index == 1 && body.index < vsop.length) {\n+  if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n-  } else if (body == Body.Moon) {\n-    print('object');\n-    Vector e = calcEarth(tt, body.index);\n-    Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n-    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n   }\n+  // else if (body == Body.Moon) {\n+  //   print('object');\n+  //   Vector e = calcEarth(tt, body.index);\n+  //   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n+  //   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n+  // }\n //     else if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n"
                },
                {
                    "date": 1642481808752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n \n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n+    print('object');\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n   // else if (body == Body.Moon) {\n   //   print('object');\n"
                },
                {
                    "date": 1642481908601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,8 @@\n \n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n-    print('object');\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n   // else if (body == Body.Moon) {\n   //   print('object');\n"
                },
                {
                    "date": 1642483372132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,15 +60,14 @@\n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n+  } else if (body == Body.Moon) {\n+    print('object');\n+    Vector e = calcEarth(tt, body.index);\n+    Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n+    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n   }\n-  // else if (body == Body.Moon) {\n-  //   print('object');\n-  //   Vector e = calcEarth(tt, body.index);\n-  //   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n-  //   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n-  // }\n //     else if body == Body.Pluto:\n //         planet = CalcPluto(time, True)\n //         return Vector(planet.x, planet.y, planet.z, time)\n //         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n"
                },
                {
                    "date": 1642483546954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n Vector? helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n-  if (body.index >= 0 && body.index < vsop.length) {\n+  if (body.index == 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Moon) {\n"
                },
                {
                    "date": 1642484515539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Moon) {\n-    print('object');\n     Vector e = calcEarth(tt, body.index);\n     Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n     return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n   }\n"
                },
                {
                    "date": 1642566823959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,40 +64,13 @@\n   } else if (body == Body.Moon) {\n     Vector e = calcEarth(tt, body.index);\n     Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n     return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n-  }\n-//     else if body == Body.Pluto:\n-//         planet = CalcPluto(time, True)\n-//         return Vector(planet.x, planet.y, planet.z, time)\n-//         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n-\n-//     else if body == Body.EMB:\n-//         e = _CalcEarth(time)\n-//         m = GeoMoon(time)[0]\n-//         d = 1.0 + EARTH_MOON_MASS_RATIO\n-//         return Vector(e.x+(m.x/d), e.y+(m.y/d), e.z+(m.z/d), time)\n-\n-//     else if body == Body.SSB:\n-//         return CalcSolarSystemBarycenter(time)\n-\n-  else {\n+  } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n }\n \n-// def HelioDistance(body, time):\n-//     \"\"\"Расчет дистанции до солнца.\n-//     Returns -> расстояние в AU.\n-//     \"\"\"\n-//     if body == Body.Sun:\n-//         return 0.0\n-\n-//     if 0 <= body.value < len(vsop):\n-//         return VsopHelioDistance(vsop[body.value], time)\n-\n-//     return HelioVector(body, time).Length()\n-\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n@@ -105,47 +78,41 @@\n   return calcVsop(vsop[body], time);\n }\n //     return CalcVsop(vsop[Body.Earth.value], time)\n \n+double GeoLon(body, time) {\n+  // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n \n-// def GeoLon(body, time):\n-//     \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n+  Vector geoVector = GeoVector(body, time);\n+  var geoPos = ecliptic(geoVector, time);\n+  return geoPos.elon;\n+}\n \n-//     geoVector = GeoVector(body, time, False)\n-//     geoPos = Ecliptic(geoVector, time)\n-//     return geoPos.elon\n+Vector GeoVector(body, time) {\n+  //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n \n+  if (body == Body.Moon) {\n+    return geoMoon(time);\n+  }\n+  // не использую потому что есть погрешность 30-70 минут\n+  // забираю отдельно из CalcMoon\n \n-// def GeoVector(body, time, aberration):\n-//     \"\"\"Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\"\"\"\n+  if (body == Body.Earth) {\n+    return Vector(0.0, 0.0, 0.0, time);\n+  }\n \n-//     if body == Body.Moon:\n-//         return GeoMoon(time)[0]\n-//     # не использую потому что есть погрешность 30-70 минут\n-//     # забираю отдельно из CalcMoon\n+  var earth = calcEarth(body, time);\n \n-//     if body == Body.Earth:\n-//         return Vector(0.0, 0.0, 0.0, time)\n+  // Correct for light-travel time, to get position of body as seen from Earth's center.\n \n-//     if not aberration:\n-//         # No aberration, so calculate Earth's position once, at the time of observation.\n-//         earth = _CalcEarth(time)\n+  // for _ in range(10)\n+  var h = helioVector(body, time.ut, time.tt);\n \n-//     # Correct for light-travel time, to get position of body as seen from Earth's center.\n-//     ltime = time\n-//     for _ in range(10):\n-//         h = HelioVector(body, ltime)\n-//         if aberration:\n-//             earth = _CalcEarth(ltime)\n+  var geo = Vector(h!.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n \n-//         geo = Vector(h.x-earth.x, h.y-earth.y, h.z-earth.z, time)\n-//         ltime2 = time.AddDays(-geo.Length() / C_AUDAY)\n-//         dt = abs(ltime2.tt - ltime.tt)\n-//         if dt < 1.0e-9:\n-//             return geo\n+  return geo;\n+}\n \n-//         ltime = ltime2\n-\n //     raise Error('Light-travel time solver did not converge: dt={}'.format(dt))\n \n \n \n"
                },
                {
                    "date": 1642566886032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,14 +100,9 @@\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n \n   var earth = calcEarth(body, time);\n-\n-  // Correct for light-travel time, to get position of body as seen from Earth's center.\n-\n-  // for _ in range(10)\n   var h = helioVector(body, time.ut, time.tt);\n-\n   var geo = Vector(h!.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n \n   return geo;\n }\n"
                },
                {
                    "date": 1642566953757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-Vector calcEarth(time, body) {\n+Vector calcEarth(body, time) {\n   return calcVsop(vsop[body], time);\n }\n //     return CalcVsop(vsop[Body.Earth.value], time)\n \n"
                },
                {
                    "date": 1642567091372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n Vector calcEarth(body, time) {\n-  return calcVsop(vsop[body], time);\n+  return calcVsop(vsop[body.index], time);\n }\n //     return CalcVsop(vsop[Body.Earth.value], time)\n \n double GeoLon(body, time) {\n"
                },
                {
                    "date": 1642567514071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,29 +81,29 @@\n \n double GeoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n \n-  Vector geoVector = GeoVector(body, time);\n-  var geoPos = ecliptic(geoVector, time);\n+  Vector geoVector = GeoVector(body, time.ut, time.tt);\n+  var geoPos = ecliptic(geoVector, time.ut);\n   return geoPos.elon;\n }\n \n-Vector GeoVector(body, time) {\n+Vector GeoVector(body, ut, tt) {\n   //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n \n   if (body == Body.Moon) {\n-    return geoMoon(time);\n+    return geoMoon(tt);\n   }\n   // не использую потому что есть погрешность 30-70 минут\n   // забираю отдельно из CalcMoon\n \n   if (body == Body.Earth) {\n-    return Vector(0.0, 0.0, 0.0, time);\n+    return Vector(0.0, 0.0, 0.0, ut);\n   }\n \n-  var earth = calcEarth(body, time);\n-  var h = helioVector(body, time.ut, time.tt);\n-  var geo = Vector(h!.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n+  var earth = calcEarth(body, ut);\n+  var h = helioVector(body, ut, tt);\n+  var geo = Vector(h!.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n \n   return geo;\n }\n \n"
                },
                {
                    "date": 1642567961344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,13 +60,15 @@\n   if (body.index == 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n-  } else if (body == Body.Moon) {\n-    Vector e = calcEarth(tt, body.index);\n-    Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n-    return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n-  } else {\n+  }\n+  // else if (body == Body.Moon) {\n+  //   Vector e = calcEarth(tt, body.index);\n+  //   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n+  //   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n+  // }\n+  else {\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n }\n \n@@ -89,11 +91,11 @@\n \n Vector GeoVector(body, ut, tt) {\n   //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n \n-  if (body == Body.Moon) {\n-    return geoMoon(tt);\n-  }\n+  // if (body == Body.Moon) {\n+  //   return geoMoon(tt);\n+  // }\n   // не использую потому что есть погрешность 30-70 минут\n   // забираю отдельно из CalcMoon\n \n   if (body == Body.Earth) {\n@@ -108,11 +110,8 @@\n }\n \n //     raise Error('Light-travel time solver did not converge: dt={}'.format(dt))\n \n-\n-\n-\n // class Time {\n //   var ut, tt;\n // Time(this.ut);\n // double init(ut, tt) {\n@@ -126,5 +125,5 @@\n // }\n \n //     def AddDays(self, days):\n //         \"\"\"Calculates the sum or difference of a #Time \"\"\"\n-//         return Time(self.ut + days)\n\\ No newline at end of file\n+//         return Time(self.ut + days)\n"
                },
                {
                    "date": 1642568140253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n-Vector? helioVector(body, ut, tt) {\n+Vector helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n   if (body.index == 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n@@ -78,19 +78,18 @@\n \n Vector calcEarth(body, time) {\n   return calcVsop(vsop[body.index], time);\n }\n-//     return CalcVsop(vsop[Body.Earth.value], time)\n \n-double GeoLon(body, time) {\n+double geoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n \n-  Vector geoVector = GeoVector(body, time.ut, time.tt);\n-  var geoPos = ecliptic(geoVector, time.ut);\n+  Vector geoV = geoVector(body, time.ut, time.tt);\n+  var geoPos = ecliptic(geoV, time.ut);\n   return geoPos.elon;\n }\n \n-Vector GeoVector(body, ut, tt) {\n+Vector geoVector(body, ut, tt) {\n   //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n \n   // if (body == Body.Moon) {\n   //   return geoMoon(tt);\n@@ -103,9 +102,9 @@\n   }\n \n   var earth = calcEarth(body, ut);\n   var h = helioVector(body, ut, tt);\n-  var geo = Vector(h!.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n+  var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n \n   return geo;\n }\n \n"
                },
                {
                    "date": 1642568165732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n   var earth = calcEarth(body, ut);\n   var h = helioVector(body, ut, tt);\n   var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n \n-  return geo;\n+  return geo.x;\n }\n \n //     raise Error('Light-travel time solver did not converge: dt={}'.format(dt))\n \n"
                },
                {
                    "date": 1642568206378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n   var geoPos = ecliptic(geoV, time.ut);\n   return geoPos.elon;\n }\n \n-Vector geoVector(body, ut, tt) {\n+double geoVector(body, ut, tt) {\n   //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n \n   // if (body == Body.Moon) {\n   //   return geoMoon(tt);\n"
                },
                {
                    "date": 1642568221509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n   // не использую потому что есть погрешность 30-70 минут\n   // забираю отдельно из CalcMoon\n \n   if (body == Body.Earth) {\n-    return Vector(0.0, 0.0, 0.0, ut);\n+    return Vector(0.0, 0.0, 0.0, ut).x;\n   }\n \n   var earth = calcEarth(body, ut);\n   var h = helioVector(body, ut, tt);\n"
                },
                {
                    "date": 1642568253132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n   var geoPos = ecliptic(geoV, time.ut);\n   return geoPos.elon;\n }\n \n-double geoVector(body, ut, tt) {\n+Vector geoVector(body, ut, tt) {\n   //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n \n   // if (body == Body.Moon) {\n   //   return geoMoon(tt);\n@@ -97,16 +97,16 @@\n   // не использую потому что есть погрешность 30-70 минут\n   // забираю отдельно из CalcMoon\n \n   if (body == Body.Earth) {\n-    return Vector(0.0, 0.0, 0.0, ut).x;\n+    return Vector(0.0, 0.0, 0.0, ut);\n   }\n \n   var earth = calcEarth(body, ut);\n   var h = helioVector(body, ut, tt);\n   var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n \n-  return geo.x;\n+  return geo;\n }\n \n //     raise Error('Light-travel time solver did not converge: dt={}'.format(dt))\n \n"
                },
                {
                    "date": 1642568659914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n Vector helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n-  if (body.index == 0 && body.index < vsop.length) {\n+  if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n"
                },
                {
                    "date": 1642569321965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n double helioEclipLon(body, time) {\n-  var hv = helioVector(body, time.ut, time.tt);\n+  Vector hv = helioVector(body, time.ut, time.tt);\n   var helio = ecliptic(hv, time.ut);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n"
                },
                {
                    "date": 1642569619626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n // # ------------------------\n \n double helioEclipLon(body, time) {\n   Vector hv = helioVector(body, time.ut, time.tt);\n+  print(hv);\n   var helio = ecliptic(hv, time.ut);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n"
                },
                {
                    "date": 1642569641964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n // # ------------------------\n \n double helioEclipLon(body, time) {\n   Vector hv = helioVector(body, time.ut, time.tt);\n-  print(hv);\n+  print(hv.x);\n   var helio = ecliptic(hv, time.ut);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n"
                },
                {
                    "date": 1642569676993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n \n   if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Sun) {\n+    print('object');\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n   // else if (body == Body.Moon) {\n   //   Vector e = calcEarth(tt, body.index);\n"
                },
                {
                    "date": 1642569835921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,13 +57,13 @@\n \n Vector helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n-  if (body.index >= 0 && body.index < vsop.length) {\n-    return calcVsop(vsop[body.index], ut);\n-  } else if (body == Body.Sun) {\n+  if (body == Body.Sun) {\n     print('object');\n     return Vector(0.0, 0.0, 0.0, ut);\n+  } else if (body.index >= 0 && body.index < vsop.length) {\n+    return calcVsop(vsop[body.index], ut);\n   }\n   // else if (body == Body.Moon) {\n   //   Vector e = calcEarth(tt, body.index);\n   //   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n"
                },
                {
                    "date": 1642569863671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n // # ------------------------\n \n double helioEclipLon(body, time) {\n   Vector hv = helioVector(body, time.ut, time.tt);\n-  print(hv.x);\n   var helio = ecliptic(hv, time.ut);\n   return helio.elon;\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n"
                },
                {
                    "date": 1642569897848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,8 @@\n Vector helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n   if (body == Body.Sun) {\n-    print('object');\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   }\n"
                },
                {
                    "date": 1642570235305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,38 +75,35 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-Vector calcEarth(body, time) {\n-  return calcVsop(vsop[body.index], time);\n-}\n-\n double geoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n \n   Vector geoV = geoVector(body, time.ut, time.tt);\n   var geoPos = ecliptic(geoV, time.ut);\n   return geoPos.elon;\n }\n \n+Vector calcEarth(body, time) {\n+  return calcVsop(vsop[body.index], time);\n+}\n+\n Vector geoVector(body, ut, tt) {\n   //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n \n   // if (body == Body.Moon) {\n-  //   return geoMoon(tt);\n-  // }\n-  // не использую потому что есть погрешность 30-70 минут\n-  // забираю отдельно из CalcMoon\n+  //   return geoMoon(tt);}\n \n   if (body == Body.Earth) {\n     return Vector(0.0, 0.0, 0.0, ut);\n+  } else if (body.index >= 0 && body.index < vsop.length) {\n+    var earth = calcEarth(body, ut);\n+    var h = helioVector(body, ut, tt);\n+    var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n+\n+    return geo;\n   }\n-\n-  var earth = calcEarth(body, ut);\n-  var h = helioVector(body, ut, tt);\n-  var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n-\n-  return geo;\n }\n \n //     raise Error('Light-travel time solver did not converge: dt={}'.format(dt))\n \n"
                },
                {
                    "date": 1642570354949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,29 +78,30 @@\n \n double geoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n \n-  Vector geoV = geoVector(body, time.ut, time.tt);\n+  Vector? geoV = geoVector(body, time.ut, time.tt);\n   var geoPos = ecliptic(geoV, time.ut);\n   return geoPos.elon;\n }\n \n Vector calcEarth(body, time) {\n   return calcVsop(vsop[body.index], time);\n }\n \n-Vector geoVector(body, ut, tt) {\n+var earth, h, geo;\n+Vector? geoVector(body, ut, tt) {\n   //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n \n   // if (body == Body.Moon) {\n   //   return geoMoon(tt);}\n \n   if (body == Body.Earth) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n-    var earth = calcEarth(body, ut);\n-    var h = helioVector(body, ut, tt);\n-    var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n+    earth = calcEarth(body, ut);\n+    h = helioVector(body, ut, tt);\n+    geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n \n     return geo;\n   }\n }\n"
                },
                {
                    "date": 1642570536809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n   return geoPos.elon;\n }\n \n Vector calcEarth(body, time) {\n-  return calcVsop(vsop[body.index], time);\n+  return calcVsop(vsop[2], time);\n }\n \n var earth, h, geo;\n Vector? geoVector(body, ut, tt) {\n"
                },
                {
                    "date": 1642570628257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n   return geoPos.elon;\n }\n \n Vector calcEarth(body, time) {\n-  return calcVsop(vsop[2], time);\n+  return calcVsop(vsop[Body.Earth.index], time);\n }\n \n var earth, h, geo;\n Vector? geoVector(body, ut, tt) {\n"
                },
                {
                    "date": 1642571438077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // import 'src/errors.dart';\n import 'src/espenac.dart';\n import 'src/rotateVector.dart';\n import 'src/vsop.dart';\n-import 'calc_moon.dart';\n+// import 'calc_moon.dart';\n // import 'calc_pluto.dart';\n // import 'dart:math';\n \n // # -------------------------\n"
                },
                {
                    "date": 1642572661755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // import 'src/barycenter.dart';\n+import 'calc_pluto_simple.dart';\n import 'src/classes.dart';\n import 'src/constants.dart';\n // import 'src/errors.dart';\n import 'src/espenac.dart';\n@@ -60,19 +61,30 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n-  }\n-  // else if (body == Body.Moon) {\n-  //   Vector e = calcEarth(tt, body.index);\n-  //   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n-  //   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n-  // }\n-  else {\n+  } else if (body == Body.Pluto) {\n+    var p = pluto();\n+    return Vector(p[0], p[1], p[2], ut);\n+  } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n }\n+// else if (body == Body.Moon) {\n+//   Vector e = calcEarth(tt, body.index);\n+//   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n+//   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n+// }\n \n+// if (body == Body.Sun) {\n+//     return Vector(0.0, 0.0, 0.0, ut);\n+//   } else if (body == Body.Pluto) {\n+//     var p = pluto();\n+//     return Vector(p[0], p[1], p[2], ut);\n+//   } else (body.index >= 0 && body.index < vsop.length) {\n+//     return calcVsop(vsop[body.index], ut);\n+//   }\n+\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n"
                },
                {
                    "date": 1642572683345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,13 +59,13 @@\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n-  } else if (body.index >= 0 && body.index < vsop.length) {\n-    return calcVsop(vsop[body.index], ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto();\n     return Vector(p[0], p[1], p[2], ut);\n+  } else if (body.index >= 0 && body.index < vsop.length) {\n+    return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n }\n"
                },
                {
                    "date": 1642572773730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto();\n-    return Vector(p[0], p[1], p[2], ut);\n+    return Vector(p[3], p[4], p[5], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642572961772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto();\n-    return Vector(p[3], p[4], p[5], ut);\n+    return Vector(p[0], p[1], p[2], 0);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642573037718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto();\n-    return Vector(p[0], p[1], p[2], 0);\n+    return Vector(p[0], p[2], p[1], 0);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642573058362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto();\n-    return Vector(p[0], p[2], p[1], 0);\n+    return Vector(p[2], p[1], p[0], 0);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642573215823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto();\n-    return Vector(p[2], p[1], p[0], 0);\n+    return Vector(p[6], p[7], p[8], 0);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642573601927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n-    var p = pluto();\n+    var p = pluto(1977, 5, 27, 16, 52);\n     return Vector(p[6], p[7], p[8], 0);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n"
                },
                {
                    "date": 1642573627091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n-    var p = pluto(1977, 5, 27, 16, 52);\n+    var p = pluto(1900, 5, 27, 16, 52);\n     return Vector(p[6], p[7], p[8], 0);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n"
                },
                {
                    "date": 1642573745057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n-    var p = pluto(1900, 5, 27, 16, 52);\n+    var p = pluto(2054, 5, 27, 16, 52);\n     return Vector(p[6], p[7], p[8], 0);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n"
                },
                {
                    "date": 1642573851978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(2054, 5, 27, 16, 52);\n-    return Vector(p[6], p[7], p[8], 0);\n+    return Vector(p[6], p[7], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642573871321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(2054, 5, 27, 16, 52);\n-    return Vector(p[6], p[7], p[8], ut);\n+    return Vector(p[6], p[7], -p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642573886307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(2054, 5, 27, 16, 52);\n-    return Vector(p[6], p[7], -p[8], ut);\n+    return Vector(p[6], -p[7], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642573902270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(2054, 5, 27, 16, 52);\n-    return Vector(p[6], -p[7], p[8], ut);\n+    return Vector(-p[6], p[7], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642574008147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n \n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n-    var p = pluto(2054, 5, 27, 16, 52);\n-    return Vector(-p[6], p[7], p[8], ut);\n+    var p = pluto(1977, 5, 27, 16, 52);\n+    return Vector(p[6], p[7], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642574089949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(1977, 5, 27, 16, 52);\n-    return Vector(p[6], p[7], p[8], ut);\n+    return Vector(p[0], p[7], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642574185019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(1977, 5, 27, 16, 52);\n-    return Vector(p[0], p[7], p[8], ut);\n+    return Vector(-27.9, p[7], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642574238344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(1977, 5, 27, 16, 52);\n-    return Vector(-27.9, p[7], p[8], ut);\n+    return Vector(p[0], p[7], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642574368593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,17 +74,8 @@\n //   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n //   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n // }\n \n-// if (body == Body.Sun) {\n-//     return Vector(0.0, 0.0, 0.0, ut);\n-//   } else if (body == Body.Pluto) {\n-//     var p = pluto();\n-//     return Vector(p[0], p[1], p[2], ut);\n-//   } else (body.index >= 0 && body.index < vsop.length) {\n-//     return calcVsop(vsop[body.index], ut);\n-//   }\n-\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n@@ -108,8 +99,12 @@\n   //   return geoMoon(tt);}\n \n   if (body == Body.Earth) {\n     return Vector(0.0, 0.0, 0.0, ut);\n+  } else if (body == Body.Pluto) {\n+    earth = calcEarth(body, ut);\n+    h = helioVector(body, ut, tt);\n+    geo = Vector(h.x + earth.x, h.y + earth.y, h.z + earth.z, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     earth = calcEarth(body, ut);\n     h = helioVector(body, ut, tt);\n     geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n"
                },
                {
                    "date": 1642574425225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     earth = calcEarth(body, ut);\n     h = helioVector(body, ut, tt);\n-    geo = Vector(h.x + earth.x, h.y + earth.y, h.z + earth.z, ut);\n+    geo = Vector(h.x - earth.x, h.y + earth.y, h.z + earth.z, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     earth = calcEarth(body, ut);\n     h = helioVector(body, ut, tt);\n     geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n"
                },
                {
                    "date": 1642574593596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,12 +99,8 @@\n   //   return geoMoon(tt);}\n \n   if (body == Body.Earth) {\n     return Vector(0.0, 0.0, 0.0, ut);\n-  } else if (body == Body.Pluto) {\n-    earth = calcEarth(body, ut);\n-    h = helioVector(body, ut, tt);\n-    geo = Vector(h.x - earth.x, h.y + earth.y, h.z + earth.z, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     earth = calcEarth(body, ut);\n     h = helioVector(body, ut, tt);\n     geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n"
                },
                {
                    "date": 1642574875796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(1977, 5, 27, 16, 52);\n-    return Vector(p[0], p[7], p[8], ut);\n+    return Vector(p[6], p[4], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642574896545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(1977, 5, 27, 16, 52);\n-    return Vector(p[6], p[4], p[8], ut);\n+    return Vector(p[6], p[7], p[8], ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642575458985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(1977, 5, 27, 16, 52);\n-    return Vector(p[6], p[7], p[8], ut);\n+    return Vector(p[6], p[7], p[8], ut); // топоцентрик\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642575627165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n-\n+  print(ut);\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n     var p = pluto(1977, 5, 27, 16, 52);\n"
                },
                {
                    "date": 1642575737134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n   print(ut);\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body == Body.Pluto) {\n-    var p = pluto(1977, 5, 27, 16, 52);\n+    var p = pluto(ut);\n     return Vector(p[6], p[7], p[8], ut); // топоцентрик\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n"
                },
                {
                    "date": 1642575808723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,14 +56,11 @@\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector helioVector(body, ut, tt) {\n   //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n-  print(ut);\n+\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n-  } else if (body == Body.Pluto) {\n-    var p = pluto(ut);\n-    return Vector(p[6], p[7], p[8], ut); // топоцентрик\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642575864447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,16 @@\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n \n double helioEclipLon(body, time) {\n-  Vector hv = helioVector(body, time.ut, time.tt);\n-  var helio = ecliptic(hv, time.ut);\n-  return helio.elon;\n+  if (body == Body.Pluto) {\n+    var p = pluto(time);\n+    return p[0]; // топоцентрик\n+  } else {\n+    Vector hv = helioVector(body, time.ut, time.tt);\n+    var helio = ecliptic(hv, time.ut);\n+    return helio.elon;\n+  }\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector helioVector(body, ut, tt) {\n"
                },
                {
                    "date": 1642575898871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,12 +82,16 @@\n // # ----------------------\n \n double geoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n-\n-  Vector? geoV = geoVector(body, time.ut, time.tt);\n-  var geoPos = ecliptic(geoV, time.ut);\n-  return geoPos.elon;\n+  if (body == Body.Pluto) {\n+    var p = pluto(time);\n+    return p[1]; // топоцентрик\n+  } else {\n+    Vector? geoV = geoVector(body, time.ut, time.tt);\n+    var geoPos = ecliptic(geoV, time.ut);\n+    return geoPos.elon;\n+  }\n }\n \n Vector calcEarth(body, time) {\n   return calcVsop(vsop[Body.Earth.index], time);\n"
                },
                {
                    "date": 1642577662944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,11 @@\n-// import 'src/barycenter.dart';\n import 'calc_pluto_simple.dart';\n import 'src/classes.dart';\n import 'src/constants.dart';\n-// import 'src/errors.dart';\n import 'src/espenac.dart';\n import 'src/rotateVector.dart';\n import 'src/vsop.dart';\n // import 'calc_moon.dart';\n-// import 'calc_pluto.dart';\n-// import 'dart:math';\n \n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n@@ -46,13 +42,12 @@\n \n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n-\n double helioEclipLon(body, time) {\n   if (body == Body.Pluto) {\n     var p = pluto(time);\n-    return p[0]; // топоцентрик\n+    return p[0]; // эклиптика'\n   } else {\n     Vector hv = helioVector(body, time.ut, time.tt);\n     var helio = ecliptic(hv, time.ut);\n     return helio.elon;\n@@ -60,23 +55,16 @@\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector helioVector(body, ut, tt) {\n-  //     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n-\n   if (body == Body.Sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n }\n-// else if (body == Body.Moon) {\n-//   Vector e = calcEarth(tt, body.index);\n-//   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n-//   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n-// }\n \n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n@@ -84,11 +72,11 @@\n double geoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n   if (body == Body.Pluto) {\n     var p = pluto(time);\n-    return p[1]; // топоцентрик\n+    return p[1]; // гео\n   } else {\n-    Vector? geoV = geoVector(body, time.ut, time.tt);\n+    Vector geoV = geoVector(body, time.ut, time.tt);\n     var geoPos = ecliptic(geoV, time.ut);\n     return geoPos.elon;\n   }\n }\n@@ -96,40 +84,31 @@\n Vector calcEarth(body, time) {\n   return calcVsop(vsop[Body.Earth.index], time);\n }\n \n-var earth, h, geo;\n-Vector? geoVector(body, ut, tt) {\n-  //Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\n-\n-  // if (body == Body.Moon) {\n-  //   return geoMoon(tt);}\n-\n+// var earth, h, geo;\n+Vector geoVector(body, ut, tt) {\n   if (body == Body.Earth) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n-    earth = calcEarth(body, ut);\n-    h = helioVector(body, ut, tt);\n-    geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n+    var earth = calcEarth(body, ut);\n+    var h = helioVector(body, ut, tt);\n+    var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n \n     return geo;\n+  } else {\n+    return Vector(0.0, 0.0, 0.0, ut);\n   }\n }\n \n-//     raise Error('Light-travel time solver did not converge: dt={}'.format(dt))\n-\n-// class Time {\n-//   var ut, tt;\n-// Time(this.ut);\n-// double init(ut, tt) {\n-//   if (tt == null) {\n-//     var deltaT = Timex().DeltaT_EspenakMeeus(ut);\n-//     tt = ut + deltaT / 86400.0;\n-//   } else {\n-//     tt = tt;\n-//   }\n-//   return tt;\n+// else if (body == Body.Moon) {\n+//   Vector e = calcEarth(tt, body.index);\n+//   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n+//   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n // }\n \n+  // if (body == Body.Moon) {\n+  //   return geoMoon(tt);}\n+\n //     def AddDays(self, days):\n //         \"\"\"Calculates the sum or difference of a #Time \"\"\"\n //         return Time(self.ut + days)\n"
                },
                {
                    "date": 1642577721184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,8 @@\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     var earth = calcEarth(body, ut);\n     var h = helioVector(body, ut, tt);\n     var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n-\n     return geo;\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n"
                },
                {
                    "date": 1642578703247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n // # ------------------------\n double helioEclipLon(body, time) {\n-  if (body == Body.Pluto) {\n+  if (body == Body.pluto) {\n     var p = pluto(time);\n     return p[0]; // эклиптика'\n   } else {\n     Vector hv = helioVector(body, time.ut, time.tt);\n@@ -55,9 +55,9 @@\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n Vector helioVector(body, ut, tt) {\n-  if (body == Body.Sun) {\n+  if (body == Body.sun) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     return calcVsop(vsop[body.index], ut);\n   } else {\n@@ -70,9 +70,9 @@\n // # ----------------------\n \n double geoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n-  if (body == Body.Pluto) {\n+  if (body == Body.pluto) {\n     var p = pluto(time);\n     return p[1]; // гео\n   } else {\n     Vector geoV = geoVector(body, time.ut, time.tt);\n@@ -81,14 +81,14 @@\n   }\n }\n \n Vector calcEarth(body, time) {\n-  return calcVsop(vsop[Body.Earth.index], time);\n+  return calcVsop(vsop[Body.earth.index], time);\n }\n \n // var earth, h, geo;\n Vector geoVector(body, ut, tt) {\n-  if (body == Body.Earth) {\n+  if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     var earth = calcEarth(body, ut);\n     var h = helioVector(body, ut, tt);\n"
                },
                {
                    "date": 1642608537310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n double make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-  int _epoch = EPOCH.millisecondsSinceEpoch;\n+  int _epoch = epoch.millisecondsSinceEpoch;\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n"
                },
                {
                    "date": 1642647141798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import 'calc_pluto_simple.dart';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/espenac.dart';\n-import 'src/rotateVector.dart';\n+import 'src/rotate_vector.dart';\n import 'src/vsop.dart';\n // import 'calc_moon.dart';\n \n // # -------------------------\n"
                },
                {
                    "date": 1642765159217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n+  print(ut);\n   return ut;\n }\n \n // # ------------------------\n"
                },
                {
                    "date": 1642765387069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n-  print(ut);\n+  print('d $d ut $ut');\n   return ut;\n }\n \n // # ------------------------\n"
                },
                {
                    "date": 1642765410549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n-  print('d $d ut $ut');\n+  print('d $d _d $_d ut $ut');\n   return ut;\n }\n \n // # ------------------------\n"
                },
                {
                    "date": 1642765532199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n-  print('d $d _d $_d ut $ut');\n+  print('d $d _epoch $_epoch ut $ut');\n   return ut;\n }\n \n // # ------------------------\n"
                },
                {
                    "date": 1642765905033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,14 @@\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n double make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-  int _epoch = epoch.millisecondsSinceEpoch;\n+  // int _epoch = epoch.millisecondsSinceEpoch;\n+  DateTime _epoch = DateTime(2000, 1, 1, 12, 0, 0, 0);\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n-  int _d = d.millisecondsSinceEpoch;\n+  // int _d = d.millisecondsSinceEpoch;\n+  int _d = (d - _epoch).mill;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n   print('d $d _epoch $_epoch ut $ut');\n   return ut;\n }\n"
                },
                {
                    "date": 1642766047147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,13 @@\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n double make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-  // int _epoch = epoch.millisecondsSinceEpoch;\n-  DateTime _epoch = DateTime(2000, 1, 1, 12, 0, 0, 0);\n+  int _epoch = epoch.millisecondsSinceEpoch;\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n-  // int _d = d.millisecondsSinceEpoch;\n-  int _d = (d - _epoch).mill;\n+  int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n-  print('d $d _epoch $_epoch ut $ut');\n   return ut;\n }\n \n // # ------------------------\n"
                },
                {
                    "date": 1642766102332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n   int _d = d.millisecondsSinceEpoch;\n   double ut = (_d - _epoch) / 86400000; // => секунды\n+  print(ut);\n   return ut;\n }\n \n // # ------------------------\n"
                },
                {
                    "date": 1642768201349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,14 @@\n }\n \n // floor(x) = int(x) // fmod(x,y) = x%y\n double make(int year, int month, int day, int hour, int minute, int second) {\n+  DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n+  DateTime d2 = DateTime.utc(year, month, day, hour, minute, second, 0);\n+\n+  Duration diff = d2.difference(d1);\n+  print(diff.inSeconds);\n+\n   DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   int _epoch = epoch.millisecondsSinceEpoch;\n   double micro = second % 1.0 * 1000000.floor();\n   second = (second - micro / 1000000).floor();\n"
                },
                {
                    "date": 1642768363303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,16 +34,16 @@\n   DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n   DateTime d2 = DateTime.utc(year, month, day, hour, minute, second, 0);\n \n   Duration diff = d2.difference(d1);\n-  print(diff.inSeconds);\n+  var ut = diff.abs();\n \n-  DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-  int _epoch = epoch.millisecondsSinceEpoch;\n-  double micro = second % 1.0 * 1000000.floor();\n-  second = (second - micro / 1000000).floor();\n-  int _d = d.millisecondsSinceEpoch;\n-  double ut = (_d - _epoch) / 86400000; // => секунды\n+  // DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n+  // int _epoch = epoch.millisecondsSinceEpoch;\n+  // double micro = second % 1.0 * 1000000.floor();\n+  // second = (second - micro / 1000000).floor();\n+  // int _d = d.millisecondsSinceEpoch;\n+  // double ut = (_d - _epoch) / 86400000; // => секунды\n   print(ut);\n   return ut;\n }\n \n"
                },
                {
                    "date": 1642768425734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n   DateTime d2 = DateTime.utc(year, month, day, hour, minute, second, 0);\n \n   Duration diff = d2.difference(d1);\n-  var ut = diff.abs();\n+  var ut = diff.inSeconds / 86400;\n \n   // DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n   // int _epoch = epoch.millisecondsSinceEpoch;\n   // double micro = second % 1.0 * 1000000.floor();\n"
                },
                {
                    "date": 1642768492606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,18 +34,9 @@\n   DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n   DateTime d2 = DateTime.utc(year, month, day, hour, minute, second, 0);\n \n   Duration diff = d2.difference(d1);\n-  var ut = diff.inSeconds / 86400;\n-\n-  // DateTime d = DateTime(year, month, day, hour, minute, second, 0);\n-  // int _epoch = epoch.millisecondsSinceEpoch;\n-  // double micro = second % 1.0 * 1000000.floor();\n-  // second = (second - micro / 1000000).floor();\n-  // int _d = d.millisecondsSinceEpoch;\n-  // double ut = (_d - _epoch) / 86400000; // => секунды\n-  print(ut);\n-  return ut;\n+  return diff.inSeconds / 86400;\n }\n \n // # ------------------------\n // # 3. секция ГЕЛИОЦЕНТРИКИ\n"
                },
                {
                    "date": 1642860063630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,13 +28,11 @@\n     tt = time + deltaT / 86400.0;\n   }\n }\n \n-// floor(x) = int(x) // fmod(x,y) = x%y\n double make(int year, int month, int day, int hour, int minute, int second) {\n   DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n   DateTime d2 = DateTime.utc(year, month, day, hour, minute, second, 0);\n-\n   Duration diff = d2.difference(d1);\n   return diff.inSeconds / 86400;\n }\n \n"
                },
                {
                    "date": 1642860940154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,17 +93,4 @@\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n   }\n }\n-\n-// else if (body == Body.Moon) {\n-//   Vector e = calcEarth(tt, body.index);\n-//   Vector m = geoMoon(tt); // 0 - вектор | 1 - долгота луны\n-//   return Vector(e.x + m.x, e.y + m.y, e.z + m.z, tt);\n-// }\n-\n-  // if (body == Body.Moon) {\n-  //   return geoMoon(tt);}\n-\n-//     def AddDays(self, days):\n-//         \"\"\"Calculates the sum or difference of a #Time \"\"\"\n-//         return Time(self.ut + days)\n"
                },
                {
                    "date": 1642862291913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n // # -------------------------\n // # 1. Парсинг входной даты\n // # -------------------------\n \n-List parseArgs(year, month, day, hour, minute, lat, lon) {\n-  double time = make(year, month, day, hour, minute, 0);\n+List parseArgs(dat, lat, lon) {\n+  double time = make(dat, 0);\n   Observer observer = Observer(lat, lon);\n   return [observer, Timeit(time)];\n }\n \n@@ -28,9 +28,9 @@\n     tt = time + deltaT / 86400.0;\n   }\n }\n \n-double make(int year, int month, int day, int hour, int minute, int second) {\n+double make(dat, int second) {\n   DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n   DateTime d2 = DateTime.utc(year, month, day, hour, minute, second, 0);\n   Duration diff = d2.difference(d1);\n   return diff.inSeconds / 86400;\n"
                },
                {
                    "date": 1642862317282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n }\n \n double make(dat, int second) {\n   DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n-  DateTime d2 = DateTime.utc(year, month, day, hour, minute, second, 0);\n+  DateTime d2 = dat;\n   Duration diff = d2.difference(d1);\n   return diff.inSeconds / 86400;\n }\n \n"
                },
                {
                    "date": 1642862396271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n // # 1. Парсинг входной даты\n // # -------------------------\n \n List parseArgs(dat, lat, lon) {\n-  double time = make(dat, 0);\n+  double time = make(dat);\n   Observer observer = Observer(lat, lon);\n   return [observer, Timeit(time)];\n }\n \n@@ -28,12 +28,11 @@\n     tt = time + deltaT / 86400.0;\n   }\n }\n \n-double make(dat, int second) {\n+double make(dat) {\n   DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n-  DateTime d2 = dat;\n-  Duration diff = d2.difference(d1);\n+  Duration diff = dat.difference(d1);\n   return diff.inSeconds / 86400;\n }\n \n // # ------------------------\n"
                },
                {
                    "date": 1642862444345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   }\n }\n \n double make(dat) {\n-  DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0, 0, 0);\n+  DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0);\n   Duration diff = dat.difference(d1);\n   return diff.inSeconds / 86400;\n }\n \n"
                },
                {
                    "date": 1642862490029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n class Timeit {\n-  double? tt;\n-  double? ut;\n+  late double tt;\n+  late double ut;\n   Timeit(double time) {\n     ut = time;\n     var deltaT = Timex().deltaTEspenakMeeus(time);\n     tt = time + deltaT / 86400.0;\n"
                },
                {
                    "date": 1642908064947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n List parseArgs(dat, lat, lon) {\n   double time = make(dat);\n   Observer observer = Observer(lat, lon);\n-  return [observer, Timeit(time)];\n+  return [observer, Timeit(time).tt];\n }\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n@@ -42,22 +42,22 @@\n   if (body == Body.pluto) {\n     var p = pluto(time);\n     return p[0]; // эклиптика'\n   } else {\n-    Vector hv = helioVector(body, time.ut, time.tt);\n-    var helio = ecliptic(hv, time.ut);\n+    Vector hv = helioVector(body, time.tt);\n+    var helio = ecliptic(hv, time.tt);\n     return helio.elon;\n   }\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n-Vector helioVector(body, ut, tt) {\n+Vector helioVector(body, tt) {\n   if (body == Body.sun) {\n-    return Vector(0.0, 0.0, 0.0, ut);\n+    return Vector(0.0, 0.0, 0.0, tt);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n-    return calcVsop(vsop[body.index], ut);\n+    return calcVsop(vsop[body.index], tt);\n   } else {\n-    return Vector(0.0, 0.0, 0.0, ut);\n+    return Vector(0.0, 0.0, 0.0, tt);\n   }\n }\n \n // # ----------------------\n"
                },
                {
                    "date": 1642908081640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, ut);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     var earth = calcEarth(body, ut);\n-    var h = helioVector(body, ut, tt);\n+    var h = helioVector(body, tt);\n     var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n     return geo;\n   } else {\n     return Vector(0.0, 0.0, 0.0, ut);\n"
                },
                {
                    "date": 1642908142123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n   if (body == Body.pluto) {\n     var p = pluto(time);\n     return p[1]; // гео\n   } else {\n-    Vector geoV = geoVector(body, time.ut, time.tt);\n-    var geoPos = ecliptic(geoV, time.ut);\n+    Vector geoV = geoVector(body, time.tt);\n+    var geoPos = ecliptic(geoV, time.tt);\n     return geoPos.elon;\n   }\n }\n \n"
                },
                {
                    "date": 1642908170468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,16 +80,16 @@\n   return calcVsop(vsop[Body.earth.index], time);\n }\n \n // var earth, h, geo;\n-Vector geoVector(body, ut, tt) {\n+Vector geoVector(body, tt) {\n   if (body == Body.earth) {\n-    return Vector(0.0, 0.0, 0.0, ut);\n+    return Vector(0.0, 0.0, 0.0, tt);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n-    var earth = calcEarth(body, ut);\n+    var earth = calcEarth(body, tt);\n     var h = helioVector(body, tt);\n-    var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, ut);\n+    var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, tt);\n     return geo;\n   } else {\n-    return Vector(0.0, 0.0, 0.0, ut);\n+    return Vector(0.0, 0.0, 0.0, tt);\n   }\n }\n"
                },
                {
                    "date": 1642908272428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n   if (body == Body.pluto) {\n     var p = pluto(time);\n     return p[0]; // эклиптика'\n   } else {\n-    Vector hv = helioVector(body, time.tt);\n-    var helio = ecliptic(hv, time.tt);\n+    Vector hv = helioVector(body, time);\n+    var helio = ecliptic(hv, time);\n     return helio.elon;\n   }\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n@@ -69,10 +69,10 @@\n   if (body == Body.pluto) {\n     var p = pluto(time);\n     return p[1]; // гео\n   } else {\n-    Vector geoV = geoVector(body, time.tt);\n-    var geoPos = ecliptic(geoV, time.tt);\n+    Vector geoV = geoVector(body, time);\n+    var geoPos = ecliptic(geoV, time);\n     return geoPos.elon;\n   }\n }\n \n"
                },
                {
                    "date": 1642918531007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n List parseArgs(dat, lat, lon) {\n   double time = make(dat);\n   Observer observer = Observer(lat, lon);\n-  return [observer, Timeit(time).tt];\n+  return [observer, dt(time)];\n }\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n@@ -28,8 +28,13 @@\n     tt = time + deltaT / 86400.0;\n   }\n }\n \n+double dt(time) {\n+  var deltaT = Timex().deltaTEspenakMeeus(time);\n+  return time + deltaT / 86400.0;\n+}\n+\n double make(dat) {\n   DateTime d1 = DateTime.utc(2000, 1, 1, 12, 0);\n   Duration diff = dat.difference(d1);\n   return diff.inSeconds / 86400;\n@@ -49,15 +54,15 @@\n   }\n }\n //Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\n \n-Vector helioVector(body, tt) {\n+Vector helioVector(body, time) {\n   if (body == Body.sun) {\n-    return Vector(0.0, 0.0, 0.0, tt);\n+    return Vector(0.0, 0.0, 0.0, time);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n-    return calcVsop(vsop[body.index], tt);\n+    return calcVsop(vsop[body.index], time);\n   } else {\n-    return Vector(0.0, 0.0, 0.0, tt);\n+    return Vector(0.0, 0.0, 0.0, time);\n   }\n }\n \n // # ----------------------\n@@ -80,16 +85,16 @@\n   return calcVsop(vsop[Body.earth.index], time);\n }\n \n // var earth, h, geo;\n-Vector geoVector(body, tt) {\n+Vector geoVector(body, time) {\n   if (body == Body.earth) {\n-    return Vector(0.0, 0.0, 0.0, tt);\n+    return Vector(0.0, 0.0, 0.0, time);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n-    var earth = calcEarth(body, tt);\n-    var h = helioVector(body, tt);\n-    var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, tt);\n+    var earth = calcEarth(body, time);\n+    var h = helioVector(body, time);\n+    var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n     return geo;\n   } else {\n-    return Vector(0.0, 0.0, 0.0, tt);\n+    return Vector(0.0, 0.0, 0.0, time);\n   }\n }\n"
                },
                {
                    "date": 1642918606904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,17 +18,17 @@\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n-class Timeit {\n-  late double tt;\n-  late double ut;\n-  Timeit(double time) {\n-    ut = time;\n-    var deltaT = Timex().deltaTEspenakMeeus(time);\n-    tt = time + deltaT / 86400.0;\n-  }\n-}\n+// class Timeit {\n+//   late double tt;\n+//   late double ut;\n+//   Timeit(double time) {\n+//     ut = time;\n+//     var deltaT = Timex().deltaTEspenakMeeus(time);\n+//     tt = time + deltaT / 86400.0;\n+//   }\n+// }\n \n double dt(time) {\n   var deltaT = Timex().deltaTEspenakMeeus(time);\n   return time + deltaT / 86400.0;\n"
                },
                {
                    "date": 1642940329704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,10 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n+double toposLon(body, time) {}\n+\n double geoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n   if (body == Body.pluto) {\n     var p = pluto(time);\n"
                },
                {
                    "date": 1642940414229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,26 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-double toposLon(body, time) {}\n+double toposLon(body, time) {\n+  var gc_observer = geoPos(time, observer);\n+  var gc = geoVector(body, time, False);\n+  var j2000 = [\n+    gc.x - gc_observer[0],\n+    gc.y - gc_observer[1],\n+    gc.z - gc_observer[2]\n+  ];\n \n+  var _tmp = precession(j2000, time, PrecessDir.From2000);\n+  var datevect = nutation(_tmp, time, PrecessDir.From2000);\n+\n+  var geoVect = vector2radec(datevect, time);\n+  var _geo = Ecliptic(geoVect, time);\n+\n+  return _geo.elon;\n+}\n+\n double geoLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n   if (body == Body.pluto) {\n     var p = pluto(time);\n"
                },
                {
                    "date": 1642941404128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'calc_pluto_simple.dart';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/espenac.dart';\n+import 'src/func.dart';\n import 'src/rotate_vector.dart';\n import 'src/vsop.dart';\n // import 'calc_moon.dart';\n \n@@ -70,9 +71,9 @@\n // # ----------------------\n \n double toposLon(body, time) {\n   var gc_observer = geoPos(time, observer);\n-  var gc = geoVector(body, time, False);\n+  var gc = geoVector(body, time);\n   var j2000 = [\n     gc.x - gc_observer[0],\n     gc.y - gc_observer[1],\n     gc.z - gc_observer[2]\n@@ -81,9 +82,9 @@\n   var _tmp = precession(j2000, time, PrecessDir.From2000);\n   var datevect = nutation(_tmp, time, PrecessDir.From2000);\n \n   var geoVect = vector2radec(datevect, time);\n-  var _geo = Ecliptic(geoVect, time);\n+  var _geo = ecliptic(geoVect, time);\n \n   return _geo.elon;\n }\n \n"
                },
                {
                    "date": 1642941900089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,19 +69,19 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-double toposLon(body, time) {\n+double toposLon(body, time, observer) {\n   var gc_observer = geoPos(time, observer);\n   var gc = geoVector(body, time);\n   var j2000 = [\n     gc.x - gc_observer[0],\n     gc.y - gc_observer[1],\n     gc.z - gc_observer[2]\n   ];\n \n-  var _tmp = precession(j2000, time, PrecessDir.From2000);\n-  var datevect = nutation(_tmp, time, PrecessDir.From2000);\n+  var _tmp = precession(j2000, time, PrecessDir.from2000);\n+  var datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n   var geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n"
                },
                {
                    "date": 1642943673865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n double toposLon(body, time, observer) {\n-  var gc_observer = geoPos(time, observer);\n+  List gc_observer = geoPos(time, observer);\n   var gc = geoVector(body, time);\n   var j2000 = [\n     gc.x - gc_observer[0],\n     gc.y - gc_observer[1],\n"
                },
                {
                    "date": 1642943978261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,14 +70,14 @@\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n double toposLon(body, time, observer) {\n-  List gc_observer = geoPos(time, observer);\n+  List gcObserver = geoPos(time, observer);\n   var gc = geoVector(body, time);\n   var j2000 = [\n-    gc.x - gc_observer[0],\n-    gc.y - gc_observer[1],\n-    gc.z - gc_observer[2]\n+    gc.x - gcObserver[0],\n+    gc.y - gcObserver[1],\n+    gc.z - gcObserver[2]\n   ];\n \n   var _tmp = precession(j2000, time, PrecessDir.from2000);\n   var datevect = nutation(_tmp, time, PrecessDir.from2000);\n"
                },
                {
                    "date": 1642993185889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,27 +69,27 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-double toposLon(body, time, observer) {\n+double geoLon(body, time, observer) {\n   List gcObserver = geoPos(time, observer);\n-  var gc = geoVector(body, time);\n+  Vector gc = geoVector(body, time);\n   var j2000 = [\n     gc.x - gcObserver[0],\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n \n-  var _tmp = precession(j2000, time, PrecessDir.from2000);\n-  var datevect = nutation(_tmp, time, PrecessDir.from2000);\n+  List _tmp = precession(j2000, time, PrecessDir.from2000);\n+  List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n-  var geoVect = vector2radec(datevect, time);\n+  Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n   return _geo.elon;\n }\n \n-double geoLon(body, time) {\n+double cartLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n   if (body == Body.pluto) {\n     var p = pluto(time);\n     return p[1]; // гео\n"
                },
                {
                    "date": 1642994324507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n-  return _geo.elon;\n+  if (body == body.earth) return _geo.elon;\n }\n \n double cartLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n"
                },
                {
                    "date": 1642994412601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,13 @@\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n-  if (body == body.earth) return _geo.elon;\n+  if (body.index == 2) {\n+    return 0;\n+  } else {\n+    return _geo.elon;\n+  }\n }\n \n double cartLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n"
                },
                {
                    "date": 1642994686382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,18 +86,19 @@\n   var _geo = ecliptic(geoVect, time);\n \n   if (body.index == 2) {\n     return 0;\n+  } else if (body == Body.pluto) {\n+    return pluto(time)[1]; // гео\n   } else {\n     return _geo.elon;\n   }\n }\n \n double cartLon(body, time) {\n   // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n   if (body == Body.pluto) {\n-    var p = pluto(time);\n-    return p[1]; // гео\n+    return pluto(time)[1]; // гео\n   } else {\n     Vector geoV = geoVector(body, time);\n     var geoPos = ecliptic(geoV, time);\n     return geoPos.elon;\n"
                },
                {
                    "date": 1642994726851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n-  if (body.index == 2) {\n+  if (body == Body.moon) {\n     return 0;\n   } else if (body == Body.pluto) {\n     return pluto(time)[1]; // гео\n   } else {\n"
                },
                {
                    "date": 1642994739796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n-  if (body == Body.moon) {\n+  if (body == Body.earth) {\n     return 0;\n   } else if (body == Body.pluto) {\n     return pluto(time)[1]; // гео\n   } else {\n"
                },
                {
                    "date": 1642995099577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'calc_moon.dart';\n import 'calc_pluto_simple.dart';\n import 'src/classes.dart';\n import 'src/constants.dart';\n import 'src/espenac.dart';\n@@ -87,9 +88,13 @@\n \n   if (body == Body.earth) {\n     return 0;\n   } else if (body == Body.pluto) {\n-    return pluto(time)[1]; // гео\n+    return pluto(time)[1];\n+  } else if (body == Body.moon) {\n+    return geoMoon(time)[1];\n+  } else if (body == Body.sun) {\n+    return deg360(helioEclipLon(Body.earth, time) + 180);\n   } else {\n     return _geo.elon;\n   }\n }\n"
                },
                {
                    "date": 1642995575176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else if (body.index >= 0 && body.index < vsop.length) {\n     var earth = calcEarth(body, time);\n+\n     var h = helioVector(body, time);\n     var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n     return geo;\n   } else {\n"
                },
                {
                    "date": 1642996569724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,17 +20,8 @@\n \n // # --------------------------------------\n // # 2. Получение обьекта времени Time(ut)\n // # --------------------------------------\n-// class Timeit {\n-//   late double tt;\n-//   late double ut;\n-//   Timeit(double time) {\n-//     ut = time;\n-//     var deltaT = Timex().deltaTEspenakMeeus(time);\n-//     tt = time + deltaT / 86400.0;\n-//   }\n-// }\n \n double dt(time) {\n   var deltaT = Timex().deltaTEspenakMeeus(time);\n   return time + deltaT / 86400.0;\n@@ -127,4 +118,17 @@\n   } else {\n     return Vector(0.0, 0.0, 0.0, time);\n   }\n }\n+\n+\n+//\n+//\n+// class Timeit {\n+//   late double tt;\n+//   late double ut;\n+//   Timeit(double time) {\n+//     ut = time;\n+//     var deltaT = Timex().deltaTEspenakMeeus(time);\n+//     tt = time + deltaT / 86400.0;\n+//   }\n+// }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642996590642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n     gc.x - gcObserver[0],\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n+  print(j2000);\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n"
                },
                {
                    "date": 1642996752771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n     gc.x - gcObserver[0],\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n-  print(j2000);\n+  // print(j2000);\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n"
                },
                {
                    "date": 1642998242577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,10 @@\n     gc.x - gcObserver[0],\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n-  // print(j2000);\n+  print(gcObserver);\n+  print(gc.x);\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n"
                },
                {
                    "date": 1642998301036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n     gc.x - gcObserver[0],\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n-  print(gcObserver);\n-  print(gc.x);\n+  // print(gcObserver);\n+  // print(gc.x);\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n"
                },
                {
                    "date": 1642998525392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,22 +108,34 @@\n }\n \n // var earth, h, geo;\n Vector geoVector(body, time) {\n+  var earth = calcEarth(body, time);\n+  var h = helioVector(body, time);\n+  var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n+\n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n-  } else if (body.index >= 0 && body.index < vsop.length) {\n-    var earth = calcEarth(body, time);\n-\n-    var h = helioVector(body, time);\n-    var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n+  } else  {\n+    \n     return geo;\n-  } else {\n-    return Vector(0.0, 0.0, 0.0, time);\n-  }\n+ \n }\n \n+// Vector geoVector(body, time) {\n+//   if (body == Body.earth) {\n+//     return Vector(0.0, 0.0, 0.0, time);\n+//   } else if (body.index >= 0 && body.index < vsop.length) {\n+//     var earth = calcEarth(body, time);\n \n+//     var h = helioVector(body, time);\n+//     var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n+//     return geo;\n+//   } else {\n+//     return Vector(0.0, 0.0, 0.0, time);\n+//   }\n+// }\n+\n //\n //\n // class Timeit {\n //   late double tt;\n"
                },
                {
                    "date": 1642998535803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,11 +115,9 @@\n \n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else  {\n-    \n     return geo;\n- \n }\n \n // Vector geoVector(body, time) {\n //   if (body == Body.earth) {\n"
                },
                {
                    "date": 1642998562378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,12 +114,12 @@\n   var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n \n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n-  } else  {\n+  } else {\n     return geo;\n+  }\n }\n-\n // Vector geoVector(body, time) {\n //   if (body == Body.earth) {\n //     return Vector(0.0, 0.0, 0.0, time);\n //   } else if (body.index >= 0 && body.index < vsop.length) {\n"
                },
                {
                    "date": 1642998642941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,11 +108,11 @@\n }\n \n // var earth, h, geo;\n Vector geoVector(body, time) {\n-  var earth = calcEarth(body, time);\n-  var h = helioVector(body, time);\n-  var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n+  Vector earth = calcEarth(body, time);\n+  Vector h = helioVector(body, time);\n+  Vector geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n \n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n"
                },
                {
                    "date": 1642998676483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n Vector geoVector(body, time) {\n   Vector earth = calcEarth(body, time);\n   Vector h = helioVector(body, time);\n   Vector geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n-\n+  print(earth.x);\n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n     return geo;\n"
                },
                {
                    "date": 1642998834619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n Vector geoVector(body, time) {\n   Vector earth = calcEarth(body, time);\n   Vector h = helioVector(body, time);\n   Vector geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n-  print(earth.x);\n+  print('${earth.x} ${earth.y} ${earth.z} ${earth.t}');\n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n     return geo;\n"
                },
                {
                    "date": 1642999009857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,12 @@\n Vector geoVector(body, time) {\n   Vector earth = calcEarth(body, time);\n   Vector h = helioVector(body, time);\n   Vector geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n-  print('${earth.x} ${earth.y} ${earth.z} ${earth.t}');\n+\n+  print('${earth.x} ${earth.y} ${earth.z}');\n+  print('${geo.x} ${geo.y} ${geo.z}');\n+\n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n     return geo;\n"
                },
                {
                    "date": 1642999088144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,10 +112,10 @@\n   Vector earth = calcEarth(body, time);\n   Vector h = helioVector(body, time);\n   Vector geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n \n-  print('${earth.x} ${earth.y} ${earth.z}');\n-  print('${geo.x} ${geo.y} ${geo.z}');\n+  // print('${earth.x} ${earth.y} ${earth.z}');\n+  // print('${geo.x} ${geo.y} ${geo.z}'); //все норм\n \n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n"
                },
                {
                    "date": 1642999186316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   // print(gcObserver);\n-  // print(gc.x);\n+  print(gc.x);\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n"
                },
                {
                    "date": 1642999218642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   // print(gcObserver);\n-  print(gc.x);\n+  print(gc.z);\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n"
                },
                {
                    "date": 1642999315139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   // print(gcObserver);\n-  print(gc.z);\n+  print(j2000);\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n"
                },
                {
                    "date": 1642999350016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   // print(gcObserver);\n-  print(j2000);\n+  // print(j2000); // OK\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n \n"
                },
                {
                    "date": 1642999466905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   // print(j2000); // OK\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n-\n+  print('$_tmp, $datevect');\n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n   if (body == Body.earth) {\n"
                },
                {
                    "date": 1642999563425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,14 +69,12 @@\n     gc.x - gcObserver[0],\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n-  // print(gcObserver);\n-  // print(j2000); // OK\n \n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n-  print('$_tmp, $datevect');\n+  // print('$_tmp, $datevect');  datevect отличается !\n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n   if (body == Body.earth) {\n"
                },
                {
                    "date": 1642999699885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,12 +69,12 @@\n     gc.x - gcObserver[0],\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n-\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n-  // print('$_tmp, $datevect');  datevect отличается !\n+  // print('$datevect');  datevect отличается !\n+\n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n   if (body == Body.earth) {\n"
                },
                {
                    "date": 1643000423344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     gc.z - gcObserver[2]\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n-  // print('$datevect');  datevect отличается !\n+  print('$datevect'); //datevect отличается !\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n"
                },
                {
                    "date": 1643000882792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     gc.z - gcObserver[2]\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n-  print('$datevect'); //datevect отличается !\n+  // print('$datevect'); //datevect отличается !\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n"
                },
                {
                    "date": 1643003692644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n+  print(_tmp.length);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n   // print('$datevect'); //datevect отличается !\n \n   Vector geoVect = vector2radec(datevect, time);\n"
                },
                {
                    "date": 1643003853322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n-  print(_tmp.length);\n+  // print(_tmp.length);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n   // print('$datevect'); //datevect отличается !\n \n   Vector geoVect = vector2radec(datevect, time);\n"
                },
                {
                    "date": 1643003948616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n-  // print(_tmp.length);\n+  print(_tmp.length);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n   // print('$datevect'); //datevect отличается !\n \n   Vector geoVect = vector2radec(datevect, time);\n"
                },
                {
                    "date": 1643003979223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n-  print(_tmp.length);\n+  print(_tmp);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n   // print('$datevect'); //datevect отличается !\n \n   Vector geoVect = vector2radec(datevect, time);\n"
                },
                {
                    "date": 1643004030632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,11 +70,11 @@\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n-  print(_tmp);\n+  // print(_tmp);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n-  // print('$datevect'); //datevect отличается !\n+  print('$datevect'); //datevect отличается !\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n \n@@ -144,5 +144,5 @@\n //     ut = time;\n //     var deltaT = Timex().deltaTEspenakMeeus(time);\n //     tt = time + deltaT / 86400.0;\n //   }\n-// }\n\\ No newline at end of file\n+// }\n"
                },
                {
                    "date": 1643004131440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,12 +72,13 @@\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n   // print(_tmp);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n-  print('$datevect'); //datevect отличается !\n+  // print('$datevect'); // OK\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n+  print(_geo.elon);\n \n   if (body == Body.earth) {\n     return 0;\n   } else if (body == Body.pluto) {\n"
                },
                {
                    "date": 1643004211655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,10 +84,8 @@\n   } else if (body == Body.pluto) {\n     return pluto(time)[1];\n   } else if (body == Body.moon) {\n     return geoMoon(time)[1];\n-  } else if (body == Body.sun) {\n-    return deg360(helioEclipLon(Body.earth, time) + 180);\n   } else {\n     return _geo.elon;\n   }\n }\n"
                },
                {
                    "date": 1643004216928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n   // print('$datevect'); // OK\n \n   Vector geoVect = vector2radec(datevect, time);\n   var _geo = ecliptic(geoVect, time);\n-  print(_geo.elon);\n+  // print(_geo.elon);\n \n   if (body == Body.earth) {\n     return 0;\n   } else if (body == Body.pluto) {\n"
                },
                {
                    "date": 1643004848268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,11 @@\n   // print(_tmp);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n   // print('$datevect'); // OK\n \n-  Vector geoVect = vector2radec(datevect, time);\n+  // Vector geoVect = vector2radec(datevect, time);\n+\n+  Vector geoVect = Vector(datevect[0], datevect[1], datevect[2], time);\n   var _geo = ecliptic(geoVect, time);\n   // print(_geo.elon);\n \n   if (body == Body.earth) {\n"
                },
                {
                    "date": 1643005516449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,26 +61,23 @@\n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n \n-double geoLon(body, time, observer) {\n+double geoLon(body, time, observer)\n+// \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n+{\n   List gcObserver = geoPos(time, observer);\n   Vector gc = geoVector(body, time);\n   var j2000 = [\n     gc.x - gcObserver[0],\n     gc.y - gcObserver[1],\n     gc.z - gcObserver[2]\n   ];\n   List _tmp = precession(j2000, time, PrecessDir.from2000);\n-  // print(_tmp);\n   List datevect = nutation(_tmp, time, PrecessDir.from2000);\n-  // print('$datevect'); // OK\n \n-  // Vector geoVect = vector2radec(datevect, time);\n-\n   Vector geoVect = Vector(datevect[0], datevect[1], datevect[2], time);\n   var _geo = ecliptic(geoVect, time);\n-  // print(_geo.elon);\n \n   if (body == Body.earth) {\n     return 0;\n   } else if (body == Body.pluto) {\n@@ -92,9 +89,9 @@\n   }\n }\n \n double cartLon(body, time) {\n-  // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n+  // \"\"\"Расчет прямоугольной геоцентрической долготы планет. \"\"\"\n   if (body == Body.pluto) {\n     return pluto(time)[1]; // гео\n   } else {\n     Vector geoV = geoVector(body, time);\n@@ -106,44 +103,15 @@\n Vector calcEarth(body, time) {\n   return calcVsop(vsop[Body.earth.index], time);\n }\n \n-// var earth, h, geo;\n Vector geoVector(body, time) {\n   Vector earth = calcEarth(body, time);\n   Vector h = helioVector(body, time);\n   Vector geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n \n-  // print('${earth.x} ${earth.y} ${earth.z}');\n-  // print('${geo.x} ${geo.y} ${geo.z}'); //все норм\n-\n   if (body == Body.earth) {\n     return Vector(0.0, 0.0, 0.0, time);\n   } else {\n     return geo;\n   }\n }\n-// Vector geoVector(body, time) {\n-//   if (body == Body.earth) {\n-//     return Vector(0.0, 0.0, 0.0, time);\n-//   } else if (body.index >= 0 && body.index < vsop.length) {\n-//     var earth = calcEarth(body, time);\n-\n-//     var h = helioVector(body, time);\n-//     var geo = Vector(h.x - earth.x, h.y - earth.y, h.z - earth.z, time);\n-//     return geo;\n-//   } else {\n-//     return Vector(0.0, 0.0, 0.0, time);\n-//   }\n-// }\n-\n-//\n-//\n-// class Timeit {\n-//   late double tt;\n-//   late double ut;\n-//   Timeit(double time) {\n-//     ut = time;\n-//     var deltaT = Timex().deltaTEspenakMeeus(time);\n-//     tt = time + deltaT / 86400.0;\n-//   }\n-// }\n"
                },
                {
                    "date": 1643005530020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,12 +60,10 @@\n \n // # ----------------------\n // # 4. секция ГЕОЦЕНТРИКИ\n // # ----------------------\n-\n-double geoLon(body, time, observer)\n // \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n-{\n+double geoLon(body, time, observer) {\n   List gcObserver = geoPos(time, observer);\n   Vector gc = geoVector(body, time);\n   var j2000 = [\n     gc.x - gcObserver[0],\n"
                }
            ],
            "date": 1642126749691,
            "name": "Commit-0",
            "content": "// import re, sys\n// from datetime import datetime\n// from math import floor, fmod\n\n// from vsop.calc_moon import GeoMoon\n// from vsop.calc_pluto import CalcPluto\n\n// from vsop.src.barycenter import CalcSolarSystemBarycenter, major_bodies_t\n// from vsop.src.classes import *\n// from vsop.src.constants import EARTH_MOON_MASS_RATIO, EPOCH, C_AUDAY, vsop\n// from vsop.src.espenac import Timex\n// from vsop.src.errors import *\n// from vsop.src.rotateVector import Ecliptic, VsopRotate, VsopSphereToRect\n// from vsop.src.vsop import CalcVsop, CalcVsopPosVel, VsopHelioDistance\n\n\n// # -------------------------\n// # 1. Парсинг входной даты\n// # -------------------------\n\n// def ParseArgs(Y, M, D, h, m, LAT, LON):\n//     time = Time.Make(Y, M, D, h, m, 0)\n//     observer = Observer(LAT, LON)\n//     return (observer, time)\n\n// # --------------------------------------\n// # 2. Получение обьекта времени Time(ut)\n// # --------------------------------------\n\n// class Time:\n//     \"\"\"Represents a date and time used for performing astronomy calculations.\"\"\"\n\n//     def __init__(self, ut, tt=None):\n//         self.ut = ut\n//         if tt is None:\n//             _DeltaT = Timex.DeltaT_EspenakMeeus\n//             self.tt = ut + _DeltaT(ut) / 86400.0\n//         else:\n//             self.tt = tt\n\n//     def Make(year, month, day, hour, minute, second):\n//         \"\"\"Creates a #Time object from a UTC calendar date and time\"\"\"\n//         micro = round(fmod(second, 1.0) * 1000000)\n//         second = floor(second - micro/1000000)\n//         d = datetime(year, month, day, hour, minute, second, micro)\n//         ut = (d - EPOCH).total_seconds() / 86400\n//         return Time(ut)\n\n//     def AddDays(self, days):\n//         \"\"\"Calculates the sum or difference of a #Time \"\"\"\n//         return Time(self.ut + days)\n\n// # ------------------------\n// # 3. секция ГЕЛИОЦЕНТРИКИ\n// # ------------------------\n\n// def HelioEclipLon(body, time):\n//     \"\"\"Расчет гелиоцентрических эклиптических координат планет в J2000 equatorial system.\"\"\"\n\n//     if body == Body.Sun:\n//         raise InvalidBodyError()\n//     hv = HelioVector(body, time)\n//     helio = Ecliptic(hv, time)\n//     return helio.elon\n\n// def HelioVector(body, time):\n//     \"\"\"Расчет гелиоцентрической долготы планет. \"\"\"\n\n//     if body == Body.Pluto:\n//         planet = CalcPluto(time, True)\n//         return Vector(planet.x, planet.y, planet.z, time)\n//         # return Vector(e.x+planet.x, e.x+planet.y, e.x+planet.z, time)\n\n//     if 0 <= body.value < len(vsop):\n//         return CalcVsop(vsop[body.value], time)\n\n//     if body == Body.Sun:\n//         return Vector(0.0, 0.0, 0.0, time)\n\n//     if body == Body.Moon:\n//         e = _CalcEarth(time)\n//         m = GeoMoon(time)[0]  # 0 - вектор | 1 - долгота луны\n//         return Vector(e.x+m.x, e.y+m.y, e.z+m.z, time)\n\n//     if body == Body.EMB:\n//         e = _CalcEarth(time)\n//         m = GeoMoon(time)[0]\n//         d = 1.0 + EARTH_MOON_MASS_RATIO\n//         return Vector(e.x+(m.x/d), e.y+(m.y/d), e.z+(m.z/d), time)\n\n//     if body == Body.SSB:\n//         return CalcSolarSystemBarycenter(time)\n\n//     raise InvalidBodyError()\n\n\n// def HelioDistance(body, time):\n//     \"\"\"Расчет дистанции до солнца.\n//     Returns -> расстояние в AU.\n//     \"\"\"\n//     if body == Body.Sun:\n//         return 0.0\n\n//     if 0 <= body.value < len(vsop):\n//         return VsopHelioDistance(vsop[body.value], time)\n\n//     return HelioVector(body, time).Length()\n\n// # ----------------------\n// # 4. секция ГЕОЦЕНТРИКИ\n// # ----------------------\n\n// def _CalcEarth(time):\n//     return CalcVsop(vsop[Body.Earth.value], time)\n\n\n// def GeoLon(body, time):\n//     \"\"\"Расчет геоцентрической долготы планет. \"\"\"\n\n//     geoVector = GeoVector(body, time, False)\n//     geoPos = Ecliptic(geoVector, time)\n//     return geoPos.elon\n\n\n// def GeoVector(body, time, aberration):\n//     \"\"\"Расчет геоцентрических прямоугольных координат планет в J2000 equatorial system.\"\"\"\n\n//     if body == Body.Moon:\n//         return GeoMoon(time)[0]\n//     # не использую потому что есть погрешность 30-70 минут\n//     # забираю отдельно из CalcMoon\n\n//     if body == Body.Earth:\n//         return Vector(0.0, 0.0, 0.0, time)\n\n//     if not aberration:\n//         # No aberration, so calculate Earth's position once, at the time of observation.\n//         earth = _CalcEarth(time)\n\n//     # Correct for light-travel time, to get position of body as seen from Earth's center.\n//     ltime = time\n//     for _ in range(10):\n//         h = HelioVector(body, ltime)\n//         if aberration:\n//             earth = _CalcEarth(ltime)\n\n//         geo = Vector(h.x-earth.x, h.y-earth.y, h.z-earth.z, time)\n//         ltime2 = time.AddDays(-geo.Length() / C_AUDAY)\n//         dt = abs(ltime2.tt - ltime.tt)\n//         if dt < 1.0e-9:\n//             return geo\n\n//         ltime = ltime2\n\n//     raise Error('Light-travel time solver did not converge: dt={}'.format(dt))\n\n"
        }
    ]
}