{
    "sourceFile": "bin/vsop/Новая папка/astronomy.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1642126691155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642130723301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,8 @@\n // ignore_for_file: non_constant_identifier_names, unused_element, unused_import, prefer_typing_uninitialized_variables, constant_identifier_names, unused_field, unused_local_variable\n \n import 'dart:math';\n \n-// from vsop.constants import *\n-// from vsop.moon import _CalcMoon\n-\n-const _DAYS_PER_TROPICAL_YEAR = 365.24217;\n-const _PI2 = 2.0 * pi;\n-var _EPOCH = DateTime(2000, 1, 1, 12);\n-const _ASEC2RAD = 4.848136811095359935899141e-6;\n-const _ARC = 3600.0 * 180.0 / pi; // arcseconds per radian;\n-const _EARTH_MOON_MASS_RATIO = 81.30056;\n-const _SUN_GM = 0.2959122082855911e-03;\n-const _JUPITER_GM = 0.2825345909524226e-06;\n-const _SATURN_GM = 0.8459715185680659e-07;\n-const _URANUS_GM = 0.1292024916781969e-07;\n-const _NEPTUNE_GM = 0.1524358900784276e-07;\n-var ut, tt;\n-\n-enum _PrecessDir {\n-  From2000, // 0\n-  Into2000 // 1\n-}\n-\n-double _LongitudeOffset(double diff) {\n-  var offset = diff;\n-  while (offset <= -180.0) {\n-    offset += 360.0;\n-  }\n-  while (offset > 180.0) {\n-    offset -= 360.0;\n-  }\n-  return offset;\n-}\n-\n-double _NormalizeLongitude(double lon) {\n-  while (lon < 0.0) {\n-    lon += 360.0;\n-  }\n-  while (lon >= 360.0) {\n-    lon -= 360.0;\n-  }\n-  return lon;\n-}\n-\n-class Vector {\n-  // \"\"\"A Cartesian vector with 3 space coordinates and 1 time coordinate. \"\"\"\n-  var x, y, z, t;\n-  Vector(this.x, this.y, this.z, this.t);\n-\n-  double Length(x, y, z) => sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2));\n-  //Returns the length of the vector in AU. (xˆ2+yˆ2+zˆ2)\n-}\n-\n-class StateVector {\n-// A combination of a position vector, a velocity vector, and a time.\n-  var x, y, z, vx, vy, vz, t;\n-  StateVector(this.x, this.y, this.z, this.vx, this.vy, this.vz, this.t);\n-}\n-\n-enum Body {\n-  //The celestial bodies supported by Astronomy Engine calculations\n-  // Invalid: An unknown, invalid, or undefined celestial body.\n-  //Invalid = -1\n-  Mercury, //0\n-  Venus, //1\n-  Earth, //2\n-  Mars, //3\n-  Jupiter, //4\n-  Saturn, //5\n-  Uranus, //6\n-  Neptune, //7\n-  Pluto, //8\n-  Sun, //9\n-  Moon, //10\n-  EMB, //11 EMB: The Earth/Moon Barycenter.\n-  SSB //12  SSB: The Solar System Barycenter.\n-}\n-\n-/// классы ошибки\n-class Error {\n-  late Exception E;\n-  Error(this.E);\n-}\n-\n-/// классы ошибки\n-\n double DeltaT_EspenakMeeus(double ut) {\n   double y = 2000 + ((ut - 14) / _DAYS_PER_TROPICAL_YEAR);\n   double u, u1, u2, u3, u4, u5, u6, u7;\n   if (y < -500) {\n"
                }
            ],
            "date": 1642126691155,
            "name": "Commit-0",
            "content": "// ignore_for_file: non_constant_identifier_names, unused_element, unused_import, prefer_typing_uninitialized_variables, constant_identifier_names, unused_field, unused_local_variable\n\nimport 'dart:math';\n\n// from vsop.constants import *\n// from vsop.moon import _CalcMoon\n\nconst _DAYS_PER_TROPICAL_YEAR = 365.24217;\nconst _PI2 = 2.0 * pi;\nvar _EPOCH = DateTime(2000, 1, 1, 12);\nconst _ASEC2RAD = 4.848136811095359935899141e-6;\nconst _ARC = 3600.0 * 180.0 / pi; // arcseconds per radian;\nconst _EARTH_MOON_MASS_RATIO = 81.30056;\nconst _SUN_GM = 0.2959122082855911e-03;\nconst _JUPITER_GM = 0.2825345909524226e-06;\nconst _SATURN_GM = 0.8459715185680659e-07;\nconst _URANUS_GM = 0.1292024916781969e-07;\nconst _NEPTUNE_GM = 0.1524358900784276e-07;\nvar ut, tt;\n\nenum _PrecessDir {\n  From2000, // 0\n  Into2000 // 1\n}\n\ndouble _LongitudeOffset(double diff) {\n  var offset = diff;\n  while (offset <= -180.0) {\n    offset += 360.0;\n  }\n  while (offset > 180.0) {\n    offset -= 360.0;\n  }\n  return offset;\n}\n\ndouble _NormalizeLongitude(double lon) {\n  while (lon < 0.0) {\n    lon += 360.0;\n  }\n  while (lon >= 360.0) {\n    lon -= 360.0;\n  }\n  return lon;\n}\n\nclass Vector {\n  // \"\"\"A Cartesian vector with 3 space coordinates and 1 time coordinate. \"\"\"\n  var x, y, z, t;\n  Vector(this.x, this.y, this.z, this.t);\n\n  double Length(x, y, z) => sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2));\n  //Returns the length of the vector in AU. (xˆ2+yˆ2+zˆ2)\n}\n\nclass StateVector {\n// A combination of a position vector, a velocity vector, and a time.\n  var x, y, z, vx, vy, vz, t;\n  StateVector(this.x, this.y, this.z, this.vx, this.vy, this.vz, this.t);\n}\n\nenum Body {\n  //The celestial bodies supported by Astronomy Engine calculations\n  // Invalid: An unknown, invalid, or undefined celestial body.\n  //Invalid = -1\n  Mercury, //0\n  Venus, //1\n  Earth, //2\n  Mars, //3\n  Jupiter, //4\n  Saturn, //5\n  Uranus, //6\n  Neptune, //7\n  Pluto, //8\n  Sun, //9\n  Moon, //10\n  EMB, //11 EMB: The Earth/Moon Barycenter.\n  SSB //12  SSB: The Solar System Barycenter.\n}\n\n/// классы ошибки\nclass Error {\n  late Exception E;\n  Error(this.E);\n}\n\n/// классы ошибки\n\ndouble DeltaT_EspenakMeeus(double ut) {\n  double y = 2000 + ((ut - 14) / _DAYS_PER_TROPICAL_YEAR);\n  double u, u1, u2, u3, u4, u5, u6, u7;\n  if (y < -500) {\n    u = (y - 1820) / 100;\n    return -20 + (32 * u * u);\n  }\n\n  if (y < 500) {\n    u = y / 100;\n    u2 = u * u;\n    u3 = u * u2;\n    u4 = u2 * u2;\n    u5 = u2 * u3;\n    u6 = u3 * u3;\n    return 10583.6 -\n        1014.41 * u +\n        33.78311 * u2 -\n        5.952053 * u3 -\n        0.1798452 * u4 +\n        0.022174192 * u5 +\n        0.0090316521 * u6;\n  }\n\n  if (y < 1600) {\n    u = (y - 1000) / 100;\n    u2 = u * u;\n    u3 = u * u2;\n    u4 = u2 * u2;\n    u5 = u2 * u3;\n    u6 = u3 * u3;\n    return 1574.2 -\n        556.01 * u +\n        71.23472 * u2 +\n        0.319781 * u3 -\n        0.8503463 * u4 -\n        0.005050998 * u5 +\n        0.0083572073 * u6;\n  }\n\n  if (y < 1700) {\n    u = y - 1600;\n    u2 = u * u;\n    u3 = u * u2;\n    return 120 - 0.9808 * u - 0.01532 * u2 + u3 / 7129.0;\n  }\n\n  if (y < 1800) {\n    u = y - 1700;\n    u2 = u * u;\n    u3 = u * u2;\n    u4 = u2 * u2;\n    return 8.83 + 0.1603 * u - 0.0059285 * u2 + 0.00013336 * u3 - u4 / 1174000;\n  }\n\n  if (y < 1860) {\n    u = y - 1800;\n    u2 = u * u;\n    u3 = u * u2;\n    u4 = u2 * u2;\n    u5 = u2 * u3;\n    u6 = u3 * u3;\n    u7 = u3 * u4;\n    return 13.72 -\n        0.332447 * u +\n        0.0068612 * u2 +\n        0.0041116 * u3 -\n        0.00037436 * u4 +\n        0.0000121272 * u5 -\n        0.0000001699 * u6 +\n        0.000000000875 * u7;\n  }\n\n  if (y < 1900) {\n    u = y - 1860;\n    u2 = u * u;\n    u3 = u * u2;\n    u4 = u2 * u2;\n    u5 = u2 * u3;\n    return 7.62 +\n        0.5737 * u -\n        0.251754 * u2 +\n        0.01680668 * u3 -\n        0.0004473624 * u4 +\n        u5 / 233174;\n  }\n\n  if (y < 1920) {\n    u = y - 1900;\n    u2 = u * u;\n    u3 = u * u2;\n    u4 = u2 * u2;\n    return -2.79 +\n        1.494119 * u -\n        0.0598939 * u2 +\n        0.0061966 * u3 -\n        0.000197 * u4;\n  }\n  if (y < 1941) {\n    u = y - 1920;\n    u2 = u * u;\n    u3 = u * u2;\n    return 21.20 + 0.84493 * u - 0.076100 * u2 + 0.0020936 * u3;\n  }\n\n  if (y < 1961) {\n    u = y - 1950;\n    u2 = u * u;\n    u3 = u * u2;\n    return 29.07 + 0.407 * u - u2 / 233 + u3 / 2547;\n  }\n\n  if (y < 1986) {\n    u = y - 1975;\n    u2 = u * u;\n    u3 = u * u2;\n    return 45.45 + 1.067 * u - u2 / 260 - u3 / 718;\n  }\n\n  if (y < 2005) {\n    u = y - 2000;\n    u2 = u * u;\n    u3 = u * u2;\n    u4 = u2 * u2;\n    u5 = u2 * u3;\n    return 63.86 +\n        0.3345 * u -\n        0.060374 * u2 +\n        0.0017275 * u3 +\n        0.000651814 * u4 +\n        0.00002373599 * u5;\n  }\n\n  if (y < 2050) {\n    u = y - 2000;\n    return 62.92 + 0.32217 * u + 0.005589 * u * u;\n  }\n\n  if (y < 2150) {\n    u = (y - 1820) / 100;\n    return -20 + 32 * u * u - 0.5628 * (2150 - y);\n  }\n\n  // all years after 2150\n  u = (y - 1820) / 100;\n  return -20 + (32 * u * u);\n}\n\ndouble _DeltaT = DeltaT_EspenakMeeus(ut);\n\ndouble _TerrestrialTime(ut) => ut + _DeltaT / 86400.0;\n\nRegExp _TimeRegex = RegExp(\n    r'^([0-9]{1,4})-([0-9]{2})-([0-9]{2})(T([0-9]{2}):([0-9]{2})(:([0-9]{2}(\\.[0-9]+)?))?Z)?$');\n\nclass Time {\n  double ut, tt;\n  Time(this.ut, this.tt);\n}\n\n// dynamic Parse {\n  //     \"\"\"Creates a #Time object from a string of the form 'yyyy-mm-ddThh:mm:ss.sssZ'\n  //     ----------\n  //     text : string ISO 8601\n  //         A string of the following formats:\n  //         `yyyy-mm-dd`\n  //         `yyyy-mm-ddThh:mmZ`\n  //         `yyyy-mm-ddThh:mm:ssZ`\n  //         `yyyy-mm-ddThh:mm:ss.sssZ`\n  //     Returns -> Time\n  // String txt;\n  // var days;\n  \n\n  //     m = _TimeRegex.match(text)\n  //     if m is None:\n  //         raise DateTimeFormatError(text)\n  //     year = int(m.group(1))\n  //     month = int(m.group(2))\n  //     if not (1 <= month <= 12):\n  //         raise DateTimeFormatError(text)\n  //     day = int(m.group(3))\n  //     if not (1 <= day <= 31):\n  //         raise DateTimeFormatError(text)\n  //     hour = int(m.group(5) or '0')\n  //     if not (0 <= hour <= 23):\n  //         raise DateTimeFormatError(text)\n  //     minute = int(m.group(6) or '0')\n  //     if not (0 <= minute <= 59):\n  //         raise DateTimeFormatError(text)\n  //     second = float(m.group(8) or '0')\n  //     if not (0.0 <= second < 60.0):\n  //         raise DateTimeFormatError(text)\n  //     return Time.Make(year, month, day, hour, minute, second)\n\n  // def Make(year, month, day, hour, minute, second):\n  //     \"\"\"Creates a #Time object from a UTC calendar date and time.\n  //     micro = round(math.fmod(second, 1.0) * 1000000)\n  //     second = math.floor(second - micro/1000000)\n  //     d = datetime.datetime(year, month, day, hour, minute, second, micro)\n  //     ut = (d - _EPOCH).total_seconds() / 86400\n  //     return Time(ut)\n\n  // def Utc(self):\n  //     \"\"\"Returns the UTC date and time as a `datetime` object.\n//   return ['_EPOCH + timedelta(days=ut)'];\n// }\n"
        }
    ]
}