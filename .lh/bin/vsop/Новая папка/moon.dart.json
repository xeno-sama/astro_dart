{
    "sourceFile": "bin/vsop/Новая папка/moon.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1642126733543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1642126733543,
            "name": "Commit-0",
            "content": "// // ignore_for_file: non_constant_identifier_names, prefer_typing_uninitialized_variables, camel_case_types, unused_local_variable, unused_element, unused_import\n\n// import 'dart:math';\n// import 'classes.dart';\n\n// var _PI2 = 2.0 * pi;\n// var KM_PER_AU = 1.4959787069098932e+8;\n// var _EARTH_FLATTENING = 0.996647180302104;\n// var _EARTH_EQUATORIAL_RADIUS_KM = 6378.1366;\n// var _EARTH_POLAR_RADIUS_KM = _EARTH_EQUATORIAL_RADIUS_KM * _EARTH_FLATTENING;\n// var _EARTH_EQUATORIAL_RADIUS_AU = _EARTH_EQUATORIAL_RADIUS_KM / KM_PER_AU;\n// var _ARC = 3600.0 * 180.0 / pi;\n\n// Map _Array1(int xmin, int xmax) {\n//   Map arr1 = {for (var i = xmin; i < xmax + 1; i++) i: '0j'};\n//   return arr1;\n// }\n\n// Map _Array2(int xmin, int xmax, int ymin, int ymax) {\n//   Map _arr1 = _Array1(ymin, ymax);\n//   Map arr2 = {for (var i = xmin; i < xmax + 1; i++) i: _arr1};\n//   return arr2;\n// }\n\n// class _moonpos {\n//   double lon, lat, dist;\n//   _moonpos(this.lon, this.lat, this.dist) {\n//     var geo_eclip_lon = lon;\n//     var geo_eclip_lat = lat;\n//     var distance_au = dist;\n//   }\n\n//   dynamic _CalcMoon(time) {\n//     // var _CalcMoonCount;\n//     // _CalcMoonCount += 1;\n//     // time сделать класс Time / tt.ut\n\n//     var T = time.tt / 36525;\n//     var ex = _Array2(-6, 6, 1, 4);\n//     print(ex.runtimeType);\n\n//     double Sine(double phi) => sin(_PI2 * phi);\n\n//     double Frac(double x) => x - x.floor();\n\n//     var T2 = T * T;\n//     var DLAM = 0;\n//     var DS = 0;\n//     var GAM1C = 0;\n//     var SINPI = 3422.7000;\n//     var S1 = Sine(0.19833 + 0.05611 * T);\n//     var S2 = Sine(0.27869 + 0.04508 * T);\n//     var S3 = Sine(0.16827 - 0.36903 * T);\n//     var S4 = Sine(0.34734 - 5.37261 * T);\n//     var S5 = Sine(0.10498 - 5.37899 * T);\n//     var S6 = Sine(0.42681 - 0.41855 * T);\n//     var S7 = Sine(0.14943 - 5.37511 * T);\n//     var DL0 =\n//         0.84 * S1 + 0.31 * S2 + 14.27 * S3 + 7.26 * S4 + 0.28 * S5 + 0.24 * S6;\n//     var DL =\n//         2.94 * S1 + 0.31 * S2 + 14.27 * S3 + 9.34 * S4 + 1.12 * S5 + 0.83 * S6;\n//     var DLS = -6.40 * S1 - 1.89 * S6;\n//     var DF = 0.21 * S1 +\n//         0.31 * S2 +\n//         14.27 * S3 -\n//         88.70 * S4 -\n//         15.30 * S5 +\n//         0.24 * S6 -\n//         1.86 * S7;\n//     var DD = DL0 - DLS;\n//     var DGAM = ((-3332E-9 * Sine(0.59734 - 5.37261 * T) -\n//         539E-9 * Sine(0.35498 - 5.37899 * T) -\n//         64E-9 * Sine(0.39943 - 5.37511 * T)));\n\n//     var L0 = _PI2 * Frac(0.60643382 + 1336.85522467 * T - 0.00000313 * T2) +\n//         DL0 / _ARC;\n//     var L = _PI2 * Frac(0.37489701 + 1325.55240982 * T + 0.00002565 * T2) +\n//         DL / _ARC;\n//     var LS = _PI2 * Frac(0.99312619 + 99.99735956 * T - 0.00000044 * T2) +\n//         DLS / _ARC;\n//     var F = _PI2 * Frac(0.25909118 + 1342.22782980 * T - 0.00000892 * T2) +\n//         DF / _ARC;\n//     var D = _PI2 * Frac(0.82736186 + 1236.85308708 * T - 0.00000397 * T2) +\n//         DD / _ARC;\n\n//     var I = 1;\n//     var ARG, MAX, FAC, J;\n//     while (I <= 4) {\n//       if (I == 1) {\n//         ARG = L;\n//         MAX = 4;\n//         FAC = 1.000002208;\n//       }\n//       if (I == 2) {\n//         ARG = LS;\n//         MAX = 3;\n//         FAC = 0.997504612 - 0.002495388 * T;\n//       }\n//       if (I == 3) {\n//         ARG = F;\n//         MAX = 4;\n//         FAC = 1.000002708 + 139.978 * DGAM;\n//       } else {\n//         ARG = D;\n//         MAX = 6;\n//         FAC = 1.0;\n//       }\n\n//       // var ex[0][I] = complex(1, 0);\n//       // var ex[1][I] = complex(FAC * cos(ARG), FAC * sin(ARG));\n\n//       J = 2;\n//       while (J <= MAX) {\n//         ex[J][I] = ex[J - 1][I] * ex[1][I];\n//         J += 1;\n//       }\n\n//       J = 1;\n//       while (J <= MAX) {\n//         ex[-J][I] = ex[J][I].conjugate();\n//         J += 1;\n//       }\n\n//       I++;\n//     }\n\n//     // AddSol(13.902000, 14.060000, -0.001000, 0.260700, 0.000000, 0.000000, 0.000000, 4.000000)\n//     var z = ex[4][4];\n//     DLAM += (13.902 * z.imag) as int;\n//     DS += (14.06 * z.imag) as int;\n//     GAM1C += (-0.001 * z.real) as int;\n//     SINPI += 0.2607 * z.real;\n//   }\n\n//   int complex(int i, int j) {\n//     return i;\n//   }\n// }\n\n// // # AddSol\n// // # AddSol ....\n\n\n\n// //     def ADDN(coeffn, p, q, r, s):\n// //         return coeffn * (ex[p][1] * ex[q][2] * ex[r][3] * ex[s][4]).imag\n\n// //     N = 0\n// //     N += ADDN(-526.069, 0, 0,1,-2)\n// //     N += ADDN(  -3.352, 0, 0,1,-4)\n// //     N += ADDN( +44.297,+1, 0,1,-2)\n// //     N += ADDN(  -6.000,+1, 0,1,-4)\n// //     N += ADDN( +20.599,-1, 0,1, 0)\n// //     N += ADDN( -30.598,-1, 0,1,-2)\n// //     N += ADDN( -24.649,-2, 0,1, 0)\n// //     N += ADDN(  -2.000,-2, 0,1,-2)\n// //     N += ADDN( -22.571, 0,+1,1,-2)\n// //     N += ADDN( +10.985, 0,-1,1,-2)\n\n// //     DLAM += (\n// //         +0.82*Sine(0.7736  -62.5512*T)+0.31*Sine(0.0466 -125.1025*T)\n// //         +0.35*Sine(0.5785  -25.1042*T)+0.66*Sine(0.4591+1335.8075*T)\n// //         +0.64*Sine(0.3130  -91.5680*T)+1.14*Sine(0.1480+1331.2898*T)\n// //         +0.21*Sine(0.5918+1056.5859*T)+0.44*Sine(0.5784+1322.8595*T)\n// //         +0.24*Sine(0.2275   -5.7374*T)+0.28*Sine(0.2965   +2.6929*T)\n// //         +0.33*Sine(0.3132   +6.3368*T)\n// //     )\n// //     S = F + DS/_ARC\n// //     lat_seconds = (1.000002708 + 139.978*DGAM)*(18518.511+1.189+GAM1C)*math.sin(S) - 6.24*math.sin(3*S) + N\n// //     return _moonpos(\n// //         _PI2 * Frac((L0+DLAM/_ARC) / _PI2),\n// //         (math.pi / (180 * 3600)) * lat_seconds,\n// //         (_ARC * _EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)\n// //     )\n"
        }
    ]
}