{
    "sourceFile": "bin/vsop/src/complex.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 43,
            "patches": [
                {
                    "date": 1642136603622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642482273417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return '$_real + ${_imag}i';\n+      return '$_real + ${_imag}j';\n     }\n-    return '$_real - ${_imag.abs()}i';\n+    return '$_real - ${_imag.abs()}j';\n   }\n \n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n"
                },
                {
                    "date": 1642487416141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return '$_real + ${_imag}j';\n+      return ('$_real + ${_imag}j');\n     }\n-    return '$_real - ${_imag.abs()}j';\n+    return ('$_real - ${_imag.abs()}j');\n   }\n \n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n"
                },
                {
                    "date": 1642487546356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return ('$_real + ${_imag}j');\n+      return '$_real + ${_imag}j';\n     }\n-    return ('$_real - ${_imag.abs()}j');\n+    return '$_real - ${_imag.abs()}j';\n   }\n \n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n"
                },
                {
                    "date": 1642649278153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,26 +11,26 @@\n \n   // 1- Here we define different ways to build a complex number:\n   // constructors:\n   Complex([this._real = 0, this._imag = 0]);\n-  Complex.im(num imag) : this(0, imag);\n+  Complex.im(num imaginary) : this(0, imaginary);\n   Complex.re(num real) : this(real, 0);\n   // 2- The normal utility methods to get and set the real and\n   // imaginary part, to get the absolute value and the angle, to\n   //  compare two complex numbers:\n   num get real => _real;\n   set real(num value) => _real = value;\n-  num get imag => _imag;\n-  set imag(num value) => _imag = value;\n-  num get abs => math.sqrt(real * real + imag * imag);\n-  num get angle => math.atan2(imag, real);\n+  num get imaginary => _imag;\n+  set imaginary(num value) => _imag = value;\n+  num get abs => math.sqrt(real * real + imaginary * imaginary);\n+  num get angle => math.atan2(imaginary, real);\n \n   @override\n   bool operator ==(other) {\n     if (other is! Complex) {\n       return false;\n     }\n-    return real == other.real && imag == other.imag;\n+    return real == other.real && imaginary == other.imaginary;\n   }\n \n   @override\n   String toString() {\n@@ -43,14 +43,14 @@\n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n   //  division are defined as overloading of the operators +, *, - and /\n   Complex operator +(Complex x) {\n-    return Complex(_real + x.real, _imag + x.imag);\n+    return Complex(_real + x.real, _imag + x.imaginary);\n   }\n \n   Complex operator -(var x) {\n     if (x is Complex) {\n-      return Complex(real - x.real, imag - x.imag);\n+      return Complex(real - x.real, imaginary - x.imaginary);\n     } else if (x is num) {\n       _real -= x;\n       return this;\n     }\n@@ -58,53 +58,53 @@\n   }\n \n   Complex operator *(var x) {\n     if (x is Complex) {\n-      num realAux = (real * x.real - imag * x.imag);\n-      num imagAux = (imag * x.real + real * x.imag);\n+      num realAux = (real * x.real - imaginary * x.imaginary);\n+      num imagAux = (imaginary * x.real + real * x.imaginary);\n       return Complex(realAux, imagAux);\n     } else if (x is num) {\n-      return Complex(real * x, imag * x);\n+      return Complex(real * x, imaginary * x);\n     }\n     throw 'Not a number';\n   }\n \n   Complex operator /(var x) {\n     if (x is Complex) {\n-      num realAux =\n-          (real * x.real + imag * x.imag) / (x.real * x.real + x.imag * x.imag);\n-      num imagAux =\n-          (imag * x.real - real * x.imag) / (x.real * x.real + x.imag * x.imag);\n+      num realAux = (real * x.real + imaginary * x.imaginary) /\n+          (x.real * x.real + x.imaginary * x.imaginary);\n+      num imagAux = (imaginary * x.real - real * x.imaginary) /\n+          (x.real * x.real + x.imaginary * x.imaginary);\n       return Complex(realAux, imagAux);\n     } else if (x is num) {\n-      return Complex(real / x, imag / x);\n+      return Complex(real / x, imaginary / x);\n     }\n     throw 'Not a number';\n   }\n \n   // 4- Here we define the same operations as methods:\n   static Complex add(Complex c1, Complex c2) {\n     num rr = c1.real + c2.real;\n-    num ii = c1.imag + c2.imag;\n+    num ii = c1.imaginary + c2.imaginary;\n     return Complex(rr, ii);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n-    num ii = c1.imag - c2.imag;\n+    num ii = c1.imaginary - c2.imaginary;\n     return Complex(rr, ii);\n   }\n \n   static Complex multiply(Complex c1, Complex c2) {\n-    num rr = c1.real * c2.real - c1.imag * c2.imag;\n-    num ii = c1.real * c2.imag + c1.imag * c2.real;\n+    num rr = c1.real * c2.real - c1.imaginary * c2.imaginary;\n+    num ii = c1.real * c2.imaginary + c1.imaginary * c2.real;\n     return Complex(rr, ii);\n   }\n \n   static Complex divide(Complex c1, Complex c2) {\n-    num real = (c1.real * c2.real + c1.imag * c2.imag) /\n-        (c2.real * c2.real + c2.imag * c2.imag);\n-    num imag = (c1.imag * c2.real - c1.real * c2.imag) /\n-        (c2.real * c2.real + c2.imag * c2.imag);\n+    num real = (c1.real * c2.real + c1.imaginary * c2.imaginary) /\n+        (c2.real * c2.real + c2.imaginary * c2.imaginary);\n+    num imag = (c1.imaginary * c2.real - c1.real * c2.imaginary) /\n+        (c2.real * c2.real + c2.imaginary * c2.imaginary);\n     return Complex(real, imag);\n   }\n }\n"
                },
                {
                    "date": 1642649831420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n // Ready\n // ------\n // ignore_for_file: unnecessary_getters_setters, hash_and_equals\n \n-import 'dart:math' as math;\n+import 'dart:math';\n \n class Complex {\n   num _real;\n   num _imag;\n@@ -20,10 +20,10 @@\n   num get real => _real;\n   set real(num value) => _real = value;\n   num get imaginary => _imag;\n   set imaginary(num value) => _imag = value;\n-  num get abs => math.sqrt(real * real + imaginary * imaginary);\n-  num get angle => math.atan2(imaginary, real);\n+  num get abs => sqrt(real * real + imaginary * imaginary);\n+  num get angle => atan2(imaginary, real);\n \n   @override\n   bool operator ==(other) {\n     if (other is! Complex) {\n@@ -106,5 +106,35 @@\n     num imag = (c1.imaginary * c2.real - c1.real * c2.imaginary) /\n         (c2.real * c2.real + c2.imaginary * c2.imaginary);\n     return Complex(real, imag);\n   }\n+\n+  static Complex conjugate(Complex c1, Complex c2) {\n+    num rr = c1.real - c2.real;\n+    num ii = c1.imaginary - c2.imaginary;\n+    return Complex(rr, ii);\n+    ;\n+  }\n+\n+  /// Compute the [exponential function](http://mathworld.wolfram.com/ExponentialFunction.html)\n+  /// of this complex number.\n+  ///\n+  /// Implements the formula:\n+  ///\n+  ///     exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i\n+  ///\n+  /// where the (real) functions on the right-hand side are\n+  /// [math.exp], [math.cos], and [math.sin].\n+  ///\n+  /// Returns [nan] if either real or imaginary part of the\n+  /// input argument is `NaN`.\n+  ///\n+  /// Infinite values in real or imaginary parts of the input may result in\n+  /// infinite or `NaN` values returned in parts of the result.\n+  ///\n+  /// Examples:\n+  ///\n+  ///     exp(1 ± INFINITY i) = NaN + NaN i\n+  ///     exp(INFINITY + i) = INFINITY + INFINITY i\n+  ///     exp(-INFINITY + i) = 0 + 0i\n+  ///     exp(±INFINITY ± INFINITY i) = NaN + NaN i\n }\n"
                },
                {
                    "date": 1642650146646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n     return Complex(real, imag);\n   }\n \n   static Complex conjugate(Complex c1, Complex c2) {\n-    num rr = c1.real - c2.real;\n+    var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n     num ii = c1.imaginary - c2.imaginary;\n     return Complex(rr, ii);\n     ;\n   }\n"
                },
                {
                    "date": 1642650251281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,13 +107,12 @@\n         (c2.real * c2.real + c2.imaginary * c2.imaginary);\n     return Complex(real, imag);\n   }\n \n-  static Complex conjugate(Complex c1, Complex c2) {\n+  static Complex conjugate(var c1, Complex c2) {\n     var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n     num ii = c1.imaginary - c2.imaginary;\n     return Complex(rr, ii);\n-    ;\n   }\n \n   /// Compute the [exponential function](http://mathworld.wolfram.com/ExponentialFunction.html)\n   /// of this complex number.\n"
                },
                {
                    "date": 1642651711829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,16 @@\n     }\n     return '$_real - ${_imag.abs()}j';\n   }\n \n+  @override\n+  String conjugate() {\n+    if (_imag >= 0) {\n+      return '$_real + ${_imag}j';\n+    }\n+    return '$_real - ${_imag.abs()}j';\n+  }\n+\n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n   //  division are defined as overloading of the operators +, *, - and /\n   Complex operator +(Complex x) {\n"
                },
                {
                    "date": 1642651724120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,13 +115,13 @@\n         (c2.real * c2.real + c2.imaginary * c2.imaginary);\n     return Complex(real, imag);\n   }\n \n-  static Complex conjugate(var c1, Complex c2) {\n-    var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n-    num ii = c1.imaginary - c2.imaginary;\n-    return Complex(rr, ii);\n-  }\n+  // static Complex conjugate(var c1, Complex c2) {\n+  //   var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n+  //   num ii = c1.imaginary - c2.imaginary;\n+  //   return Complex(rr, ii);\n+  // }\n \n   /// Compute the [exponential function](http://mathworld.wolfram.com/ExponentialFunction.html)\n   /// of this complex number.\n   ///\n"
                },
                {
                    "date": 1642652011972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,13 @@\n       return '$_real + ${_imag}j';\n     }\n     return '$_real - ${_imag.abs()}j';\n   }\n+  // static Complex conjugate(var c1, Complex c2) {\n+  //   var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n+  //   num ii = c1.imaginary - c2.imaginary;\n+  //   return Complex(rr, ii);\n+  // }\n \n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n   //  division are defined as overloading of the operators +, *, - and /\n"
                },
                {
                    "date": 1642652347398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,11 @@\n \n   @override\n   String conjugate() {\n     if (_imag >= 0) {\n-      return '$_real + ${_imag}j';\n+      return '$_imag - ${_real}j';\n     }\n-    return '$_real - ${_imag.abs()}j';\n+    return '$_imag + ${_real.abs()}j';\n   }\n   // static Complex conjugate(var c1, Complex c2) {\n   //   var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n   //   num ii = c1.imaginary - c2.imaginary;\n"
                },
                {
                    "date": 1642652419972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     }\n     return '$_real - ${_imag.abs()}j';\n   }\n \n-  @override\n+  // @override\n   String conjugate() {\n     if (_imag >= 0) {\n       return '$_imag - ${_real}j';\n     }\n"
                },
                {
                    "date": 1642652486929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     return '$_real - ${_imag.abs()}j';\n   }\n \n   // @override\n-  String conjugate() {\n+  Object conjugate() {\n     if (_imag >= 0) {\n       return '$_imag - ${_real}j';\n     }\n     return '$_imag + ${_real.abs()}j';\n"
                },
                {
                    "date": 1642652563699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,19 +31,19 @@\n     }\n     return real == other.real && imaginary == other.imaginary;\n   }\n \n+  // @override\n+  // String toString() {\n+  //   if (_imag >= 0) {\n+  //     return '$_real + ${_imag}j';\n+  //   }\n+  //   return '$_real - ${_imag.abs()}j';\n+  // }\n+\n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return '$_real + ${_imag}j';\n-    }\n-    return '$_real - ${_imag.abs()}j';\n-  }\n-\n-  // @override\n-  Object conjugate() {\n-    if (_imag >= 0) {\n       return '$_imag - ${_real}j';\n     }\n     return '$_imag + ${_real.abs()}j';\n   }\n"
                },
                {
                    "date": 1642653780161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,19 +31,19 @@\n     }\n     return real == other.real && imaginary == other.imaginary;\n   }\n \n-  // @override\n-  // String toString() {\n-  //   if (_imag >= 0) {\n-  //     return '$_real + ${_imag}j';\n-  //   }\n-  //   return '$_real - ${_imag.abs()}j';\n-  // }\n-\n   @override\n   String toString() {\n     if (_imag >= 0) {\n+      return '$_real + ${_imag}j';\n+    }\n+    return '$_real - ${_imag.abs()}j';\n+  }\n+\n+  // @override\n+  String toString2() {\n+    if (_imag >= 0) {\n       return '$_imag - ${_real}j';\n     }\n     return '$_imag + ${_real.abs()}j';\n   }\n"
                },
                {
                    "date": 1642653915987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,19 +31,19 @@\n     }\n     return real == other.real && imaginary == other.imaginary;\n   }\n \n+  // @override\n+  // String toString() {\n+  //   if (_imag >= 0) {\n+  //     return '$_real + ${_imag}j';\n+  //   }\n+  //   return '$_real - ${_imag.abs()}j';\n+  // }\n+\n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return '$_real + ${_imag}j';\n-    }\n-    return '$_real - ${_imag.abs()}j';\n-  }\n-\n-  // @override\n-  String toString2() {\n-    if (_imag >= 0) {\n       return '$_imag - ${_real}j';\n     }\n     return '$_imag + ${_real.abs()}j';\n   }\n"
                },
                {
                    "date": 1642653999788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,23 +31,23 @@\n     }\n     return real == other.real && imaginary == other.imaginary;\n   }\n \n+  @override\n+  String toString() {\n+    if (_imag >= 0) {\n+      return '$_real + ${_imag}j';\n+    }\n+    return '$_real - ${_imag.abs()}j';\n+  }\n+\n   // @override\n   // String toString() {\n   //   if (_imag >= 0) {\n-  //     return '$_real + ${_imag}j';\n+  //     return '$_imag - ${_real}j';\n   //   }\n-  //   return '$_real - ${_imag.abs()}j';\n+  //   return '$_imag + ${_real.abs()}j';\n   // }\n-\n-  @override\n-  String toString() {\n-    if (_imag >= 0) {\n-      return '$_imag - ${_real}j';\n-    }\n-    return '$_imag + ${_real.abs()}j';\n-  }\n   // static Complex conjugate(var c1, Complex c2) {\n   //   var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n   //   num ii = c1.imaginary - c2.imaginary;\n   //   return Complex(rr, ii);\n"
                },
                {
                    "date": 1642656358345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,12 +46,13 @@\n   //     return '$_imag - ${_real}j';\n   //   }\n   //   return '$_imag + ${_real.abs()}j';\n   // }\n-  // static Complex conjugate(var c1, Complex c2) {\n-  //   var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n-  //   num ii = c1.imaginary - c2.imaginary;\n-  //   return Complex(rr, ii);\n+  // static Complex conjugate(_real, _imag) {\n+  //  if (_imag >= 0) {\n+  //     return '$_real + ${_imag}j';\n+  //   }\n+  //   return '$_real - ${_imag.abs()}j';\n   // }\n \n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n"
                },
                {
                    "date": 1642656471804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,17 @@\n // ignore_for_file: unnecessary_getters_setters, hash_and_equals\n \n import 'dart:math';\n \n-class Complex {\n+class ComplexN {\n   num _real;\n   num _imag;\n \n   // 1- Here we define different ways to build a complex number:\n   // constructors:\n-  Complex([this._real = 0, this._imag = 0]);\n-  Complex.im(num imaginary) : this(0, imaginary);\n-  Complex.re(num real) : this(real, 0);\n+  ComplexN([this._real = 0, this._imag = 0]);\n+  ComplexN.im(num imaginary) : this(0, imaginary);\n+  ComplexN.re(num real) : this(real, 0);\n   // 2- The normal utility methods to get and set the real and\n   // imaginary part, to get the absolute value and the angle, to\n   //  compare two complex numbers:\n   num get real => _real;\n@@ -25,9 +25,9 @@\n   num get angle => atan2(imaginary, real);\n \n   @override\n   bool operator ==(other) {\n-    if (other is! Complex) {\n+    if (other is! ComplexN) {\n       return false;\n     }\n     return real == other.real && imaginary == other.imaginary;\n   }\n@@ -56,71 +56,71 @@\n \n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n   //  division are defined as overloading of the operators +, *, - and /\n-  Complex operator +(Complex x) {\n-    return Complex(_real + x.real, _imag + x.imaginary);\n+  ComplexN operator +(ComplexN x) {\n+    return ComplexN(_real + x.real, _imag + x.imaginary);\n   }\n \n-  Complex operator -(var x) {\n-    if (x is Complex) {\n-      return Complex(real - x.real, imaginary - x.imaginary);\n+  ComplexN operator -(var x) {\n+    if (x is ComplexN) {\n+      return ComplexN(real - x.real, imaginary - x.imaginary);\n     } else if (x is num) {\n       _real -= x;\n       return this;\n     }\n     throw 'Not a number';\n   }\n \n-  Complex operator *(var x) {\n-    if (x is Complex) {\n+  ComplexN operator *(var x) {\n+    if (x is ComplexN) {\n       num realAux = (real * x.real - imaginary * x.imaginary);\n       num imagAux = (imaginary * x.real + real * x.imaginary);\n-      return Complex(realAux, imagAux);\n+      return ComplexN(realAux, imagAux);\n     } else if (x is num) {\n-      return Complex(real * x, imaginary * x);\n+      return ComplexN(real * x, imaginary * x);\n     }\n     throw 'Not a number';\n   }\n \n-  Complex operator /(var x) {\n-    if (x is Complex) {\n+  ComplexN operator /(var x) {\n+    if (x is ComplexN) {\n       num realAux = (real * x.real + imaginary * x.imaginary) /\n           (x.real * x.real + x.imaginary * x.imaginary);\n       num imagAux = (imaginary * x.real - real * x.imaginary) /\n           (x.real * x.real + x.imaginary * x.imaginary);\n-      return Complex(realAux, imagAux);\n+      return ComplexN(realAux, imagAux);\n     } else if (x is num) {\n-      return Complex(real / x, imaginary / x);\n+      return ComplexN(real / x, imaginary / x);\n     }\n     throw 'Not a number';\n   }\n \n   // 4- Here we define the same operations as methods:\n-  static Complex add(Complex c1, Complex c2) {\n+  static ComplexN add(ComplexN c1, ComplexN c2) {\n     num rr = c1.real + c2.real;\n     num ii = c1.imaginary + c2.imaginary;\n-    return Complex(rr, ii);\n+    return ComplexN(rr, ii);\n   }\n \n-  static Complex subtract(Complex c1, Complex c2) {\n+  static ComplexN subtract(ComplexN c1, ComplexN c2) {\n     num rr = c1.real - c2.real;\n     num ii = c1.imaginary - c2.imaginary;\n-    return Complex(rr, ii);\n+    return ComplexN(rr, ii);\n   }\n \n-  static Complex multiply(Complex c1, Complex c2) {\n+  static ComplexN multiply(ComplexN c1, ComplexN c2) {\n     num rr = c1.real * c2.real - c1.imaginary * c2.imaginary;\n     num ii = c1.real * c2.imaginary + c1.imaginary * c2.real;\n-    return Complex(rr, ii);\n+    return ComplexN(rr, ii);\n   }\n \n-  static Complex divide(Complex c1, Complex c2) {\n+  static ComplexN divide(ComplexN c1, ComplexN c2) {\n     num real = (c1.real * c2.real + c1.imaginary * c2.imaginary) /\n         (c2.real * c2.real + c2.imaginary * c2.imaginary);\n     num imag = (c1.imaginary * c2.real - c1.real * c2.imaginary) /\n         (c2.real * c2.real + c2.imaginary * c2.imaginary);\n-    return Complex(real, imag);\n+    return ComplexN(real, imag);\n   }\n \n   // static Complex conjugate(var c1, Complex c2) {\n   //   var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n"
                },
                {
                    "date": 1642656645812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,17 @@\n // ignore_for_file: unnecessary_getters_setters, hash_and_equals\n \n import 'dart:math';\n \n-class ComplexN {\n+class Complex {\n   num _real;\n   num _imag;\n \n   // 1- Here we define different ways to build a complex number:\n   // constructors:\n-  ComplexN([this._real = 0, this._imag = 0]);\n-  ComplexN.im(num imaginary) : this(0, imaginary);\n-  ComplexN.re(num real) : this(real, 0);\n+  Complex([this._real = 0, this._imag = 0]);\n+  Complex.im(num imaginary) : this(0, imaginary);\n+  Complex.re(num real) : this(real, 0);\n   // 2- The normal utility methods to get and set the real and\n   // imaginary part, to get the absolute value and the angle, to\n   //  compare two complex numbers:\n   num get real => _real;\n@@ -25,9 +25,9 @@\n   num get angle => atan2(imaginary, real);\n \n   @override\n   bool operator ==(other) {\n-    if (other is! ComplexN) {\n+    if (other is! Complex) {\n       return false;\n     }\n     return real == other.real && imaginary == other.imaginary;\n   }\n@@ -56,71 +56,71 @@\n \n   // 3- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n   //  division are defined as overloading of the operators +, *, - and /\n-  ComplexN operator +(ComplexN x) {\n-    return ComplexN(_real + x.real, _imag + x.imaginary);\n+  Complex operator +(Complex x) {\n+    return Complex(_real + x.real, _imag + x.imaginary);\n   }\n \n-  ComplexN operator -(var x) {\n-    if (x is ComplexN) {\n-      return ComplexN(real - x.real, imaginary - x.imaginary);\n+  Complex operator -(var x) {\n+    if (x is Complex) {\n+      return Complex(real - x.real, imaginary - x.imaginary);\n     } else if (x is num) {\n       _real -= x;\n       return this;\n     }\n     throw 'Not a number';\n   }\n \n-  ComplexN operator *(var x) {\n-    if (x is ComplexN) {\n+  Complex operator *(var x) {\n+    if (x is Complex) {\n       num realAux = (real * x.real - imaginary * x.imaginary);\n       num imagAux = (imaginary * x.real + real * x.imaginary);\n-      return ComplexN(realAux, imagAux);\n+      return Complex(realAux, imagAux);\n     } else if (x is num) {\n-      return ComplexN(real * x, imaginary * x);\n+      return Complex(real * x, imaginary * x);\n     }\n     throw 'Not a number';\n   }\n \n-  ComplexN operator /(var x) {\n-    if (x is ComplexN) {\n+  Complex operator /(var x) {\n+    if (x is Complex) {\n       num realAux = (real * x.real + imaginary * x.imaginary) /\n           (x.real * x.real + x.imaginary * x.imaginary);\n       num imagAux = (imaginary * x.real - real * x.imaginary) /\n           (x.real * x.real + x.imaginary * x.imaginary);\n-      return ComplexN(realAux, imagAux);\n+      return Complex(realAux, imagAux);\n     } else if (x is num) {\n-      return ComplexN(real / x, imaginary / x);\n+      return Complex(real / x, imaginary / x);\n     }\n     throw 'Not a number';\n   }\n \n   // 4- Here we define the same operations as methods:\n-  static ComplexN add(ComplexN c1, ComplexN c2) {\n+  static Complex add(Complex c1, Complex c2) {\n     num rr = c1.real + c2.real;\n     num ii = c1.imaginary + c2.imaginary;\n-    return ComplexN(rr, ii);\n+    return Complex(rr, ii);\n   }\n \n-  static ComplexN subtract(ComplexN c1, ComplexN c2) {\n+  static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n     num ii = c1.imaginary - c2.imaginary;\n-    return ComplexN(rr, ii);\n+    return Complex(rr, ii);\n   }\n \n-  static ComplexN multiply(ComplexN c1, ComplexN c2) {\n+  static Complex multiply(Complex c1, Complex c2) {\n     num rr = c1.real * c2.real - c1.imaginary * c2.imaginary;\n     num ii = c1.real * c2.imaginary + c1.imaginary * c2.real;\n-    return ComplexN(rr, ii);\n+    return Complex(rr, ii);\n   }\n \n-  static ComplexN divide(ComplexN c1, ComplexN c2) {\n+  static Complex divide(Complex c1, Complex c2) {\n     num real = (c1.real * c2.real + c1.imaginary * c2.imaginary) /\n         (c2.real * c2.real + c2.imaginary * c2.imaginary);\n     num imag = (c1.imaginary * c2.real - c1.real * c2.imaginary) /\n         (c2.real * c2.real + c2.imaginary * c2.imaginary);\n-    return ComplexN(real, imag);\n+    return Complex(real, imag);\n   }\n \n   // static Complex conjugate(var c1, Complex c2) {\n   //   var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n"
                },
                {
                    "date": 1642665762887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,14 @@\n     num ii = c1.imaginary + c2.imaginary;\n     return Complex(rr, ii);\n   }\n \n+  static Complex conjugate(Complex c1, Complex c2) {\n+    num rr = c1.real;\n+    num ii = c1.imaginary;\n+    return Complex(rr, ii);\n+  }\n+\n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n     num ii = c1.imaginary - c2.imaginary;\n     return Complex(rr, ii);\n"
                },
                {
                    "date": 1642665861706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(rr, ii);\n+    return Complex(ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642666631954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,23 +39,42 @@\n     }\n     return '$_real - ${_imag.abs()}j';\n   }\n \n-  // @override\n-  // String toString() {\n-  //   if (_imag >= 0) {\n-  //     return '$_imag - ${_real}j';\n-  //   }\n-  //   return '$_imag + ${_real.abs()}j';\n-  // }\n-  // static Complex conjugate(_real, _imag) {\n-  //  if (_imag >= 0) {\n-  //     return '$_real + ${_imag}j';\n-  //   }\n-  //   return '$_real - ${_imag.abs()}j';\n-  // }\n+  // 3 - Here we define the same operations as methods:\n+  static Complex add(Complex c1, Complex c2) {\n+    num rr = c1.real + c2.real;\n+    num ii = c1.imaginary + c2.imaginary;\n+    return Complex(rr, ii);\n+  }\n \n-  // 3- operator overloading:\n+  static Complex conjugate(Complex c1, Complex c2) {\n+    num rr = c1.real;\n+    num ii = c1.imaginary;\n+    return Complex(ii, rr);\n+  }\n+\n+  static Complex subtract(Complex c1, Complex c2) {\n+    num rr = c1.real - c2.real;\n+    num ii = c1.imaginary - c2.imaginary;\n+    return Complex(rr, ii);\n+  }\n+\n+  static Complex multiply(Complex c1, Complex c2) {\n+    num rr = c1.real * c2.real - c1.imaginary * c2.imaginary;\n+    num ii = c1.real * c2.imaginary + c1.imaginary * c2.real;\n+    return Complex(rr, ii);\n+  }\n+\n+  static Complex divide(Complex c1, Complex c2) {\n+    num real = (c1.real * c2.real + c1.imaginary * c2.imaginary) /\n+        (c2.real * c2.real + c2.imaginary * c2.imaginary);\n+    num imag = (c1.imaginary * c2.real - c1.real * c2.imaginary) /\n+        (c2.real * c2.real + c2.imaginary * c2.imaginary);\n+    return Complex(real, imag);\n+  }\n+\n+  // 4- operator overloading:\n   // The basic operations for adding, multiplying, subtraction and    //\n   //  division are defined as overloading of the operators +, *, - and /\n   Complex operator +(Complex x) {\n     return Complex(_real + x.real, _imag + x.imaginary);\n@@ -94,41 +113,8 @@\n     }\n     throw 'Not a number';\n   }\n \n-  // 4- Here we define the same operations as methods:\n-  static Complex add(Complex c1, Complex c2) {\n-    num rr = c1.real + c2.real;\n-    num ii = c1.imaginary + c2.imaginary;\n-    return Complex(rr, ii);\n-  }\n-\n-  static Complex conjugate(Complex c1, Complex c2) {\n-    num rr = c1.real;\n-    num ii = c1.imaginary;\n-    return Complex(ii, rr);\n-  }\n-\n-  static Complex subtract(Complex c1, Complex c2) {\n-    num rr = c1.real - c2.real;\n-    num ii = c1.imaginary - c2.imaginary;\n-    return Complex(rr, ii);\n-  }\n-\n-  static Complex multiply(Complex c1, Complex c2) {\n-    num rr = c1.real * c2.real - c1.imaginary * c2.imaginary;\n-    num ii = c1.real * c2.imaginary + c1.imaginary * c2.real;\n-    return Complex(rr, ii);\n-  }\n-\n-  static Complex divide(Complex c1, Complex c2) {\n-    num real = (c1.real * c2.real + c1.imaginary * c2.imaginary) /\n-        (c2.real * c2.real + c2.imaginary * c2.imaginary);\n-    num imag = (c1.imaginary * c2.real - c1.real * c2.imaginary) /\n-        (c2.real * c2.real + c2.imaginary * c2.imaginary);\n-    return Complex(real, imag);\n-  }\n-\n   // static Complex conjugate(var c1, Complex c2) {\n   //   var rr = exp(c1) * cos(c2.real) + exp(c1) * sin(c2.real);\n   //   num ii = c1.imaginary - c2.imaginary;\n   //   return Complex(rr, ii);\n"
                },
                {
                    "date": 1642666704862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, rr);\n+    return Complex(-ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642666797431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(-ii, rr);\n+    return Complex(ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667179525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, rr);\n+    return Complex(-ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667245968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(-ii, rr);\n+    return Complex(ii, -rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667272592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, -rr);\n+    return Complex(-ii, -rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667322853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(-ii, -rr);\n+    return Complex(ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667338253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return '$_real + ${_imag}j';\n+      return '$_real - ${_imag}j';\n     }\n-    return '$_real - ${_imag.abs()}j';\n+    return '$_real + ${_imag.abs()}j';\n   }\n \n   // 3 - Here we define the same operations as methods:\n   static Complex add(Complex c1, Complex c2) {\n"
                },
                {
                    "date": 1642667458043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, rr);\n+    return Complex(ii, -rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667511758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return '$_real - ${_imag}j';\n+      return '$_real + ${_imag}j';\n     }\n-    return '$_real + ${_imag.abs()}j';\n+    return '$_real - ${_imag.abs()}j';\n   }\n \n   // 3 - Here we define the same operations as methods:\n   static Complex add(Complex c1, Complex c2) {\n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, -rr);\n+    return Complex(ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667720243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   }\n \n   @override\n   String toString() {\n-    if (_imag >= 0) {\n+    if (_real >= 0) {\n       return '$_real + ${_imag}j';\n     }\n     return '$_real - ${_imag.abs()}j';\n   }\n"
                },
                {
                    "date": 1642667750930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, rr);\n+    return Complex(ii, -rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667773210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, -rr);\n+    return Complex(-ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667795073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(-ii, rr);\n+    return Complex(ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642667845137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   }\n \n   @override\n   String toString() {\n-    if (_real >= 0) {\n+    if (_imag >= 0) {\n       return '$_real + ${_imag}j';\n     }\n     return '$_real - ${_imag.abs()}j';\n   }\n"
                },
                {
                    "date": 1642667863986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   }\n \n   @override\n   String toString() {\n-    if (_imag >= 0) {\n+    if (_imag <= 0) {\n       return '$_real + ${_imag}j';\n     }\n     return '$_real - ${_imag.abs()}j';\n   }\n"
                },
                {
                    "date": 1642667881539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   }\n \n   @override\n   String toString() {\n-    if (_imag <= 0) {\n+    if (_imag >= 0) {\n       return '$_real + ${_imag}j';\n     }\n     return '$_real - ${_imag.abs()}j';\n   }\n"
                },
                {
                    "date": 1642668087175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return '$_real + ${_imag}j';\n+      return '$_real + ${-_imag}j';\n     }\n-    return '$_real - ${_imag.abs()}j';\n+    return '$_real - ${-_imag.abs()}j';\n   }\n \n   // 3 - Here we define the same operations as methods:\n   static Complex add(Complex c1, Complex c2) {\n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, rr);\n+    return Complex(ii, -rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642668204458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, -rr);\n+    return Complex(ii, rr);\n   }\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n"
                },
                {
                    "date": 1642668351742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \n   @override\n   String toString() {\n     if (_imag >= 0) {\n-      return '$_real + ${-_imag}j';\n+      return '$_real + ${_imag}j';\n     }\n-    return '$_real - ${-_imag.abs()}j';\n+    return '$_real - ${_imag.abs()}j';\n   }\n \n   // 3 - Here we define the same operations as methods:\n   static Complex add(Complex c1, Complex c2) {\n"
                },
                {
                    "date": 1642749588069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,10 @@\n \n   static Complex conjugate(Complex c1, Complex c2) {\n     num rr = c1.real;\n     num ii = c1.imaginary;\n-    return Complex(ii, rr);\n-  }\n+    return Complex(rr, -ii);\n+  } //0.4791190824846724 - 0.8777524256895681j\n \n   static Complex subtract(Complex c1, Complex c2) {\n     num rr = c1.real - c2.real;\n     num ii = c1.imaginary - c2.imaginary;\n"
                }
            ],
            "date": 1642136603622,
            "name": "Commit-0",
            "content": "// ------\n// Ready\n// ------\n// ignore_for_file: unnecessary_getters_setters, hash_and_equals\n\nimport 'dart:math' as math;\n\nclass Complex {\n  num _real;\n  num _imag;\n\n  // 1- Here we define different ways to build a complex number:\n  // constructors:\n  Complex([this._real = 0, this._imag = 0]);\n  Complex.im(num imag) : this(0, imag);\n  Complex.re(num real) : this(real, 0);\n  // 2- The normal utility methods to get and set the real and\n  // imaginary part, to get the absolute value and the angle, to\n  //  compare two complex numbers:\n  num get real => _real;\n  set real(num value) => _real = value;\n  num get imag => _imag;\n  set imag(num value) => _imag = value;\n  num get abs => math.sqrt(real * real + imag * imag);\n  num get angle => math.atan2(imag, real);\n\n  @override\n  bool operator ==(other) {\n    if (other is! Complex) {\n      return false;\n    }\n    return real == other.real && imag == other.imag;\n  }\n\n  @override\n  String toString() {\n    if (_imag >= 0) {\n      return '$_real + ${_imag}i';\n    }\n    return '$_real - ${_imag.abs()}i';\n  }\n\n  // 3- operator overloading:\n  // The basic operations for adding, multiplying, subtraction and    //\n  //  division are defined as overloading of the operators +, *, - and /\n  Complex operator +(Complex x) {\n    return Complex(_real + x.real, _imag + x.imag);\n  }\n\n  Complex operator -(var x) {\n    if (x is Complex) {\n      return Complex(real - x.real, imag - x.imag);\n    } else if (x is num) {\n      _real -= x;\n      return this;\n    }\n    throw 'Not a number';\n  }\n\n  Complex operator *(var x) {\n    if (x is Complex) {\n      num realAux = (real * x.real - imag * x.imag);\n      num imagAux = (imag * x.real + real * x.imag);\n      return Complex(realAux, imagAux);\n    } else if (x is num) {\n      return Complex(real * x, imag * x);\n    }\n    throw 'Not a number';\n  }\n\n  Complex operator /(var x) {\n    if (x is Complex) {\n      num realAux =\n          (real * x.real + imag * x.imag) / (x.real * x.real + x.imag * x.imag);\n      num imagAux =\n          (imag * x.real - real * x.imag) / (x.real * x.real + x.imag * x.imag);\n      return Complex(realAux, imagAux);\n    } else if (x is num) {\n      return Complex(real / x, imag / x);\n    }\n    throw 'Not a number';\n  }\n\n  // 4- Here we define the same operations as methods:\n  static Complex add(Complex c1, Complex c2) {\n    num rr = c1.real + c2.real;\n    num ii = c1.imag + c2.imag;\n    return Complex(rr, ii);\n  }\n\n  static Complex subtract(Complex c1, Complex c2) {\n    num rr = c1.real - c2.real;\n    num ii = c1.imag - c2.imag;\n    return Complex(rr, ii);\n  }\n\n  static Complex multiply(Complex c1, Complex c2) {\n    num rr = c1.real * c2.real - c1.imag * c2.imag;\n    num ii = c1.real * c2.imag + c1.imag * c2.real;\n    return Complex(rr, ii);\n  }\n\n  static Complex divide(Complex c1, Complex c2) {\n    num real = (c1.real * c2.real + c1.imag * c2.imag) /\n        (c2.real * c2.real + c2.imag * c2.imag);\n    num imag = (c1.imag * c2.real - c1.real * c2.imag) /\n        (c2.real * c2.real + c2.imag * c2.imag);\n    return Complex(real, imag);\n  }\n}\n"
        }
    ]
}