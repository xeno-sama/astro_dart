{
    "sourceFile": "bin/vsop/src/classes.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 99,
            "patches": [
                {
                    "date": 1642126477179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642126688055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,64 @@\n-// from math import sqrt, sin, cos, radians\n-// import enum\n+import 'dart:math';\n \n+enum _PrecessDir {\n+  From2000, // 0\n+  Into2000 // 1\n+}\n+\n+enum Body {\n+  //The celestial bodies supported by Astronomy Engine calculations\n+  // Invalid: An unknown, invalid, or undefined celestial body.\n+  //Invalid = -1\n+  Mercury, //0\n+  Venus, //1\n+  Earth, //2\n+  Mars, //3\n+  Jupiter, //4\n+  Saturn, //5\n+  Uranus, //6\n+  Neptune, //7\n+  Pluto, //8\n+  Sun, //9\n+  Moon, //10\n+  EMB, //11 EMB: The Earth/Moon Barycenter.\n+  SSB //12  SSB: The Solar System Barycenter.\n+}\n+\n+class Vector {\n+  // \"\"\"A Cartesian vector with 3 space coordinates and 1 time coordinate. \"\"\"\n+  var x, y, z, t;\n+  Vector(this.x, this.y, this.z, this.t);\n+\n+  double Length(x, y, z) => sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2));\n+  //Returns the length of the vector in AU. (xˆ2+yˆ2+zˆ2)\n+}\n+\n+class StateVector {\n+// A combination of a position vector, a velocity vector, and a time.\n+  var x, y, z, vx, vy, vz, t;\n+  StateVector(this.x, this.y, this.z, this.vx, this.vy, this.vz, this.t);\n+}\n+\n+\n // class EclipticCoordinates:\n //     \"\"\"Ecliptic angular and Cartesian coordinates.\"\"\"\n \n //     def __init__(self, vec, elat, elon):\n //         self.vec = vec\n //         self.elat = elat\n //         self.elon = elon\n \n-// class PrecessDir(enum.Enum):\n-//     From2000 = 0\n-//     Into2000 = 1\n \n-// class Body(enum.Enum):\n-//     Invalid = -1\n-//     Mercury = 0\n-//     Venus = 1\n-//     Earth = 2\n-//     Mars = 3\n-//     Jupiter = 4\n-//     Saturn = 5\n-//     Uranus = 6\n-//     Neptune = 7\n-//     Pluto = 8\n-//     Sun = 9\n-//     Moon = 10\n-//     EMB = 11    # EMB: The Earth/Moon Barycenter.\n-//     SSB = 12    # SSB: The Solar System Barycenter.\n-\n // class Observer:\n //     \"\"\"Represents the geographic location of an observer on the surface of the Earth.\"\"\"\n \n //     def __init__(self, latitude, longitude, height=0.0):\n //         self.latitude = latitude\n //         self.longitude = longitude\n //         self.height = height  # можно убрать и изменить ParseArgs\n \n-// class Vector:\n-//     \"\"\"A Cartesian vector with 3 space coordinates and 1 time coordinate. \"\"\"\n \n-//     def __init__(self, x, y, z, t):\n-//         self.x = x\n-//         self.y = y\n-//         self.z = z\n-//         self.t = t\n-\n-//     def Length(self):\n-//         \"\"\"Returns the length of the vector in AU.\"\"\"\n-//         return sqrt(self.x**2 + self.y**2 + self.z**2)\n-\n-// class StateVector:\n-//     \"\"\"A combination of a position vector, a velocity vector, and a time. \"\"\"\n-\n-//     def __init__(self, x, y, z, vx, vy, vz, t):\n-//         self.x = x\n-//         self.y = y\n-//         self.z = z\n-//         self.vx = vx\n-//         self.vy = vy\n-//         self.vz = vz\n-//         self.t = t\n-\n // class TerseVector:\n //     def __init__(self, x, y, z):\n //         self.x = x\n //         self.y = y\n"
                },
                {
                    "date": 1642131209654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,27 +38,22 @@\n   var x, y, z, vx, vy, vz, t;\n   StateVector(this.x, this.y, this.z, this.vx, this.vy, this.vz, this.t);\n }\n \n-\n-// class EclipticCoordinates:\n+class EclipticCoordinates {\n //     \"\"\"Ecliptic angular and Cartesian coordinates.\"\"\"\n+  var vec, elat, elon;\n+  EclipticCoordinates(this.vec, this.elat, this.elon);\n+}\n \n-//     def __init__(self, vec, elat, elon):\n-//         self.vec = vec\n-//         self.elat = elat\n-//         self.elon = elon\n+class Observer {\n+//Represents the geographic location of an observer on the surface of the Earth.\n+  var latitude, longitude, height = 0.0;\n+  Observer(this.latitude, this.longitude, this.height);\n+}\n+    \n \n \n-// class Observer:\n-//     \"\"\"Represents the geographic location of an observer on the surface of the Earth.\"\"\"\n-\n-//     def __init__(self, latitude, longitude, height=0.0):\n-//         self.latitude = latitude\n-//         self.longitude = longitude\n-//         self.height = height  # можно убрать и изменить ParseArgs\n-\n-\n // class TerseVector:\n //     def __init__(self, x, y, z):\n //         self.x = x\n //         self.y = y\n"
                },
                {
                    "date": 1642131563137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,25 +49,19 @@\n //Represents the geographic location of an observer on the surface of the Earth.\n   var latitude, longitude, height = 0.0;\n   Observer(this.latitude, this.longitude, this.height);\n }\n-    \n \n+class TerseVector {\n+// A combination of a position vector, a velocity vector, and a time.\n+  var x, y, z;\n+  TerseVector(this.x, this.y, this.z);\n \n-// class TerseVector:\n-//     def __init__(self, x, y, z):\n-//         self.x = x\n-//         self.y = y\n-//         self.z = z\n+  Vector ToAstroVector(time) => Vector(x, y, z, time);\n+  //    Convert _TerseVector object to Vector object\n+  double quadrature() => x * x + y * y + z * z;\n+//     Return magnitude squared of this vector.\n \n-//     def ToAstroVector(self, time):\n-//         '''Convert _TerseVector object to Vector object.'''\n-//         return Vector(self.x, self.y, self.z, time)\n-\n-//     def quadrature(self):\n-//         '''Return magnitude squared of this vector.'''\n-//         return self.x**2 + self.y**2 + self.z**2\n-\n //     def mean(self, other):\n //         '''Return the average of this vector and another vector.'''\n //         return TerseVector((self.x + other.x)/2.0, (self.y + other.y)/2.0, (self.z + other.z)/2.0)\n \n@@ -85,9 +79,12 @@\n \n //     def __truediv__(self, scalar):\n //         return TerseVector(self.x / scalar, self.y / scalar, self.z / scalar)\n \n+}\n \n+\n+\n // class RotationMatrix:\n //     \"\"\"Contains a rotation matrix that can be used to transform one\n //     coordinate system into another.\n //     ----------\n"
                },
                {
                    "date": 1642131959388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,31 +56,31 @@\n   var x, y, z;\n   TerseVector(this.x, this.y, this.z);\n \n   Vector ToAstroVector(time) => Vector(x, y, z, time);\n-  //    Convert _TerseVector object to Vector object\n+  //  Convert _TerseVector object to Vector object\n+\n   double quadrature() => x * x + y * y + z * z;\n-//     Return magnitude squared of this vector.\n+  //  Return magnitude squared of this vector.\n \n-//     def mean(self, other):\n-//         '''Return the average of this vector and another vector.'''\n-//         return TerseVector((self.x + other.x)/2.0, (self.y + other.y)/2.0, (self.z + other.z)/2.0)\n+  TerseVector mean(other) => TerseVector(\n+      (x + other.x) / 2.0, (y + other.y) / 2.0, (z + other.z) / 2.0);\n+  //  Return the average of this vector and another vector.\n \n-//     def __add__(self, other):\n-//         return TerseVector(self.x + other.x, self.y + other.y, self.z + other.z)\n+  TerseVector __add__(other) =>\n+      TerseVector(x + other.x, y + other.y, z + other.z);\n \n-//     def __sub__(self, other):\n-//         return TerseVector(self.x - other.x, self.y - other.y, self.z - other.z)\n+  TerseVector __sub__(other) =>\n+      TerseVector(x - other.x, y - other.y, z - other.z);\n \n-//     def __mul__(self, scalar):\n-//         return TerseVector(scalar * self.x, scalar * self.y, scalar * self.z)\n+  TerseVector __mul__(scalar) =>\n+      TerseVector(scalar * x, scalar * y, scalar * z);\n \n-//     def __rmul__(self, scalar):\n-//         return TerseVector(scalar * self.x, scalar * self.y, scalar * self.z)\n+  TerseVector __rmul__(scalar) =>\n+      TerseVector(scalar * x, scalar * y, scalar * z);\n \n-//     def __truediv__(self, scalar):\n-//         return TerseVector(self.x / scalar, self.y / scalar, self.z / scalar)\n-\n+  TerseVector __truediv__(scalar) =>\n+      TerseVector(x / scalar, y / scalar, z / scalar);\n }\n \n \n \n"
                },
                {
                    "date": 1642132075963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,22 +81,17 @@\n   TerseVector __truediv__(scalar) =>\n       TerseVector(x / scalar, y / scalar, z / scalar);\n }\n \n-\n-\n-// class RotationMatrix:\n-//     \"\"\"Contains a rotation matrix that can be used to transform one\n+class RotationMatrix {\n+//     Contains a rotation matrix that can be used to transform one\n //     coordinate system into another.\n-//     ----------\n-//     rot : float[3][3]\n-//         A normalized 3x3 rotation matrix.\n-//     \"\"\"\n+//    rot : float[3][3]  A normalized 3x3 rotation matrix\n \n-//     def __init__(self, rot):\n-//         self.rot = rot\n+  var rot;\n+  RotationMatrix(this.rot);\n+}\n \n-\n // class body_grav_calc_t:\n //     def __init__(self, tt, r, v, a):\n //         self.tt = tt    # J2000 terrestrial time [days]\n //         self.r = r      # position [au]\n@@ -112,6 +107,4 @@\n //     def __init__(self, tt, r, v):\n //         self.tt = tt\n //         self.r = r\n //         self.v = v\n-\n-\n"
                },
                {
                    "date": 1642132294277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,24 +85,25 @@\n class RotationMatrix {\n //     Contains a rotation matrix that can be used to transform one\n //     coordinate system into another.\n //    rot : float[3][3]  A normalized 3x3 rotation matrix\n-\n   var rot;\n   RotationMatrix(this.rot);\n }\n \n-// class body_grav_calc_t:\n-//     def __init__(self, tt, r, v, a):\n-//         self.tt = tt    # J2000 terrestrial time [days]\n-//         self.r = r      # position [au]\n-//         self.v = v      # velocity [au/day]\n-//         self.a = a      # acceleration [au/day^2]\n+class body_grav_calc_t {\n+  var tt, r, v, a;\n+  body_grav_calc_t(this.tt, this.r, this.v, this.a);\n+}\n+//         this.tt = tt    # J2000 terrestrial time [days]\n+//         this.r = r      # position [au]\n+//         this.v = v      # velocity [au/day]\n+//         this.a = a      # acceleration [au/day^2]\n \n-// class grav_sim_t:\n-//     def __init__(self, bary, grav):\n-//         self.bary = bary\n-//         self.grav = grav\n+class grav_sim_t {\n+  var bary, grav;\n+  grav_sim_t(this.bary, this.grav);\n+}\n \n // class body_state_t:\n //     def __init__(self, tt, r, v):\n //         self.tt = tt\n"
                },
                {
                    "date": 1642132352277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n   var bary, grav;\n   grav_sim_t(this.bary, this.grav);\n }\n \n-// class body_state_t:\n-//     def __init__(self, tt, r, v):\n-//         self.tt = tt\n-//         self.r = r\n-//         self.v = v\n+class body_state_t {\n+  var tt, r, v;\n+  body_state_t(this.r, this.tt, this.v);\n+}\n"
                },
                {
                    "date": 1642132381324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,7 @@\n+// ------\n+// Ready\n+// ------\n import 'dart:math';\n \n enum _PrecessDir {\n   From2000, // 0\n"
                },
                {
                    "date": 1642132402792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,8 @@\n }\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n-  // Invalid: An unknown, invalid, or undefined celestial body.\n-  //Invalid = -1\n   Mercury, //0\n   Venus, //1\n   Earth, //2\n   Mars, //3\n"
                },
                {
                    "date": 1642133248747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n // Ready\n // ------\n import 'dart:math';\n \n-enum _PrecessDir {\n+enum PrecessDir {\n   From2000, // 0\n   Into2000 // 1\n }\n \n"
                },
                {
                    "date": 1642302867300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,10 @@\n }\n \n class Observer {\n //Represents the geographic location of an observer on the surface of the Earth.\n-  var latitude, longitude, height = 0.0;\n-  Observer(this.latitude, this.longitude, this.height);\n+  var latitude, longitude;\n+  Observer(this.latitude, this.longitude);\n }\n \n class TerseVector {\n // A combination of a position vector, a velocity vector, and a time.\n"
                },
                {
                    "date": 1642307613084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,19 +11,19 @@\n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n   Venus, //1\n-  Earth, //2\n-  Mars, //3\n-  Jupiter, //4\n-  Saturn, //5\n-  Uranus, //6\n-  Neptune, //7\n-  Pluto, //8\n-  Sun, //9\n-  Moon, //10\n-  EMB, //11 EMB: The Earth/Moon Barycenter.\n-  SSB //12  SSB: The Solar System Barycenter.\n+  // Earth, //2\n+  // Mars, //3\n+  // Jupiter, //4\n+  // Saturn, //5\n+  // Uranus, //6\n+  // Neptune, //7\n+  // Pluto, //8\n+  // Sun, //9\n+  // Moon, //10\n+  // EMB, //11 EMB: The Earth/Moon Barycenter.\n+  // SSB //12  SSB: The Solar System Barycenter.\n }\n \n class Vector {\n   // \"\"\"A Cartesian vector with 3 space coordinates and 1 time coordinate. \"\"\"\n"
                },
                {
                    "date": 1642324355395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   // Pluto, //8\n-  // Sun, //9\n+  Sun, //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642403207562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n   Venus, //1\n   // Earth, //2\n-  // Mars, //3\n+  Mars, //3\n   // Jupiter, //4\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n"
                },
                {
                    "date": 1642403259932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n   Venus, //1\n   // Earth, //2\n-  Mars, //3\n+  // Mars, //3\n   // Jupiter, //4\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n"
                },
                {
                    "date": 1642405227721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,17 +10,17 @@\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n-  Venus, //1\n+  // Venus, //1\n   // Earth, //2\n   // Mars, //3\n   // Jupiter, //4\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   // Pluto, //8\n-  Sun, //9\n+  // Sun, //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642429494205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n-  // Venus, //1\n+  Venus, //1\n   // Earth, //2\n   // Mars, //3\n   // Jupiter, //4\n   // Saturn, //5\n"
                },
                {
                    "date": 1642430181380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   // Pluto, //8\n-  // Sun, //9\n+  Sun, //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642473350818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n   Venus, //1\n-  // Earth, //2\n-  // Mars, //3\n-  // Jupiter, //4\n-  // Saturn, //5\n-  // Uranus, //6\n-  // Neptune, //7\n+  Earth, //2\n+  Mars, //3\n+  Jupiter, //4\n+  Saturn, //5\n+  Uranus, //6\n+  Neptune, //7\n   // Pluto, //8\n   Sun, //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n"
                },
                {
                    "date": 1642477835699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,18 +10,18 @@\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n-  Venus, //1\n-  Earth, //2\n-  Mars, //3\n-  Jupiter, //4\n-  Saturn, //5\n-  Uranus, //6\n-  Neptune, //7\n+  // Venus, //1\n+  // Earth, //2\n+  // Mars, //3\n+  // Jupiter, //4\n+  // Saturn, //5\n+  // Uranus, //6\n+  // Neptune, //7\n   // Pluto, //8\n-  Sun, //9\n-  // Moon, //10\n+  // Sun, //9\n+  Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n \n"
                },
                {
                    "date": 1642477849443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   // Pluto, //8\n-  // Sun, //9\n+  Sun, //9\n   Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642480992950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n   // Venus, //1\n-  // Earth, //2\n+  Earth, //2\n   // Mars, //3\n   // Jupiter, //4\n   // Saturn, //5\n   // Uranus, //6\n"
                },
                {
                    "date": 1642481738916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,18 +10,18 @@\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n-  // Venus, //1\n+  Venus, //1\n   Earth, //2\n-  // Mars, //3\n-  // Jupiter, //4\n-  // Saturn, //5\n-  // Uranus, //6\n-  // Neptune, //7\n+  Mars, //3\n+  Jupiter, //4\n+  Saturn, //5\n+  Uranus, //6\n+  Neptune, //7\n   // Pluto, //8\n   Sun, //9\n-  Moon, //10\n+  // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n \n"
                },
                {
                    "date": 1642483358116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,19 +9,19 @@\n }\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n-  Mercury, //0\n-  Venus, //1\n-  Earth, //2\n-  Mars, //3\n-  Jupiter, //4\n-  Saturn, //5\n-  Uranus, //6\n-  Neptune, //7\n-  // Pluto, //8\n-  Sun, //9\n-  // Moon, //10\n+  // Mercury, //0\n+  // Venus, //1\n+  // Earth, //2\n+  // Mars, //3\n+  // Jupiter, //4\n+  // Saturn, //5\n+  // Uranus, //6\n+  // Neptune, //7\n+  // // Pluto, //8\n+  // Sun, //9\n+  Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n \n"
                },
                {
                    "date": 1642483368216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   // // Pluto, //8\n-  // Sun, //9\n+  Sun, //9\n   Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642566496443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   // Mercury, //0\n   // Venus, //1\n-  // Earth, //2\n+  Earth, //2\n   // Mars, //3\n   // Jupiter, //4\n   // Saturn, //5\n   // Uranus, //6\n"
                },
                {
                    "date": 1642567303692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n }\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n-  // Mercury, //0\n-  // Venus, //1\n+  Mercury, //0\n+  Venus, //1\n   Earth, //2\n   // Mars, //3\n   // Jupiter, //4\n   // Saturn, //5\n"
                },
                {
                    "date": 1642567925408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   // Uranus, //6\n   // Neptune, //7\n   // // Pluto, //8\n   Sun, //9\n-  Moon, //10\n+  // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n \n"
                },
                {
                    "date": 1642569204435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   // \"\"\"A Cartesian vector with 3 space coordinates and 1 time coordinate. \"\"\"\n   var x, y, z, t;\n   Vector(this.x, this.y, this.z, this.t);\n \n-  double Length(x, y, z) => sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2));\n+  double length(x, y, z) => sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2));\n   //Returns the length of the vector in AU. (xˆ2+yˆ2+zˆ2)\n }\n \n class StateVector {\n"
                },
                {
                    "date": 1642572131986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   // Jupiter, //4\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n-  // // Pluto, //8\n+  Pluto, //8\n   Sun, //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n"
                },
                {
                    "date": 1642576723880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,13 @@\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n   Venus, //1\n   Earth, //2\n-  // Mars, //3\n-  // Jupiter, //4\n-  // Saturn, //5\n-  // Uranus, //6\n-  // Neptune, //7\n+  Mars, //3\n+  Jupiter, //4\n+  Saturn, //5\n+  Uranus, //6\n+  Neptune, //7\n   Pluto, //8\n   Sun, //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n"
                },
                {
                    "date": 1642576752524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,13 @@\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n   Venus, //1\n   Earth, //2\n-  Mars, //3\n-  Jupiter, //4\n-  Saturn, //5\n-  Uranus, //6\n-  Neptune, //7\n+  // Mars, //3\n+  // Jupiter, //4\n+  // Saturn, //5\n+  // Uranus, //6\n+  // Neptune, //7\n   Pluto, //8\n   Sun, //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n"
                },
                {
                    "date": 1642576772117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   //The celestial bodies supported by Astronomy Engine calculations\n   Mercury, //0\n   Venus, //1\n   Earth, //2\n-  // Mars, //3\n+  Mars, //3\n   // Jupiter, //4\n   // Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n"
                },
                {
                    "date": 1642576788276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n   Mercury, //0\n   Venus, //1\n   Earth, //2\n   Mars, //3\n-  // Jupiter, //4\n-  // Saturn, //5\n+  Jupiter, //4\n+  Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   Pluto, //8\n   Sun, //9\n"
                },
                {
                    "date": 1642576794624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   Pluto, //8\n-  Sun, //9\n+  Sun //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642576818435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   Earth, //2\n   Mars, //3\n   Jupiter, //4\n   Saturn, //5\n-  // Uranus, //6\n+  Uranus, //6\n   // Neptune, //7\n   Pluto, //8\n   Sun //9\n   // Moon, //10\n"
                },
                {
                    "date": 1642576867373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   Earth, //2\n   Mars, //3\n   Jupiter, //4\n   Saturn, //5\n-  Uranus, //6\n+  // Uranus, //6\n   // Neptune, //7\n   Pluto, //8\n   Sun //9\n   // Moon, //10\n"
                },
                {
                    "date": 1642576929334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,18 +9,19 @@\n }\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n+  Sun,\n+  Earth, //2\n   Mercury, //0\n   Venus, //1\n-  Earth, //2\n   Mars, //3\n   Jupiter, //4\n   Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   Pluto, //8\n-  Sun //9\n+  //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642577012916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,19 +9,18 @@\n }\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n-  Sun,\n-  Earth, //2\n   Mercury, //0\n   Venus, //1\n+  Earth, //2\n   Mars, //3\n   Jupiter, //4\n   Saturn, //5\n   // Uranus, //6\n   // Neptune, //7\n   Pluto, //8\n-  //9\n+  Sun //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642577041995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Mars, //3\n   Jupiter, //4\n   Saturn, //5\n   // Uranus, //6\n-  // Neptune, //7\n+  Neptune, //7\n   Pluto, //8\n   Sun //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n"
                },
                {
                    "date": 1642577073391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Mars, //3\n   Jupiter, //4\n   Saturn, //5\n   // Uranus, //6\n-  Neptune, //7\n+  // Neptune, //7\n   Pluto, //8\n   Sun //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n"
                },
                {
                    "date": 1642577086716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   Earth, //2\n   Mars, //3\n   Jupiter, //4\n   Saturn, //5\n-  // Uranus, //6\n+  Uranus, //6\n   // Neptune, //7\n   Pluto, //8\n   Sun //9\n   // Moon, //10\n"
                },
                {
                    "date": 1642577101221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Mars, //3\n   Jupiter, //4\n   Saturn, //5\n   Uranus, //6\n-  // Neptune, //7\n+  Neptune, //7\n   Pluto, //8\n   Sun //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n"
                },
                {
                    "date": 1642577276320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   Saturn, //5\n   Uranus, //6\n   Neptune, //7\n   Pluto, //8\n-  Sun //9\n+  Sun, //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642577299315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   Saturn, //5\n   Uranus, //6\n   Neptune, //7\n   Pluto, //8\n-  Sun, //9\n+  Sun //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642578701316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,28 @@\n // ------\n // Ready\n // ------\n+// ignore_for_file: prefer_typing_uninitialized_variables\n+\n import 'dart:math';\n \n enum PrecessDir {\n-  From2000, // 0\n-  Into2000 // 1\n+  from2000, // 0\n+  into2000 // 1\n }\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n-  Mercury, //0\n-  Venus, //1\n-  Earth, //2\n-  Mars, //3\n-  Jupiter, //4\n-  Saturn, //5\n-  Uranus, //6\n-  Neptune, //7\n-  Pluto, //8\n-  Sun //9\n+  mercury, //0\n+  venus, //1\n+  earth, //2\n+  mars, //3\n+  jupiter, //4\n+  saturn, //5\n+  uranus, //6\n+  neptune, //7\n+  pluto, //8\n+  sun //9\n   // Moon, //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n"
                },
                {
                    "date": 1642608093035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n // A combination of a position vector, a velocity vector, and a time.\n   var x, y, z;\n   TerseVector(this.x, this.y, this.z);\n \n-  Vector ToAstroVector(time) => Vector(x, y, z, time);\n+  Vector toAstroVector(time) => Vector(x, y, z, time);\n   //  Convert _TerseVector object to Vector object\n \n   double quadrature() => x * x + y * y + z * z;\n   //  Return magnitude squared of this vector.\n@@ -68,22 +68,22 @@\n   TerseVector mean(other) => TerseVector(\n       (x + other.x) / 2.0, (y + other.y) / 2.0, (z + other.z) / 2.0);\n   //  Return the average of this vector and another vector.\n \n-  TerseVector __add__(other) =>\n-      TerseVector(x + other.x, y + other.y, z + other.z);\n+  // TerseVector __add__(other) =>\n+  //     TerseVector(x + other.x, y + other.y, z + other.z);\n \n-  TerseVector __sub__(other) =>\n-      TerseVector(x - other.x, y - other.y, z - other.z);\n+  // TerseVector __sub__(other) =>\n+  //     TerseVector(x - other.x, y - other.y, z - other.z);\n \n-  TerseVector __mul__(scalar) =>\n-      TerseVector(scalar * x, scalar * y, scalar * z);\n+  // TerseVector __mul__(scalar) =>\n+  //     TerseVector(scalar * x, scalar * y, scalar * z);\n \n-  TerseVector __rmul__(scalar) =>\n-      TerseVector(scalar * x, scalar * y, scalar * z);\n+  // TerseVector __rmul__(scalar) =>\n+  //     TerseVector(scalar * x, scalar * y, scalar * z);\n \n-  TerseVector __truediv__(scalar) =>\n-      TerseVector(x / scalar, y / scalar, z / scalar);\n+  // TerseVector __truediv__(scalar) =>\n+  //     TerseVector(x / scalar, y / scalar, z / scalar);\n }\n \n class RotationMatrix {\n //     Contains a rotation matrix that can be used to transform one\n@@ -92,22 +92,22 @@\n   var rot;\n   RotationMatrix(this.rot);\n }\n \n-class body_grav_calc_t {\n+class BodyGravCalcT {\n   var tt, r, v, a;\n-  body_grav_calc_t(this.tt, this.r, this.v, this.a);\n+  BodyGravCalcT(this.tt, this.r, this.v, this.a);\n }\n //         this.tt = tt    # J2000 terrestrial time [days]\n //         this.r = r      # position [au]\n //         this.v = v      # velocity [au/day]\n //         this.a = a      # acceleration [au/day^2]\n \n-class grav_sim_t {\n+class GravSimT {\n   var bary, grav;\n-  grav_sim_t(this.bary, this.grav);\n+  GravSimT(this.bary, this.grav);\n }\n \n-class body_state_t {\n+class BodyStateT {\n   var tt, r, v;\n-  body_state_t(this.r, this.tt, this.v);\n+  BodyStateT(this.r, this.tt, this.v);\n }\n"
                },
                {
                    "date": 1642614868163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n   saturn, //5\n   uranus, //6\n   neptune, //7\n   pluto, //8\n-  sun //9\n-  // Moon, //10\n+  sun, //9\n+  moon //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n }\n \n"
                },
                {
                    "date": 1642647531524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,17 +11,17 @@\n }\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n-  mercury, //0\n-  venus, //1\n-  earth, //2\n-  mars, //3\n-  jupiter, //4\n-  saturn, //5\n-  uranus, //6\n-  neptune, //7\n-  pluto, //8\n+  // mercury, //0\n+  // venus, //1\n+  // earth, //2\n+  // mars, //3\n+  // jupiter, //4\n+  // saturn, //5\n+  // uranus, //6\n+  // neptune, //7\n+  // pluto, //8\n   sun, //9\n   moon //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n"
                },
                {
                    "date": 1642647550549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n   // mercury, //0\n   // venus, //1\n-  // earth, //2\n+  earth, //2\n   // mars, //3\n   // jupiter, //4\n   // saturn, //5\n   // uranus, //6\n"
                },
                {
                    "date": 1642647566840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   // jupiter, //4\n   // saturn, //5\n   // uranus, //6\n   // neptune, //7\n-  // pluto, //8\n+  pluto, //8\n   sun, //9\n   moon //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n   // SSB //12  SSB: The Solar System Barycenter.\n"
                },
                {
                    "date": 1642827383280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,16 +11,16 @@\n }\n \n enum Body {\n   //The celestial bodies supported by Astronomy Engine calculations\n-  // mercury, //0\n-  // venus, //1\n+  mercury, //0\n+  venus, //1\n   earth, //2\n-  // mars, //3\n-  // jupiter, //4\n-  // saturn, //5\n-  // uranus, //6\n-  // neptune, //7\n+  mars, //3\n+  jupiter, //4\n+  saturn, //5\n+  uranus, //6\n+  neptune, //7\n   pluto, //8\n   sun, //9\n   moon //10\n   // EMB, //11 EMB: The Earth/Moon Barycenter.\n"
                },
                {
                    "date": 1642860282545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n   into2000 // 1\n }\n \n enum Body {\n-  //The celestial bodies supported by Astronomy Engine calculations\n   mercury, //0\n   venus, //1\n   earth, //2\n   mars, //3\n@@ -22,10 +21,8 @@\n   neptune, //7\n   pluto, //8\n   sun, //9\n   moon //10\n-  // EMB, //11 EMB: The Earth/Moon Barycenter.\n-  // SSB //12  SSB: The Solar System Barycenter.\n }\n \n class Vector {\n   // \"\"\"A Cartesian vector with 3 space coordinates and 1 time coordinate. \"\"\"\n@@ -67,23 +64,8 @@\n \n   TerseVector mean(other) => TerseVector(\n       (x + other.x) / 2.0, (y + other.y) / 2.0, (z + other.z) / 2.0);\n   //  Return the average of this vector and another vector.\n-\n-  // TerseVector __add__(other) =>\n-  //     TerseVector(x + other.x, y + other.y, z + other.z);\n-\n-  // TerseVector __sub__(other) =>\n-  //     TerseVector(x - other.x, y - other.y, z - other.z);\n-\n-  // TerseVector __mul__(scalar) =>\n-  //     TerseVector(scalar * x, scalar * y, scalar * z);\n-\n-  // TerseVector __rmul__(scalar) =>\n-  //     TerseVector(scalar * x, scalar * y, scalar * z);\n-\n-  // TerseVector __truediv__(scalar) =>\n-  //     TerseVector(x / scalar, y / scalar, z / scalar);\n }\n \n class RotationMatrix {\n //     Contains a rotation matrix that can be used to transform one\n@@ -92,22 +74,22 @@\n   var rot;\n   RotationMatrix(this.rot);\n }\n \n-class BodyGravCalcT {\n-  var tt, r, v, a;\n-  BodyGravCalcT(this.tt, this.r, this.v, this.a);\n-}\n-//         this.tt = tt    # J2000 terrestrial time [days]\n-//         this.r = r      # position [au]\n-//         this.v = v      # velocity [au/day]\n-//         this.a = a      # acceleration [au/day^2]\n+// class BodyGravCalcT {\n+//   var tt, r, v, a;\n+//   BodyGravCalcT(this.tt, this.r, this.v, this.a);\n+// }\n+// //         this.tt = tt    # J2000 terrestrial time [days]\n+// //         this.r = r      # position [au]\n+// //         this.v = v      # velocity [au/day]\n+// //         this.a = a      # acceleration [au/day^2]\n \n-class GravSimT {\n-  var bary, grav;\n-  GravSimT(this.bary, this.grav);\n-}\n+// class GravSimT {\n+//   var bary, grav;\n+//   GravSimT(this.bary, this.grav);\n+// }\n \n-class BodyStateT {\n-  var tt, r, v;\n-  BodyStateT(this.r, this.tt, this.v);\n-}\n+// class BodyStateT {\n+//   var tt, r, v;\n+//   BodyStateT(this.r, this.tt, this.v);\n+// }\n"
                },
                {
                    "date": 1642860990946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,23 +73,4 @@\n //    rot : float[3][3]  A normalized 3x3 rotation matrix\n   var rot;\n   RotationMatrix(this.rot);\n }\n-\n-// class BodyGravCalcT {\n-//   var tt, r, v, a;\n-//   BodyGravCalcT(this.tt, this.r, this.v, this.a);\n-// }\n-// //         this.tt = tt    # J2000 terrestrial time [days]\n-// //         this.r = r      # position [au]\n-// //         this.v = v      # velocity [au/day]\n-// //         this.a = a      # acceleration [au/day^2]\n-\n-// class GravSimT {\n-//   var bary, grav;\n-//   GravSimT(this.bary, this.grav);\n-// }\n-\n-// class BodyStateT {\n-//   var tt, r, v;\n-//   BodyStateT(this.r, this.tt, this.v);\n-// }\n"
                },
                {
                    "date": 1642861036131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,13 @@\n   double length(x, y, z) => sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2));\n   //Returns the length of the vector in AU. (xˆ2+yˆ2+zˆ2)\n }\n \n-class StateVector {\n-// A combination of a position vector, a velocity vector, and a time.\n-  var x, y, z, vx, vy, vz, t;\n-  StateVector(this.x, this.y, this.z, this.vx, this.vy, this.vz, this.t);\n-}\n+// class StateVector {\n+// // A combination of a position vector, a velocity vector, and a time.\n+//   var x, y, z, vx, vy, vz, t;\n+//   StateVector(this.x, this.y, this.z, this.vx, this.vy, this.vz, this.t);\n+// }\n \n class EclipticCoordinates {\n //     \"\"\"Ecliptic angular and Cartesian coordinates.\"\"\"\n   var vec, elat, elon;\n"
                },
                {
                    "date": 1642861062369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,8 @@\n   double length(x, y, z) => sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2));\n   //Returns the length of the vector in AU. (xˆ2+yˆ2+zˆ2)\n }\n \n-// class StateVector {\n-// // A combination of a position vector, a velocity vector, and a time.\n-//   var x, y, z, vx, vy, vz, t;\n-//   StateVector(this.x, this.y, this.z, this.vx, this.vy, this.vz, this.t);\n-// }\n-\n class EclipticCoordinates {\n //     \"\"\"Ecliptic angular and Cartesian coordinates.\"\"\"\n   var vec, elat, elon;\n   EclipticCoordinates(this.vec, this.elat, this.elon);\n"
                },
                {
                    "date": 1642919380928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,4 +67,557 @@\n //    rot : float[3][3]  A normalized 3x3 rotation matrix\n   var rot;\n   RotationMatrix(this.rot);\n }\n+\n+\n+class iau2000b {\n+  double t = time / 36525.0;\n+  double el  = fmod((485868.249036 + t*1717915923.2178), ASEC360) * ASEC2RAD;\n+  double elp = fmod((1287104.79305 + t*129596581.0481),  ASEC360) * ASEC2RAD;\n+  double f   = fmod((335779.526232 + t*1739527262.8478), ASEC360) * ASEC2RAD;\n+  double d   = fmod((1072260.70369 + t*1602961601.2090), ASEC360) * ASEC2RAD;\n+  double om  = fmod((450160.398036 - t*6962890.5431),    ASEC360) * ASEC2RAD;\n+  double dp = 0;\n+  double de = 0;\n+\n+\n+  double sarg = sin(om);\n+  double carg = cos(om);\n+  double dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n+  double de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n+\n+\n+  double arg = 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-13170906.0 - 1675.0*t)*sarg - 13696.0*carg;\n+  de += (5730336.0 - 3015.0*t)*carg - 4587.0*sarg;\n+\n+\n+  arg = 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2276413.0 - 234.0*t)*sarg + 2796.0*carg;\n+  de += (978459.0 - 485.0*t)*carg + 1374.0*sarg;\n+\n+\n+  arg = 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (2074554.0 + 207.0*t)*sarg - 698.0*carg;\n+  de += (-897492.0 + 470.0*t)*carg - 291.0*sarg;\n+\n+\n+  sarg = sin(elp);\n+  carg = cos(elp);\n+  dp += (1475877.0 - 3633.0*t)*sarg + 11817.0*carg;\n+  de += (73871.0 - 184.0*t)*carg - 1924.0*sarg;\n+\n+\n+  arg = elp + 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-516821.0 + 1226.0*t)*sarg - 524.0*carg;\n+  de += (224386.0 - 677.0*t)*carg - 174.0*sarg;\n+\n+\n+  sarg = sin(el);\n+  carg = cos(el);\n+  dp += (711159.0 + 73.0*t)*sarg - 872.0*carg;\n+  de += (-6750.0)*carg + 358.0*sarg;\n+\n+\n+  arg = 2.0*f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-387298.0 - 367.0*t)*sarg + 380.0*carg;\n+  de += (200728.0 + 18.0*t)*carg + 318.0*sarg;\n+\n+\n+  arg = el + 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-301461.0 - 36.0*t)*sarg + 816.0*carg;\n+  de += (129025.0 - 63.0*t)*carg + 367.0*sarg;\n+\n+\n+  arg = -elp + 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (215829.0 - 494.0*t)*sarg + 111.0*carg;\n+  de += (-95929.0 + 299.0*t)*carg + 132.0*sarg;\n+\n+\n+  arg = 2.0*f - 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (128227.0 + 137.0*t)*sarg + 181.0*carg;\n+  de += (-68982.0 - 9.0*t)*carg + 39.0*sarg;\n+\n+\n+  arg = -el + 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (123457.0 + 11.0*t)*sarg + 19.0*carg;\n+  de += (-53311.0 + 32.0*t)*carg - 4.0*sarg;\n+\n+\n+  arg = -el + 2.0*d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (156994.0 + 10.0*t)*sarg - 168.0*carg;\n+  de += (-1235.0)*carg + 82.0*sarg;\n+\n+\n+  arg = el + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (63110.0 + 63.0*t)*sarg + 27.0*carg;\n+  de += (-33228.0)*carg - 9.0*sarg;\n+\n+\n+  arg = -el + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-57976.0 - 63.0*t)*sarg - 189.0*carg;\n+  de += (31429.0)*carg - 75.0*sarg;\n+\n+\n+  arg = -el + 2.0*f + 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-59641.0 - 11.0*t)*sarg + 149.0*carg;\n+  de += (25543.0 - 11.0*t)*carg + 66.0*sarg;\n+\n+\n+  arg = el + 2.0*f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-51613.0 - 42.0*t)*sarg + 129.0*carg;\n+  de += (26366.0)*carg + 78.0*sarg;\n+\n+\n+  arg = -2.0*el + 2.0*f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (45893.0 + 50.0*t)*sarg + 31.0*carg;\n+  de += (-24236.0 - 10.0*t)*carg + 20.0*sarg;\n+\n+\n+  arg = 2.0*d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (63384.0 + 11.0*t)*sarg - 150.0*carg;\n+  de += (-1220.0)*carg + 29.0*sarg;\n+\n+\n+  arg = 2.0*f + 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-38571.0 - 1.0*t)*sarg + 158.0*carg;\n+  de += (16452.0 - 11.0*t)*carg + 68.0*sarg;\n+\n+\n+  arg = -2.0*elp + 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (32481.0)*sarg;\n+  de += (-13870.0)*carg;\n+\n+\n+  arg = -2.0*el + 2.0*d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-47722.0)*sarg - 18.0*carg;\n+  de += (477.0)*carg - 25.0*sarg;\n+\n+\n+  arg = 2.0*el + 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-31046.0 - 1.0*t)*sarg + 131.0*carg;\n+  de += (13238.0 - 11.0*t)*carg + 59.0*sarg;\n+\n+\n+  arg = el + 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (28593.0)*sarg - carg;\n+  de += (-12338.0 + 10.0*t)*carg - 3.0*sarg;\n+\n+\n+  arg = -el + 2.0*f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (20441.0 + 21.0*t)*sarg + 10.0*carg;\n+  de += (-10758.0)*carg - 3.0*sarg;\n+\n+\n+  arg = 2.0*el;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (29243.0)*sarg - 74.0*carg;\n+  de += (-609.0)*carg + 13.0*sarg;\n+\n+\n+  arg = 2.0*f;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (25887.0)*sarg - 66.0*carg;\n+  de += (-550.0)*carg + 11.0*sarg;\n+\n+\n+  arg = elp + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-14053.0 - 25.0*t)*sarg + 79.0*carg;\n+  de += (8551.0 - 2.0*t)*carg - 45.0*sarg;\n+\n+\n+  arg = -el + 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (15164.0 + 10.0*t)*sarg + 11.0*carg;\n+  de += (-8001.0)*carg - sarg;\n+\n+\n+  arg = 2.0*elp + 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-15794.0 + 72.0*t)*sarg - 16.0*carg;\n+  de += (6850.0 - 42.0*t)*carg - 5.0*sarg;\n+\n+\n+  arg = -2.0*f + 2.0*d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (21783.0)*sarg + 13.0*carg;\n+  de += (-167.0)*carg + 13.0*sarg;\n+\n+\n+  arg = el - 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-12873.0 - 10.0*t)*sarg - 37.0*carg;\n+  de += (6953.0)*carg - 14.0*sarg;\n+\n+\n+  arg = -elp + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-12654.0 + 11.0*t)*sarg + 63.0*carg;\n+  de += (6415.0)*carg + 26.0*sarg;\n+\n+\n+  arg = -el + 2.0*f + 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-10204.0)*sarg + 25.0*carg;\n+  de += (5222.0)*carg + 15.0*sarg;\n+\n+\n+  arg = 2.0*elp;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (16707.0 - 85.0*t)*sarg - 10.0*carg;\n+  de += (168.0 - 1.0*t)*carg + 10.0*sarg;\n+\n+\n+  arg = el + 2.0*f + 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-7691.0)*sarg + 44.0*carg;\n+  de += (3268.0)*carg + 19.0*sarg;\n+\n+\n+  arg = -2.0*el + 2.0*f;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-11024.0)*sarg - 14.0*carg;\n+  de += (104.0)*carg + 2.0*sarg;\n+\n+\n+  arg = elp + 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (7566.0 - 21.0*t)*sarg - 11.0*carg;\n+  de += (-3250.0)*carg - 5.0*sarg;\n+\n+\n+  arg = 2.0*f + 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-6637.0 - 11.0*t)*sarg + 25.0*carg;\n+  de += (3353.0)*carg + 14.0*sarg;\n+\n+\n+  arg = -elp + 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-7141.0 + 21.0*t)*sarg + 8.0*carg;\n+  de += (3070.0)*carg + 4.0*sarg;\n+\n+\n+  arg = 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-6302.0 - 11.0*t)*sarg + 2.0*carg;\n+  de += (3272.0)*carg + 4.0*sarg;\n+\n+\n+  arg = el + 2.0*f - 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (5800.0 + 10.0*t)*sarg + 2.0*carg;\n+  de += (-3045.0)*carg - sarg;\n+\n+\n+  arg = 2.0*el + 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (6443.0)*sarg - 7.0*carg;\n+  de += (-2768.0)*carg - 4.0*sarg;\n+\n+\n+  arg = -2.0*el + 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-5774.0 - 11.0*t)*sarg - 15.0*carg;\n+  de += (3041.0)*carg - 5.0*sarg;\n+\n+\n+  arg = 2.0*el + 2.0*f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-5350.0)*sarg + 21.0*carg;\n+  de += (2695.0)*carg + 12.0*sarg;\n+\n+\n+  arg = -elp + 2.0*f - 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-4752.0 - 11.0*t)*sarg - 3.0*carg;\n+  de += (2719.0)*carg - 3.0*sarg;\n+\n+\n+  arg = -2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-4940.0 - 11.0*t)*sarg - 21.0*carg;\n+  de += (2720.0)*carg - 9.0*sarg;\n+\n+\n+  arg = -el - elp + 2.0*d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (7350.0)*sarg - 8.0*carg;\n+  de += (-51.0)*carg + 4.0*sarg;\n+\n+\n+  arg = 2.0*el - 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (4065.0)*sarg + 6.0*carg;\n+  de += (-2206.0)*carg + sarg;\n+\n+\n+  arg = el + 2.0*d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (6579.0)*sarg - 24.0*carg;\n+  de += (-199.0)*carg + 2.0*sarg;\n+\n+\n+  arg = elp + 2.0*f - 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (3579.0)*sarg + 5.0*carg;\n+  de += (-1900.0)*carg + sarg;\n+\n+\n+  arg = el - elp;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (4725.0)*sarg - 6.0*carg;\n+  de += (-41.0)*carg + 3.0*sarg;\n+\n+\n+  arg = -2.0*el + 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-3075.0)*sarg - 2.0*carg;\n+  de += (1313.0)*carg - sarg;\n+\n+\n+  arg = 3.0*el + 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2904.0)*sarg + 15.0*carg;\n+  de += (1233.0)*carg + 7.0*sarg;\n+\n+\n+  arg = -elp + 2.0*d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (4348.0)*sarg - 10.0*carg;\n+  de += (-81.0)*carg + 2.0*sarg;\n+\n+\n+  arg = el - elp + 2.0*f + 2.0*om\n+  sarg = sin(arg)\n+  carg = cos(arg)\n+  dp += (-2878.0)*sarg + 8.0*carg\n+  de += (1232.0)*carg + 4.0*sarg\n+\n+\n+  sarg = sin(d);\n+  carg = cos(d);\n+  dp += (-4230.0)*sarg + 5.0*carg;\n+  de += (-20.0)*carg - 2.0*sarg;\n+\n+\n+  arg = -el - elp + 2.0*f + 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2819.0)*sarg + 7.0*carg;\n+  de += (1207.0)*carg + 3.0*sarg;\n+\n+\n+  arg = -el + 2.0*f;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-4056.0)*sarg + 5.0*carg;\n+  de += (40.0)*carg - 2.0*sarg;\n+\n+\n+  arg = -elp + 2.0*f + 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2647.0)*sarg + 11.0*carg;\n+  de += (1129.0)*carg + 5.0*sarg;\n+\n+\n+  arg = -2.0*el + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2294.0)*sarg - 10.0*carg;\n+  de += (1266.0)*carg - 4.0*sarg;\n+\n+\n+  arg = el + elp + 2.0*f + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (2481.0)*sarg - 7.0*carg;\n+  de += (-1062.0)*carg - 3.0*sarg;\n+\n+\n+  arg = 2.0*el + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (2179.0)*sarg - 2.0*carg;\n+  de += (-1129.0)*carg - 2.0*sarg;\n+\n+\n+  arg = -el + elp + d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (3276.0)*sarg + carg;\n+  de += (-9.0)*carg;\n+\n+\n+  arg = el + elp;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-3389.0)*sarg + 5.0*carg;\n+  de += (35.0)*carg - 2.0*sarg;\n+\n+\n+  arg = el + 2.0*f;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (3339.0)*sarg - 13.0*carg;\n+  de += (-107.0)*carg + sarg;\n+\n+\n+  arg = -el + 2.0*f - 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1987.0)*sarg - 6.0*carg;\n+  de += (1073.0)*carg - 2.0*sarg;\n+\n+\n+  arg = el + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1981.0)*sarg;\n+  de += (854.0)*carg;\n+\n+\n+  arg = -el + d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (4026.0)*sarg - 353.0*carg;\n+  de += (-553.0)*carg - 139.0*sarg;\n+\n+\n+  arg = 2.0*f + d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1660.0)*sarg - 5.0*carg;\n+  de += (-710.0)*carg - 2.0*sarg;\n+\n+\n+  arg = -el + 2.0*f + 4.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1521.0)*sarg + 9.0*carg;\n+  de += (647.0)*carg + 4.0*sarg;\n+\n+\n+  arg = -el + elp + d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1314.0)*sarg;\n+  de += (-700.0)*carg;\n+\n+\n+  arg = -2.0*elp + 2.0*f - 2.0*d + om\n+  sarg = sin(arg)\n+  carg = cos(arg)\n+  dp += (-1283.0)*sarg\n+  de += (672.0)*carg\n+\n+\n+  arg = el + 2.0*f + 2.0*d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1331.0)*sarg + 8.0*carg;\n+  de += (663.0)*carg + 4.0*sarg;\n+\n+\n+  arg = -2.0*el + 2.0*f + 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1383.0)*sarg - 2.0*carg;\n+  de += (-594.0)*carg - 2.0*sarg;\n+\n+\n+  arg = -el + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1405.0)*sarg + 4.0*carg;\n+  de += (-610.0)*carg + 2.0*sarg;\n+\n+\n+  arg = el + elp + 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1290.0)*sarg;\n+  de += (-556.0)*carg;\n+\n+\n+  double dpsi = -0.000135 + (dp * 1.0e-7);\n+  double deps = +0.000388 + (de * 1.0e-7);\n+}\n+    \n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1642919961499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n // ignore_for_file: prefer_typing_uninitialized_variables\n \n import 'dart:math';\n \n+import 'func.dart';\n+\n enum PrecessDir {\n   from2000, // 0\n   into2000 // 1\n }\n@@ -69,26 +71,29 @@\n   RotationMatrix(this.rot);\n }\n \n \n-class iau2000b {\n+class Iau2000b {\n+  double? time,t,el,elp,f,d,om,dp,de,arg,sarg,carg;\n+  Iau2000b(this.time);\n+\n   double t = time / 36525.0;\n-  double el  = fmod((485868.249036 + t*1717915923.2178), ASEC360) * ASEC2RAD;\n-  double elp = fmod((1287104.79305 + t*129596581.0481),  ASEC360) * ASEC2RAD;\n-  double f   = fmod((335779.526232 + t*1739527262.8478), ASEC360) * ASEC2RAD;\n-  double d   = fmod((1072260.70369 + t*1602961601.2090), ASEC360) * ASEC2RAD;\n-  double om  = fmod((450160.398036 - t*6962890.5431),    ASEC360) * ASEC2RAD;\n-  double dp = 0;\n-  double de = 0;\n+  el  = fmod((485868.249036 + t*1717915923.2178), ASEC360) * ASEC2RAD;\n+  elp = fmod((1287104.79305 + t*129596581.0481),  ASEC360) * ASEC2RAD;\n+  f   = fmod((335779.526232 + t*1739527262.8478), ASEC360) * ASEC2RAD;\n+  d   = fmod((1072260.70369 + t*1602961601.2090), ASEC360) * ASEC2RAD;\n+  om  = fmod((450160.398036 - t*6962890.5431),    ASEC360) * ASEC2RAD;\n+  dp = 0;\n+  de = 0;\n \n+  arg = 2.0*f - 2.0*d + 2.0*om;\n+  sarg = sin(om);\n+  carg = cos(om);\n \n-  double sarg = sin(om);\n-  double carg = cos(om);\n-  double dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n-  double de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n+  dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n+  de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n \n-  double arg = 2.0*f - 2.0*d + 2.0*om;\n   sarg = sin(arg);\n   carg = cos(arg);\n   dp += (-13170906.0 - 1675.0*t)*sarg - 13696.0*carg;\n   de += (5730336.0 - 3015.0*t)*carg - 4587.0*sarg;\n"
                },
                {
                    "date": 1642920062475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,538 +88,538 @@\n   arg = 2.0*f - 2.0*d + 2.0*om;\n   sarg = sin(om);\n   carg = cos(om);\n \n-  dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n-  de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n+  // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n+  // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n \n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-13170906.0 - 1675.0*t)*sarg - 13696.0*carg;\n-  de += (5730336.0 - 3015.0*t)*carg - 4587.0*sarg;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-13170906.0 - 1675.0*t)*sarg - 13696.0*carg;\n+  // de += (5730336.0 - 3015.0*t)*carg - 4587.0*sarg;\n \n \n-  arg = 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2276413.0 - 234.0*t)*sarg + 2796.0*carg;\n-  de += (978459.0 - 485.0*t)*carg + 1374.0*sarg;\n+  // arg = 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-2276413.0 - 234.0*t)*sarg + 2796.0*carg;\n+  // de += (978459.0 - 485.0*t)*carg + 1374.0*sarg;\n \n \n-  arg = 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (2074554.0 + 207.0*t)*sarg - 698.0*carg;\n-  de += (-897492.0 + 470.0*t)*carg - 291.0*sarg;\n+  // arg = 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (2074554.0 + 207.0*t)*sarg - 698.0*carg;\n+  // de += (-897492.0 + 470.0*t)*carg - 291.0*sarg;\n \n \n-  sarg = sin(elp);\n-  carg = cos(elp);\n-  dp += (1475877.0 - 3633.0*t)*sarg + 11817.0*carg;\n-  de += (73871.0 - 184.0*t)*carg - 1924.0*sarg;\n+  // sarg = sin(elp);\n+  // carg = cos(elp);\n+  // dp += (1475877.0 - 3633.0*t)*sarg + 11817.0*carg;\n+  // de += (73871.0 - 184.0*t)*carg - 1924.0*sarg;\n \n \n-  arg = elp + 2.0*f - 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-516821.0 + 1226.0*t)*sarg - 524.0*carg;\n-  de += (224386.0 - 677.0*t)*carg - 174.0*sarg;\n+  // arg = elp + 2.0*f - 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-516821.0 + 1226.0*t)*sarg - 524.0*carg;\n+  // de += (224386.0 - 677.0*t)*carg - 174.0*sarg;\n \n \n-  sarg = sin(el);\n-  carg = cos(el);\n-  dp += (711159.0 + 73.0*t)*sarg - 872.0*carg;\n-  de += (-6750.0)*carg + 358.0*sarg;\n+  // sarg = sin(el);\n+  // carg = cos(el);\n+  // dp += (711159.0 + 73.0*t)*sarg - 872.0*carg;\n+  // de += (-6750.0)*carg + 358.0*sarg;\n \n \n-  arg = 2.0*f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-387298.0 - 367.0*t)*sarg + 380.0*carg;\n-  de += (200728.0 + 18.0*t)*carg + 318.0*sarg;\n+  // arg = 2.0*f + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-387298.0 - 367.0*t)*sarg + 380.0*carg;\n+  // de += (200728.0 + 18.0*t)*carg + 318.0*sarg;\n \n \n-  arg = el + 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-301461.0 - 36.0*t)*sarg + 816.0*carg;\n-  de += (129025.0 - 63.0*t)*carg + 367.0*sarg;\n+  // arg = el + 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-301461.0 - 36.0*t)*sarg + 816.0*carg;\n+  // de += (129025.0 - 63.0*t)*carg + 367.0*sarg;\n \n \n-  arg = -elp + 2.0*f - 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (215829.0 - 494.0*t)*sarg + 111.0*carg;\n-  de += (-95929.0 + 299.0*t)*carg + 132.0*sarg;\n+  // arg = -elp + 2.0*f - 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (215829.0 - 494.0*t)*sarg + 111.0*carg;\n+  // de += (-95929.0 + 299.0*t)*carg + 132.0*sarg;\n \n \n-  arg = 2.0*f - 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (128227.0 + 137.0*t)*sarg + 181.0*carg;\n-  de += (-68982.0 - 9.0*t)*carg + 39.0*sarg;\n+  // arg = 2.0*f - 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (128227.0 + 137.0*t)*sarg + 181.0*carg;\n+  // de += (-68982.0 - 9.0*t)*carg + 39.0*sarg;\n \n \n-  arg = -el + 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (123457.0 + 11.0*t)*sarg + 19.0*carg;\n-  de += (-53311.0 + 32.0*t)*carg - 4.0*sarg;\n+  // arg = -el + 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (123457.0 + 11.0*t)*sarg + 19.0*carg;\n+  // de += (-53311.0 + 32.0*t)*carg - 4.0*sarg;\n \n \n-  arg = -el + 2.0*d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (156994.0 + 10.0*t)*sarg - 168.0*carg;\n-  de += (-1235.0)*carg + 82.0*sarg;\n+  // arg = -el + 2.0*d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (156994.0 + 10.0*t)*sarg - 168.0*carg;\n+  // de += (-1235.0)*carg + 82.0*sarg;\n \n \n-  arg = el + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (63110.0 + 63.0*t)*sarg + 27.0*carg;\n-  de += (-33228.0)*carg - 9.0*sarg;\n+  // arg = el + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (63110.0 + 63.0*t)*sarg + 27.0*carg;\n+  // de += (-33228.0)*carg - 9.0*sarg;\n \n \n-  arg = -el + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-57976.0 - 63.0*t)*sarg - 189.0*carg;\n-  de += (31429.0)*carg - 75.0*sarg;\n+  // arg = -el + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-57976.0 - 63.0*t)*sarg - 189.0*carg;\n+  // de += (31429.0)*carg - 75.0*sarg;\n \n \n-  arg = -el + 2.0*f + 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-59641.0 - 11.0*t)*sarg + 149.0*carg;\n-  de += (25543.0 - 11.0*t)*carg + 66.0*sarg;\n+  // arg = -el + 2.0*f + 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-59641.0 - 11.0*t)*sarg + 149.0*carg;\n+  // de += (25543.0 - 11.0*t)*carg + 66.0*sarg;\n \n \n-  arg = el + 2.0*f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-51613.0 - 42.0*t)*sarg + 129.0*carg;\n-  de += (26366.0)*carg + 78.0*sarg;\n+  // arg = el + 2.0*f + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-51613.0 - 42.0*t)*sarg + 129.0*carg;\n+  // de += (26366.0)*carg + 78.0*sarg;\n \n \n-  arg = -2.0*el + 2.0*f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (45893.0 + 50.0*t)*sarg + 31.0*carg;\n-  de += (-24236.0 - 10.0*t)*carg + 20.0*sarg;\n+  // arg = -2.0*el + 2.0*f + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (45893.0 + 50.0*t)*sarg + 31.0*carg;\n+  // de += (-24236.0 - 10.0*t)*carg + 20.0*sarg;\n \n \n-  arg = 2.0*d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (63384.0 + 11.0*t)*sarg - 150.0*carg;\n-  de += (-1220.0)*carg + 29.0*sarg;\n+  // arg = 2.0*d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (63384.0 + 11.0*t)*sarg - 150.0*carg;\n+  // de += (-1220.0)*carg + 29.0*sarg;\n \n \n-  arg = 2.0*f + 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-38571.0 - 1.0*t)*sarg + 158.0*carg;\n-  de += (16452.0 - 11.0*t)*carg + 68.0*sarg;\n+  // arg = 2.0*f + 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-38571.0 - 1.0*t)*sarg + 158.0*carg;\n+  // de += (16452.0 - 11.0*t)*carg + 68.0*sarg;\n \n \n-  arg = -2.0*elp + 2.0*f - 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (32481.0)*sarg;\n-  de += (-13870.0)*carg;\n+  // arg = -2.0*elp + 2.0*f - 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (32481.0)*sarg;\n+  // de += (-13870.0)*carg;\n \n \n-  arg = -2.0*el + 2.0*d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-47722.0)*sarg - 18.0*carg;\n-  de += (477.0)*carg - 25.0*sarg;\n+  // arg = -2.0*el + 2.0*d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-47722.0)*sarg - 18.0*carg;\n+  // de += (477.0)*carg - 25.0*sarg;\n \n \n-  arg = 2.0*el + 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-31046.0 - 1.0*t)*sarg + 131.0*carg;\n-  de += (13238.0 - 11.0*t)*carg + 59.0*sarg;\n+  // arg = 2.0*el + 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-31046.0 - 1.0*t)*sarg + 131.0*carg;\n+  // de += (13238.0 - 11.0*t)*carg + 59.0*sarg;\n \n \n-  arg = el + 2.0*f - 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (28593.0)*sarg - carg;\n-  de += (-12338.0 + 10.0*t)*carg - 3.0*sarg;\n+  // arg = el + 2.0*f - 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (28593.0)*sarg - carg;\n+  // de += (-12338.0 + 10.0*t)*carg - 3.0*sarg;\n \n \n-  arg = -el + 2.0*f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (20441.0 + 21.0*t)*sarg + 10.0*carg;\n-  de += (-10758.0)*carg - 3.0*sarg;\n+  // arg = -el + 2.0*f + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (20441.0 + 21.0*t)*sarg + 10.0*carg;\n+  // de += (-10758.0)*carg - 3.0*sarg;\n \n \n-  arg = 2.0*el;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (29243.0)*sarg - 74.0*carg;\n-  de += (-609.0)*carg + 13.0*sarg;\n+  // arg = 2.0*el;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (29243.0)*sarg - 74.0*carg;\n+  // de += (-609.0)*carg + 13.0*sarg;\n \n \n-  arg = 2.0*f;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (25887.0)*sarg - 66.0*carg;\n-  de += (-550.0)*carg + 11.0*sarg;\n+  // arg = 2.0*f;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (25887.0)*sarg - 66.0*carg;\n+  // de += (-550.0)*carg + 11.0*sarg;\n \n \n-  arg = elp + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-14053.0 - 25.0*t)*sarg + 79.0*carg;\n-  de += (8551.0 - 2.0*t)*carg - 45.0*sarg;\n+  // arg = elp + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-14053.0 - 25.0*t)*sarg + 79.0*carg;\n+  // de += (8551.0 - 2.0*t)*carg - 45.0*sarg;\n \n \n-  arg = -el + 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (15164.0 + 10.0*t)*sarg + 11.0*carg;\n-  de += (-8001.0)*carg - sarg;\n+  // arg = -el + 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (15164.0 + 10.0*t)*sarg + 11.0*carg;\n+  // de += (-8001.0)*carg - sarg;\n \n \n-  arg = 2.0*elp + 2.0*f - 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-15794.0 + 72.0*t)*sarg - 16.0*carg;\n-  de += (6850.0 - 42.0*t)*carg - 5.0*sarg;\n+  // arg = 2.0*elp + 2.0*f - 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-15794.0 + 72.0*t)*sarg - 16.0*carg;\n+  // de += (6850.0 - 42.0*t)*carg - 5.0*sarg;\n \n \n-  arg = -2.0*f + 2.0*d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (21783.0)*sarg + 13.0*carg;\n-  de += (-167.0)*carg + 13.0*sarg;\n+  // arg = -2.0*f + 2.0*d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (21783.0)*sarg + 13.0*carg;\n+  // de += (-167.0)*carg + 13.0*sarg;\n \n \n-  arg = el - 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-12873.0 - 10.0*t)*sarg - 37.0*carg;\n-  de += (6953.0)*carg - 14.0*sarg;\n+  // arg = el - 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-12873.0 - 10.0*t)*sarg - 37.0*carg;\n+  // de += (6953.0)*carg - 14.0*sarg;\n \n \n-  arg = -elp + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-12654.0 + 11.0*t)*sarg + 63.0*carg;\n-  de += (6415.0)*carg + 26.0*sarg;\n+  // arg = -elp + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-12654.0 + 11.0*t)*sarg + 63.0*carg;\n+  // de += (6415.0)*carg + 26.0*sarg;\n \n \n-  arg = -el + 2.0*f + 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-10204.0)*sarg + 25.0*carg;\n-  de += (5222.0)*carg + 15.0*sarg;\n+  // arg = -el + 2.0*f + 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-10204.0)*sarg + 25.0*carg;\n+  // de += (5222.0)*carg + 15.0*sarg;\n \n \n-  arg = 2.0*elp;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (16707.0 - 85.0*t)*sarg - 10.0*carg;\n-  de += (168.0 - 1.0*t)*carg + 10.0*sarg;\n+  // arg = 2.0*elp;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (16707.0 - 85.0*t)*sarg - 10.0*carg;\n+  // de += (168.0 - 1.0*t)*carg + 10.0*sarg;\n \n \n-  arg = el + 2.0*f + 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-7691.0)*sarg + 44.0*carg;\n-  de += (3268.0)*carg + 19.0*sarg;\n+  // arg = el + 2.0*f + 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-7691.0)*sarg + 44.0*carg;\n+  // de += (3268.0)*carg + 19.0*sarg;\n \n \n-  arg = -2.0*el + 2.0*f;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-11024.0)*sarg - 14.0*carg;\n-  de += (104.0)*carg + 2.0*sarg;\n+  // arg = -2.0*el + 2.0*f;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-11024.0)*sarg - 14.0*carg;\n+  // de += (104.0)*carg + 2.0*sarg;\n \n \n-  arg = elp + 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (7566.0 - 21.0*t)*sarg - 11.0*carg;\n-  de += (-3250.0)*carg - 5.0*sarg;\n+  // arg = elp + 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (7566.0 - 21.0*t)*sarg - 11.0*carg;\n+  // de += (-3250.0)*carg - 5.0*sarg;\n \n \n-  arg = 2.0*f + 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-6637.0 - 11.0*t)*sarg + 25.0*carg;\n-  de += (3353.0)*carg + 14.0*sarg;\n+  // arg = 2.0*f + 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-6637.0 - 11.0*t)*sarg + 25.0*carg;\n+  // de += (3353.0)*carg + 14.0*sarg;\n \n \n-  arg = -elp + 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-7141.0 + 21.0*t)*sarg + 8.0*carg;\n-  de += (3070.0)*carg + 4.0*sarg;\n+  // arg = -elp + 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-7141.0 + 21.0*t)*sarg + 8.0*carg;\n+  // de += (3070.0)*carg + 4.0*sarg;\n \n \n-  arg = 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-6302.0 - 11.0*t)*sarg + 2.0*carg;\n-  de += (3272.0)*carg + 4.0*sarg;\n+  // arg = 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-6302.0 - 11.0*t)*sarg + 2.0*carg;\n+  // de += (3272.0)*carg + 4.0*sarg;\n \n \n-  arg = el + 2.0*f - 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (5800.0 + 10.0*t)*sarg + 2.0*carg;\n-  de += (-3045.0)*carg - sarg;\n+  // arg = el + 2.0*f - 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (5800.0 + 10.0*t)*sarg + 2.0*carg;\n+  // de += (-3045.0)*carg - sarg;\n \n \n-  arg = 2.0*el + 2.0*f - 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (6443.0)*sarg - 7.0*carg;\n-  de += (-2768.0)*carg - 4.0*sarg;\n+  // arg = 2.0*el + 2.0*f - 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (6443.0)*sarg - 7.0*carg;\n+  // de += (-2768.0)*carg - 4.0*sarg;\n \n \n-  arg = -2.0*el + 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-5774.0 - 11.0*t)*sarg - 15.0*carg;\n-  de += (3041.0)*carg - 5.0*sarg;\n+  // arg = -2.0*el + 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-5774.0 - 11.0*t)*sarg - 15.0*carg;\n+  // de += (3041.0)*carg - 5.0*sarg;\n \n \n-  arg = 2.0*el + 2.0*f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-5350.0)*sarg + 21.0*carg;\n-  de += (2695.0)*carg + 12.0*sarg;\n+  // arg = 2.0*el + 2.0*f + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-5350.0)*sarg + 21.0*carg;\n+  // de += (2695.0)*carg + 12.0*sarg;\n \n \n-  arg = -elp + 2.0*f - 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-4752.0 - 11.0*t)*sarg - 3.0*carg;\n-  de += (2719.0)*carg - 3.0*sarg;\n+  // arg = -elp + 2.0*f - 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-4752.0 - 11.0*t)*sarg - 3.0*carg;\n+  // de += (2719.0)*carg - 3.0*sarg;\n \n \n-  arg = -2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-4940.0 - 11.0*t)*sarg - 21.0*carg;\n-  de += (2720.0)*carg - 9.0*sarg;\n+  // arg = -2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-4940.0 - 11.0*t)*sarg - 21.0*carg;\n+  // de += (2720.0)*carg - 9.0*sarg;\n \n \n-  arg = -el - elp + 2.0*d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (7350.0)*sarg - 8.0*carg;\n-  de += (-51.0)*carg + 4.0*sarg;\n+  // arg = -el - elp + 2.0*d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (7350.0)*sarg - 8.0*carg;\n+  // de += (-51.0)*carg + 4.0*sarg;\n \n \n-  arg = 2.0*el - 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (4065.0)*sarg + 6.0*carg;\n-  de += (-2206.0)*carg + sarg;\n+  // arg = 2.0*el - 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (4065.0)*sarg + 6.0*carg;\n+  // de += (-2206.0)*carg + sarg;\n \n \n-  arg = el + 2.0*d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (6579.0)*sarg - 24.0*carg;\n-  de += (-199.0)*carg + 2.0*sarg;\n+  // arg = el + 2.0*d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (6579.0)*sarg - 24.0*carg;\n+  // de += (-199.0)*carg + 2.0*sarg;\n \n \n-  arg = elp + 2.0*f - 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (3579.0)*sarg + 5.0*carg;\n-  de += (-1900.0)*carg + sarg;\n+  // arg = elp + 2.0*f - 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (3579.0)*sarg + 5.0*carg;\n+  // de += (-1900.0)*carg + sarg;\n \n \n-  arg = el - elp;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (4725.0)*sarg - 6.0*carg;\n-  de += (-41.0)*carg + 3.0*sarg;\n+  // arg = el - elp;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (4725.0)*sarg - 6.0*carg;\n+  // de += (-41.0)*carg + 3.0*sarg;\n \n \n-  arg = -2.0*el + 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-3075.0)*sarg - 2.0*carg;\n-  de += (1313.0)*carg - sarg;\n+  // arg = -2.0*el + 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-3075.0)*sarg - 2.0*carg;\n+  // de += (1313.0)*carg - sarg;\n \n \n-  arg = 3.0*el + 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2904.0)*sarg + 15.0*carg;\n-  de += (1233.0)*carg + 7.0*sarg;\n+  // arg = 3.0*el + 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-2904.0)*sarg + 15.0*carg;\n+  // de += (1233.0)*carg + 7.0*sarg;\n \n \n-  arg = -elp + 2.0*d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (4348.0)*sarg - 10.0*carg;\n-  de += (-81.0)*carg + 2.0*sarg;\n+  // arg = -elp + 2.0*d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (4348.0)*sarg - 10.0*carg;\n+  // de += (-81.0)*carg + 2.0*sarg;\n \n \n-  arg = el - elp + 2.0*f + 2.0*om\n-  sarg = sin(arg)\n-  carg = cos(arg)\n-  dp += (-2878.0)*sarg + 8.0*carg\n-  de += (1232.0)*carg + 4.0*sarg\n+  // arg = el - elp + 2.0*f + 2.0*om\n+  // sarg = sin(arg)\n+  // carg = cos(arg)\n+  // dp += (-2878.0)*sarg + 8.0*carg\n+  // de += (1232.0)*carg + 4.0*sarg\n \n \n-  sarg = sin(d);\n-  carg = cos(d);\n-  dp += (-4230.0)*sarg + 5.0*carg;\n-  de += (-20.0)*carg - 2.0*sarg;\n+  // sarg = sin(d);\n+  // carg = cos(d);\n+  // dp += (-4230.0)*sarg + 5.0*carg;\n+  // de += (-20.0)*carg - 2.0*sarg;\n \n \n-  arg = -el - elp + 2.0*f + 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2819.0)*sarg + 7.0*carg;\n-  de += (1207.0)*carg + 3.0*sarg;\n+  // arg = -el - elp + 2.0*f + 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-2819.0)*sarg + 7.0*carg;\n+  // de += (1207.0)*carg + 3.0*sarg;\n \n \n-  arg = -el + 2.0*f;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-4056.0)*sarg + 5.0*carg;\n-  de += (40.0)*carg - 2.0*sarg;\n+  // arg = -el + 2.0*f;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-4056.0)*sarg + 5.0*carg;\n+  // de += (40.0)*carg - 2.0*sarg;\n \n \n-  arg = -elp + 2.0*f + 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2647.0)*sarg + 11.0*carg;\n-  de += (1129.0)*carg + 5.0*sarg;\n+  // arg = -elp + 2.0*f + 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-2647.0)*sarg + 11.0*carg;\n+  // de += (1129.0)*carg + 5.0*sarg;\n \n \n-  arg = -2.0*el + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2294.0)*sarg - 10.0*carg;\n-  de += (1266.0)*carg - 4.0*sarg;\n+  // arg = -2.0*el + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-2294.0)*sarg - 10.0*carg;\n+  // de += (1266.0)*carg - 4.0*sarg;\n \n \n-  arg = el + elp + 2.0*f + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (2481.0)*sarg - 7.0*carg;\n-  de += (-1062.0)*carg - 3.0*sarg;\n+  // arg = el + elp + 2.0*f + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (2481.0)*sarg - 7.0*carg;\n+  // de += (-1062.0)*carg - 3.0*sarg;\n \n \n-  arg = 2.0*el + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (2179.0)*sarg - 2.0*carg;\n-  de += (-1129.0)*carg - 2.0*sarg;\n+  // arg = 2.0*el + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (2179.0)*sarg - 2.0*carg;\n+  // de += (-1129.0)*carg - 2.0*sarg;\n \n \n-  arg = -el + elp + d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (3276.0)*sarg + carg;\n-  de += (-9.0)*carg;\n+  // arg = -el + elp + d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (3276.0)*sarg + carg;\n+  // de += (-9.0)*carg;\n \n \n-  arg = el + elp;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-3389.0)*sarg + 5.0*carg;\n-  de += (35.0)*carg - 2.0*sarg;\n+  // arg = el + elp;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-3389.0)*sarg + 5.0*carg;\n+  // de += (35.0)*carg - 2.0*sarg;\n \n \n-  arg = el + 2.0*f;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (3339.0)*sarg - 13.0*carg;\n-  de += (-107.0)*carg + sarg;\n+  // arg = el + 2.0*f;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (3339.0)*sarg - 13.0*carg;\n+  // de += (-107.0)*carg + sarg;\n \n \n-  arg = -el + 2.0*f - 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1987.0)*sarg - 6.0*carg;\n-  de += (1073.0)*carg - 2.0*sarg;\n+  // arg = -el + 2.0*f - 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-1987.0)*sarg - 6.0*carg;\n+  // de += (1073.0)*carg - 2.0*sarg;\n \n \n-  arg = el + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1981.0)*sarg;\n-  de += (854.0)*carg;\n+  // arg = el + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-1981.0)*sarg;\n+  // de += (854.0)*carg;\n \n \n-  arg = -el + d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (4026.0)*sarg - 353.0*carg;\n-  de += (-553.0)*carg - 139.0*sarg;\n+  // arg = -el + d;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (4026.0)*sarg - 353.0*carg;\n+  // de += (-553.0)*carg - 139.0*sarg;\n \n \n-  arg = 2.0*f + d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1660.0)*sarg - 5.0*carg;\n-  de += (-710.0)*carg - 2.0*sarg;\n+  // arg = 2.0*f + d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (1660.0)*sarg - 5.0*carg;\n+  // de += (-710.0)*carg - 2.0*sarg;\n \n \n-  arg = -el + 2.0*f + 4.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1521.0)*sarg + 9.0*carg;\n-  de += (647.0)*carg + 4.0*sarg;\n+  // arg = -el + 2.0*f + 4.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-1521.0)*sarg + 9.0*carg;\n+  // de += (647.0)*carg + 4.0*sarg;\n \n \n-  arg = -el + elp + d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1314.0)*sarg;\n-  de += (-700.0)*carg;\n+  // arg = -el + elp + d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (1314.0)*sarg;\n+  // de += (-700.0)*carg;\n \n \n-  arg = -2.0*elp + 2.0*f - 2.0*d + om\n-  sarg = sin(arg)\n-  carg = cos(arg)\n-  dp += (-1283.0)*sarg\n-  de += (672.0)*carg\n+  // arg = -2.0*elp + 2.0*f - 2.0*d + om\n+  // sarg = sin(arg)\n+  // carg = cos(arg)\n+  // dp += (-1283.0)*sarg\n+  // de += (672.0)*carg\n \n \n-  arg = el + 2.0*f + 2.0*d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1331.0)*sarg + 8.0*carg;\n-  de += (663.0)*carg + 4.0*sarg;\n+  // arg = el + 2.0*f + 2.0*d + om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (-1331.0)*sarg + 8.0*carg;\n+  // de += (663.0)*carg + 4.0*sarg;\n \n \n-  arg = -2.0*el + 2.0*f + 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1383.0)*sarg - 2.0*carg;\n-  de += (-594.0)*carg - 2.0*sarg;\n+  // arg = -2.0*el + 2.0*f + 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (1383.0)*sarg - 2.0*carg;\n+  // de += (-594.0)*carg - 2.0*sarg;\n \n \n-  arg = -el + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1405.0)*sarg + 4.0*carg;\n-  de += (-610.0)*carg + 2.0*sarg;\n+  // arg = -el + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (1405.0)*sarg + 4.0*carg;\n+  // de += (-610.0)*carg + 2.0*sarg;\n \n \n-  arg = el + elp + 2.0*f - 2.0*d + 2.0*om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1290.0)*sarg;\n-  de += (-556.0)*carg;\n+  // arg = el + elp + 2.0*f - 2.0*d + 2.0*om;\n+  // sarg = sin(arg);\n+  // carg = cos(arg);\n+  // dp += (1290.0)*sarg;\n+  // de += (-556.0)*carg;\n \n \n   double dpsi = -0.000135 + (dp * 1.0e-7);\n   double deps = +0.000388 + (de * 1.0e-7);\n"
                },
                {
                    "date": 1642920095855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n class Iau2000b {\n   double? time,t,el,elp,f,d,om,dp,de,arg,sarg,carg;\n   Iau2000b(this.time);\n \n-  double t = time / 36525.0;\n+  t = time / 36525.0;\n   el  = fmod((485868.249036 + t*1717915923.2178), ASEC360) * ASEC2RAD;\n   elp = fmod((1287104.79305 + t*129596581.0481),  ASEC360) * ASEC2RAD;\n   f   = fmod((335779.526232 + t*1739527262.8478), ASEC360) * ASEC2RAD;\n   d   = fmod((1072260.70369 + t*1602961601.2090), ASEC360) * ASEC2RAD;\n"
                },
                {
                    "date": 1642920260098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,24 +72,27 @@\n }\n \n \n class Iau2000b {\n+  void initV(time) {\n+    t = time / 36525.0;\n+    el  = fmod((485868.249036 + t*1717915923.2178), ASEC360) * ASEC2RAD;\n+    elp = fmod((1287104.79305 + t*129596581.0481),  ASEC360) * ASEC2RAD;\n+    f   = fmod((335779.526232 + t*1739527262.8478), ASEC360) * ASEC2RAD;\n+    d   = fmod((1072260.70369 + t*1602961601.2090), ASEC360) * ASEC2RAD;\n+    om  = fmod((450160.398036 - t*6962890.5431),    ASEC360) * ASEC2RAD;\n+    dp = 0;\n+    de = 0;\n+\n+    arg = 2.0*f - 2.0*d + 2.0*om;\n+    sarg = sin(om);\n+    carg = cos(om);\n+  }\n   double? time,t,el,elp,f,d,om,dp,de,arg,sarg,carg;\n   Iau2000b(this.time);\n \n-  t = time / 36525.0;\n-  el  = fmod((485868.249036 + t*1717915923.2178), ASEC360) * ASEC2RAD;\n-  elp = fmod((1287104.79305 + t*129596581.0481),  ASEC360) * ASEC2RAD;\n-  f   = fmod((335779.526232 + t*1739527262.8478), ASEC360) * ASEC2RAD;\n-  d   = fmod((1072260.70369 + t*1602961601.2090), ASEC360) * ASEC2RAD;\n-  om  = fmod((450160.398036 - t*6962890.5431),    ASEC360) * ASEC2RAD;\n-  dp = 0;\n-  de = 0;\n+  \n \n-  arg = 2.0*f - 2.0*d + 2.0*om;\n-  sarg = sin(om);\n-  carg = cos(om);\n-\n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n \n"
                },
                {
                    "date": 1642920368845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,10 +70,15 @@\n   var rot;\n   RotationMatrix(this.rot);\n }\n \n+double ASEC2RAD = 4.848136811095359935899141e-6;\n+double ASEC360 = 1296000.0;\n \n class Iau2000b {\n+  late double time,t,el,elp,f,d,om,dp,de,arg,sarg,carg;\n+  Iau2000b(this.time);\n+\n   void initV(time) {\n     t = time / 36525.0;\n     el  = fmod((485868.249036 + t*1717915923.2178), ASEC360) * ASEC2RAD;\n     elp = fmod((1287104.79305 + t*129596581.0481),  ASEC360) * ASEC2RAD;\n@@ -86,10 +91,9 @@\n     arg = 2.0*f - 2.0*d + 2.0*om;\n     sarg = sin(om);\n     carg = cos(om);\n   }\n-  double? time,t,el,elp,f,d,om,dp,de,arg,sarg,carg;\n-  Iau2000b(this.time);\n+  \n \n   \n \n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n"
                },
                {
                    "date": 1642920727012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,29 +74,31 @@\n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n-  late double time,t,el,elp,f,d,om,dp,de,arg,sarg,carg;\n+  late double time, t, el, elp, f, d, om, dp, de, arg, sarg, carg;\n   Iau2000b(this.time);\n \n   void initV(time) {\n     t = time / 36525.0;\n-    el  = fmod((485868.249036 + t*1717915923.2178), ASEC360) * ASEC2RAD;\n-    elp = fmod((1287104.79305 + t*129596581.0481),  ASEC360) * ASEC2RAD;\n-    f   = fmod((335779.526232 + t*1739527262.8478), ASEC360) * ASEC2RAD;\n-    d   = fmod((1072260.70369 + t*1602961601.2090), ASEC360) * ASEC2RAD;\n-    om  = fmod((450160.398036 - t*6962890.5431),    ASEC360) * ASEC2RAD;\n+    el = fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n+    elp = fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n+    f = fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n+    d = fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n+    om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * ASEC2RAD;\n     dp = 0;\n     de = 0;\n \n-    arg = 2.0*f - 2.0*d + 2.0*om;\n+    arg = 2.0 * f - 2.0 * d + 2.0 * om;\n     sarg = sin(om);\n     carg = cos(om);\n+\n+    double dpsi = -0.000135 + (dp * 1.0e-7);\n+    double deps = 0.000388 + (de * 1.0e-7);\n   }\n+}\n   \n \n-  \n-\n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n \n@@ -627,9 +629,9 @@\n   // dp += (1290.0)*sarg;\n   // de += (-556.0)*carg;\n \n \n-  double dpsi = -0.000135 + (dp * 1.0e-7);\n-  double deps = +0.000388 + (de * 1.0e-7);\n-}\n+  // double dpsi = -0.000135 + (dp * 1.0e-7);\n+  // double deps = 0.000388 + (de * 1.0e-7);\n+\n     \n         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1642933439406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,12 @@\n   var vec, elat, elon;\n   EclipticCoordinates(this.vec, this.elat, this.elon);\n }\n \n+class Equatorial {\n+  var \n+}\n+\n class Observer {\n //Represents the geographic location of an observer on the surface of the Earth.\n   var latitude, longitude;\n   Observer(this.latitude, this.longitude);\n"
                },
                {
                    "date": 1642933585599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,12 +40,8 @@\n   var vec, elat, elon;\n   EclipticCoordinates(this.vec, this.elat, this.elon);\n }\n \n-class Equatorial {\n-  var \n-}\n-\n class Observer {\n //Represents the geographic location of an observer on the surface of the Earth.\n   var latitude, longitude;\n   Observer(this.latitude, this.longitude);\n"
                },
                {
                    "date": 1642933996487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,18 @@\n   var rot;\n   RotationMatrix(this.rot);\n }\n \n+class E_tilt {\n+  var e = iau2000b(time);\n+  var dpsi = e.dpsi;\n+  var deps = e.deps;\n+  var mobl = mean_obliq(time);\n+  var tobl = self.mobl + (e.deps / 3600.0);\n+  var tt = time;\n+  var ee = e.dpsi * cos(radians(mobl)) / 15.0;\n+}\n+\n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n"
                },
                {
                    "date": 1642934351954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,15 +71,18 @@\n   RotationMatrix(this.rot);\n }\n \n class E_tilt {\n-  var e = iau2000b(time);\n-  var dpsi = e.dpsi;\n-  var deps = e.deps;\n-  var mobl = mean_obliq(time);\n-  var tobl = self.mobl + (e.deps / 3600.0);\n-  var tt = time;\n-  var ee = e.dpsi * cos(radians(mobl)) / 15.0;\n+  void initEtilt(time) {\n+    var e = Iau2000b(time);\n+    var dpsi = e.dpsi;\n+    var deps = e.deps;\n+    var mobl = mean_obliq(time);\n+    var tobl = mobl + (e.deps / 3600.0);\n+    var tt = time;\n+    var ee = e.dpsi * cos(radians(mobl)) / 15.0;\n+    E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n+  }\n }\n \n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n@@ -87,9 +90,10 @@\n class Iau2000b {\n   late double time, t, el, elp, f, d, om, dp, de, arg, sarg, carg;\n   Iau2000b(this.time);\n \n-  void initV(time) {\n+  \n+ \n     t = time / 36525.0;\n     el = fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n     elp = fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n     f = fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n@@ -102,10 +106,10 @@\n     sarg = sin(om);\n     carg = cos(om);\n \n     double dpsi = -0.000135 + (dp * 1.0e-7);\n-    double deps = 0.000388 + (de * 1.0e-7);\n-  }\n+   double deps = 0.000388 + (de * 1.0e-7);\n+  \n }\n   \n \n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n"
                },
                {
                    "date": 1642934721463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,46 +70,44 @@\n   var rot;\n   RotationMatrix(this.rot);\n }\n \n-class E_tilt {\n-  void initEtilt(time) {\n-    var e = Iau2000b(time);\n-    var dpsi = e.dpsi;\n-    var deps = e.deps;\n-    var mobl = mean_obliq(time);\n-    var tobl = mobl + (e.deps / 3600.0);\n-    var tt = time;\n-    var ee = e.dpsi * cos(radians(mobl)) / 15.0;\n-    E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n-  }\n-}\n+// class E_tilt {\n+//   void initEtilt(time) {\n+//     var e = Iau2000b(time);\n+//     var dpsi = e.dpsi;\n+//     var deps = e.deps;\n+//     var mobl = mean_obliq(time);\n+//     var tobl = mobl + (e.deps / 3600.0);\n+//     var tt = time;\n+//     var ee = e.dpsi * cos(radians(mobl)) / 15.0;\n+//     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n+//   }\n+// }\n \n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n   late double time, t, el, elp, f, d, om, dp, de, arg, sarg, carg;\n   Iau2000b(this.time);\n \n-  \n- \n-    t = time / 36525.0;\n-    el = fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n-    elp = fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n-    f = fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n-    d = fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n-    om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * ASEC2RAD;\n-    dp = 0;\n-    de = 0;\n+  //   t = time / 36525.0;\n+  //   el = fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n+  //   elp = fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n+  //   f = fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n+  //   d = fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n+  //   om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * ASEC2RAD;\n+  //   dp = 0;\n+  //   de = 0;\n \n-    arg = 2.0 * f - 2.0 * d + 2.0 * om;\n-    sarg = sin(om);\n-    carg = cos(om);\n+  //   arg = 2.0 * f - 2.0 * d + 2.0 * om;\n+  //   sarg = sin(om);\n+  //   carg = cos(om);\n \n-    double dpsi = -0.000135 + (dp * 1.0e-7);\n-   double deps = 0.000388 + (de * 1.0e-7);\n-  \n+  //   double dpsi = -0.000135 + (dp * 1.0e-7);\n+  //  double deps = 0.000388 + (de * 1.0e-7);\n+\n }\n   \n \n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n"
                },
                {
                    "date": 1642935097253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,12 +87,12 @@\n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n-  late double time, t, el, elp, f, d, om, dp, de, arg, sarg, carg;\n-  Iau2000b(this.time);\n+  late double time, el, elp, f, d, om, dp, de, arg, sarg, carg;\n+  late double t;\n \n-  //   t = time / 36525.0;\n+  t = time / 36525.0;\n   //   el = fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n   //   elp = fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n   //   f = fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n   //   d = fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n@@ -105,9 +105,9 @@\n   //   carg = cos(om);\n \n   //   double dpsi = -0.000135 + (dp * 1.0e-7);\n   //  double deps = 0.000388 + (de * 1.0e-7);\n-\n+  Iau2000b(this.time);\n }\n   \n \n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n"
                },
                {
                    "date": 1642935318570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,27 +87,29 @@\n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n-  late double time, el, elp, f, d, om, dp, de, arg, sarg, carg;\n-  late double t;\n+  Iau2000b(this.time);\n+  late double time;\n+  late double t = time / 36525.0;\n+  late double el =\n+      fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n+  late double elp =\n+      fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n+  late double f =\n+      fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n+  late double d =\n+      fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n+  late double om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * ASEC2RAD;\n+  late double dp = 0;\n+  double de = 0;\n \n-  t = time / 36525.0;\n-  //   el = fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n-  //   elp = fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n-  //   f = fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n-  //   d = fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n-  //   om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * ASEC2RAD;\n-  //   dp = 0;\n-  //   de = 0;\n+  late double arg = 2.0 * f - 2.0 * d + 2.0 * om;\n+  late double sarg = sin(om);\n+  late double carg = cos(om);\n \n-  //   arg = 2.0 * f - 2.0 * d + 2.0 * om;\n-  //   sarg = sin(om);\n-  //   carg = cos(om);\n-\n-  //   double dpsi = -0.000135 + (dp * 1.0e-7);\n-  //  double deps = 0.000388 + (de * 1.0e-7);\n-  Iau2000b(this.time);\n+  late double dpsi = -0.000135 + (dp * 1.0e-7);\n+  late double deps = 0.000388 + (de * 1.0e-7);\n }\n   \n \n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n"
                },
                {
                    "date": 1642935355713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,24 +83,24 @@\n //     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n //   }\n // }\n \n-double ASEC2RAD = 4.848136811095359935899141e-6;\n+double asec2rad = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n   Iau2000b(this.time);\n   late double time;\n   late double t = time / 36525.0;\n   late double el =\n-      fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n+      fmod((485868.249036 + t * 1717915923.2178), ASEC360) * asec2rad;\n   late double elp =\n-      fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n+      fmod((1287104.79305 + t * 129596581.0481), ASEC360) * asec2rad;\n   late double f =\n-      fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n+      fmod((335779.526232 + t * 1739527262.8478), ASEC360) * asec2rad;\n   late double d =\n-      fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n-  late double om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * ASEC2RAD;\n+      fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * asec2rad;\n+  late double om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * asec2rad;\n   late double dp = 0;\n   double de = 0;\n \n   late double arg = 2.0 * f - 2.0 * d + 2.0 * om;\n"
                },
                {
                    "date": 1642935421441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,23 +84,23 @@\n //   }\n // }\n \n double asec2rad = 4.848136811095359935899141e-6;\n-double ASEC360 = 1296000.0;\n+double asec360 = 1296000.0;\n \n class Iau2000b {\n   Iau2000b(this.time);\n   late double time;\n   late double t = time / 36525.0;\n   late double el =\n-      fmod((485868.249036 + t * 1717915923.2178), ASEC360) * asec2rad;\n+      fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n   late double elp =\n-      fmod((1287104.79305 + t * 129596581.0481), ASEC360) * asec2rad;\n+      fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n   late double f =\n-      fmod((335779.526232 + t * 1739527262.8478), ASEC360) * asec2rad;\n+      fmod((335779.526232 + t * 1739527262.8478), asec360) * asec2rad;\n   late double d =\n-      fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * asec2rad;\n-  late double om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * asec2rad;\n+      fmod((1072260.70369 + t * 1602961601.2090), asec360) * asec2rad;\n+  late double om = fmod((450160.398036 - t * 6962890.5431), asec360) * asec2rad;\n   late double dp = 0;\n   double de = 0;\n \n   late double arg = 2.0 * f - 2.0 * d + 2.0 * om;\n"
                },
                {
                    "date": 1642935763765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,37 +86,30 @@\n \n double asec2rad = 4.848136811095359935899141e-6;\n double asec360 = 1296000.0;\n \n-class Iau2000b {\n-  Iau2000b(this.time);\n-  late double time;\n-  late double t = time / 36525.0;\n-  late double el =\n-      fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n-  late double elp =\n-      fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n-  late double f =\n-      fmod((335779.526232 + t * 1739527262.8478), asec360) * asec2rad;\n-  late double d =\n-      fmod((1072260.70369 + t * 1602961601.2090), asec360) * asec2rad;\n-  late double om = fmod((450160.398036 - t * 6962890.5431), asec360) * asec2rad;\n-  late double dp = 0;\n+void iau2000b(double time) {\n+  double t, el, elp, f, d, om, dp, arg, sarg, carg, dpsi, deps;\n+  t = time / 36525.0;\n+  el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n+  elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n+  f = fmod((335779.526232 + t * 1739527262.8478), asec360) * asec2rad;\n+  d = fmod((1072260.70369 + t * 1602961601.2090), asec360) * asec2rad;\n+  om = fmod((450160.398036 - t * 6962890.5431), asec360) * asec2rad;\n+  dp = 0;\n   double de = 0;\n \n-  late double arg = 2.0 * f - 2.0 * d + 2.0 * om;\n-  late double sarg = sin(om);\n-  late double carg = cos(om);\n+  double arg = 2.0 * f - 2.0 * d + 2.0 * om;\n+  double sarg = sin(om);\n+  double carg = cos(om);\n \n-  late double dpsi = -0.000135 + (dp * 1.0e-7);\n-  late double deps = 0.000388 + (de * 1.0e-7);\n+  double dpsi = -0.000135 + (dp * 1.0e-7);\n+  double deps = 0.000388 + (de * 1.0e-7);\n+\n+  dp = (-172064161.0 - 174666.0 * t) * sarg + 33386.0 * carg;\n+  de += (92052331.0 + 9086.0 * t) * carg + 15377.0 * sarg;\n }\n-  \n \n-  // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n-  // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n-\n-\n   // sarg = sin(arg);\n   // carg = cos(arg);\n   // dp += (-13170906.0 - 1675.0*t)*sarg - 13696.0*carg;\n   // de += (5730336.0 - 3015.0*t)*carg - 4587.0*sarg;\n"
                },
                {
                    "date": 1642935773971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,11 +95,11 @@\n   f = fmod((335779.526232 + t * 1739527262.8478), asec360) * asec2rad;\n   d = fmod((1072260.70369 + t * 1602961601.2090), asec360) * asec2rad;\n   om = fmod((450160.398036 - t * 6962890.5431), asec360) * asec2rad;\n   dp = 0;\n-  double de = 0;\n+  de = 0;\n \n-  double arg = 2.0 * f - 2.0 * d + 2.0 * om;\n+  arg = 2.0 * f - 2.0 * d + 2.0 * om;\n   double sarg = sin(om);\n   double carg = cos(om);\n \n   double dpsi = -0.000135 + (dp * 1.0e-7);\n"
                },
                {
                    "date": 1642935796669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n double asec2rad = 4.848136811095359935899141e-6;\n double asec360 = 1296000.0;\n \n void iau2000b(double time) {\n-  double t, el, elp, f, d, om, dp, arg, sarg, carg, dpsi, deps;\n+  double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n   t = time / 36525.0;\n   el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n   elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n   f = fmod((335779.526232 + t * 1739527262.8478), asec360) * asec2rad;\n@@ -98,13 +98,13 @@\n   dp = 0;\n   de = 0;\n \n   arg = 2.0 * f - 2.0 * d + 2.0 * om;\n-  double sarg = sin(om);\n-  double carg = cos(om);\n+  sarg = sin(om);\n+  carg = cos(om);\n \n-  double dpsi = -0.000135 + (dp * 1.0e-7);\n-  double deps = 0.000388 + (de * 1.0e-7);\n+  dpsi = -0.000135 + (dp * 1.0e-7);\n+  deps = 0.000388 + (de * 1.0e-7);\n \n   dp = (-172064161.0 - 174666.0 * t) * sarg + 33386.0 * carg;\n   de += (92052331.0 + 9086.0 * t) * carg + 15377.0 * sarg;\n }\n"
                },
                {
                    "date": 1642936252112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,33 +83,40 @@\n //     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n //   }\n // }\n \n-double asec2rad = 4.848136811095359935899141e-6;\n-double asec360 = 1296000.0;\n+double ASEC2RAD = 4.848136811095359935899141e-6;\n+double ASEC360 = 1296000.0;\n \n-void iau2000b(double time) {\n-  double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n-  t = time / 36525.0;\n-  el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n-  elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n-  f = fmod((335779.526232 + t * 1739527262.8478), asec360) * asec2rad;\n-  d = fmod((1072260.70369 + t * 1602961601.2090), asec360) * asec2rad;\n-  om = fmod((450160.398036 - t * 6962890.5431), asec360) * asec2rad;\n-  dp = 0;\n-  de = 0;\n+class Iau2000b {\n+  Iau2000b(this.time);\n+  late double time;\n+  late double t = time / 36525.0;\n+  late double el =\n+      fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n+  late double elp =\n+      fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n+  late double f =\n+      fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n+  late double d =\n+      fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n+  late double om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * ASEC2RAD;\n+  late double dp = 0;\n+  double de = 0;\n \n-  arg = 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(om);\n-  carg = cos(om);\n+  late double arg = 2.0 * f - 2.0 * d + 2.0 * om;\n+  late double sarg = sin(om);\n+  late double carg = cos(om);\n \n-  dpsi = -0.000135 + (dp * 1.0e-7);\n-  deps = 0.000388 + (de * 1.0e-7);\n-\n-  dp = (-172064161.0 - 174666.0 * t) * sarg + 33386.0 * carg;\n-  de += (92052331.0 + 9086.0 * t) * carg + 15377.0 * sarg;\n+  late double dpsi = -0.000135 + (dp * 1.0e-7);\n+  late double deps = 0.000388 + (de * 1.0e-7);\n }\n+  \n \n+  // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n+  // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n+\n+\n   // sarg = sin(arg);\n   // carg = cos(arg);\n   // dp += (-13170906.0 - 1675.0*t)*sarg - 13696.0*carg;\n   // de += (5730336.0 - 3015.0*t)*carg - 4587.0*sarg;\n"
                },
                {
                    "date": 1642936631614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,31 +86,9 @@\n \n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n-class Iau2000b {\n-  Iau2000b(this.time);\n-  late double time;\n-  late double t = time / 36525.0;\n-  late double el =\n-      fmod((485868.249036 + t * 1717915923.2178), ASEC360) * ASEC2RAD;\n-  late double elp =\n-      fmod((1287104.79305 + t * 129596581.0481), ASEC360) * ASEC2RAD;\n-  late double f =\n-      fmod((335779.526232 + t * 1739527262.8478), ASEC360) * ASEC2RAD;\n-  late double d =\n-      fmod((1072260.70369 + t * 1602961601.2090), ASEC360) * ASEC2RAD;\n-  late double om = fmod((450160.398036 - t * 6962890.5431), ASEC360) * ASEC2RAD;\n-  late double dp = 0;\n-  double de = 0;\n-\n-  late double arg = 2.0 * f - 2.0 * d + 2.0 * om;\n-  late double sarg = sin(om);\n-  late double carg = cos(om);\n-\n-  late double dpsi = -0.000135 + (dp * 1.0e-7);\n-  late double deps = 0.000388 + (de * 1.0e-7);\n-}\n+class Iau2000b {}\n   \n \n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n"
                },
                {
                    "date": 1642936770540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,11 +86,13 @@\n \n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n-class Iau2000b {}\n-  \n-\n+class Iau2000b {\n+  Iau2000b(this.deps, this.dpsi);\n+  double deps;\n+  double dpsi;\n+}\n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n \n"
                },
                {
                    "date": 1642937130462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,11 +87,11 @@\n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n-  Iau2000b(this.deps, this.dpsi);\n-  double deps;\n-  double dpsi;\n+  Iau2000b(\n+      this.deps, this.dpsi, this.arg, this.carg, this.de, this.dp, this.sarg);\n+  double deps, dpsi, dp, de, sarg, carg, arg;\n }\n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n"
                },
                {
                    "date": 1642937216382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,15 @@\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n   Iau2000b(\n-      this.deps, this.dpsi, this.arg, this.carg, this.de, this.dp, this.sarg);\n+      {required this.deps,\n+      required this.dpsi,\n+      required this.arg,\n+      required this.carg,\n+      required this.de,\n+      required this.dp,\n+      required this.sarg});\n   double deps, dpsi, dp, de, sarg, carg, arg;\n }\n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n"
                },
                {
                    "date": 1642937501469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,14 +90,13 @@\n class Iau2000b {\n   Iau2000b(\n       {required this.deps,\n       required this.dpsi,\n-      required this.arg,\n-      required this.carg,\n-      required this.de,\n-      required this.dp,\n-      required this.sarg});\n-  double deps, dpsi, dp, de, sarg, carg, arg;\n+      required this.mobl,\n+      required this.tobl,\n+      required this.ee,\n+      required this.tt});\n+  double deps, dpsi, mobl, tobl, ee, tt;\n }\n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n"
                },
                {
                    "date": 1642937742234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,13 @@\n       required this.mobl,\n       required this.tobl,\n       required this.ee,\n       required this.tt});\n-  double deps, dpsi, mobl, tobl, ee, tt;\n+  double deps, dpsi;\n+  double mobl = mean_obliq(time);\n+  double tobl = mobl + (e.deps / 3600.0);\n+  double tt = time;\n+  double ee = e.dpsi * cos(radians(mobl)) / 15.0;\n }\n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n"
                },
                {
                    "date": 1642938078328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,20 +87,21 @@\n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n class Iau2000b {\n-  Iau2000b(\n-      {required this.deps,\n-      required this.dpsi,\n-      required this.mobl,\n-      required this.tobl,\n-      required this.ee,\n-      required this.tt});\n+  Iau2000b({\n+    required this.deps,\n+    required this.dpsi,\n+    // required this.mobl,\n+    // required this.tobl,\n+    // required this.ee,\n+    // required this.tt\n+  });\n   double deps, dpsi;\n-  double mobl = mean_obliq(time);\n-  double tobl = mobl + (e.deps / 3600.0);\n-  double tt = time;\n-  double ee = e.dpsi * cos(radians(mobl)) / 15.0;\n+  // double mobl = mean_obliq(time);\n+  // double tobl = mobl + (e.deps / 3600.0);\n+  // double tt = time;\n+  // double ee = e.dpsi * cos(radians(mobl)) / 15.0;\n }\n   // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n   // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n"
                },
                {
                    "date": 1642938355089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,17 +86,10 @@\n \n double ASEC2RAD = 4.848136811095359935899141e-6;\n double ASEC360 = 1296000.0;\n \n-class Iau2000b {\n-  Iau2000b({\n-    required this.deps,\n-    required this.dpsi,\n-    // required this.mobl,\n-    // required this.tobl,\n-    // required this.ee,\n-    // required this.tt\n-  });\n+List Iau2000b {\n+  \n   double deps, dpsi;\n   // double mobl = mean_obliq(time);\n   // double tobl = mobl + (e.deps / 3600.0);\n   // double tt = time;\n"
                },
                {
                    "date": 1642938431030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,14 +83,32 @@\n //     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n //   }\n // }\n \n-double ASEC2RAD = 4.848136811095359935899141e-6;\n-double ASEC360 = 1296000.0;\n+double asec2rad = 4.848136811095359935899141e-6;\n+double asec360 = 1296000.0;\n \n-List Iau2000b {\n-  \n-  double deps, dpsi;\n+List Iau2000b(double time) {\n+  double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n+  t = time / 36525.0;\n+  el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n+  elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n+  f = fmod((335779.526232 + t * 1739527262.8478), asec360) * asec2rad;\n+  d = fmod((1072260.70369 + t * 1602961601.2090), asec360) * asec2rad;\n+  om = fmod((450160.398036 - t * 6962890.5431), asec360) * asec2rad;\n+  dp = 0;\n+  de = 0;\n+\n+  arg = 2.0 * f - 2.0 * d + 2.0 * om;\n+  sarg = sin(om);\n+  carg = cos(om);\n+\n+  dpsi = -0.000135 + (dp * 1.0e-7);\n+  deps = 0.000388 + (de * 1.0e-7);\n+\n+  dp = (-172064161.0 - 174666.0 * t) * sarg + 33386.0 * carg;\n+  de += (92052331.0 + 9086.0 * t) * carg + 15377.0 * sarg;\n+\n   // double mobl = mean_obliq(time);\n   // double tobl = mobl + (e.deps / 3600.0);\n   // double tt = time;\n   // double ee = e.dpsi * cos(radians(mobl)) / 15.0;\n"
                },
                {
                    "date": 1642938621903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,542 +111,460 @@\n   // double mobl = mean_obliq(time);\n   // double tobl = mobl + (e.deps / 3600.0);\n   // double tt = time;\n   // double ee = e.dpsi * cos(radians(mobl)) / 15.0;\n-}\n-  // dp += (-172064161.0 - 174666.0*t)*sarg + 33386.0*carg;\n-  // de += (92052331.0 + 9086.0*t)*carg + 15377.0*sarg;\n \n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-13170906.0 - 1675.0 * t) * sarg - 13696.0 * carg;\n+  de += (5730336.0 - 3015.0 * t) * carg - 4587.0 * sarg;\n \n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-13170906.0 - 1675.0*t)*sarg - 13696.0*carg;\n-  // de += (5730336.0 - 3015.0*t)*carg - 4587.0*sarg;\n+  arg = 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2276413.0 - 234.0 * t) * sarg + 2796.0 * carg;\n+  de += (978459.0 - 485.0 * t) * carg + 1374.0 * sarg;\n \n+  arg = 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (2074554.0 + 207.0 * t) * sarg - 698.0 * carg;\n+  de += (-897492.0 + 470.0 * t) * carg - 291.0 * sarg;\n \n-  // arg = 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-2276413.0 - 234.0*t)*sarg + 2796.0*carg;\n-  // de += (978459.0 - 485.0*t)*carg + 1374.0*sarg;\n+  sarg = sin(elp);\n+  carg = cos(elp);\n+  dp += (1475877.0 - 3633.0 * t) * sarg + 11817.0 * carg;\n+  de += (73871.0 - 184.0 * t) * carg - 1924.0 * sarg;\n \n+  arg = elp + 2.0 * f - 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-516821.0 + 1226.0 * t) * sarg - 524.0 * carg;\n+  de += (224386.0 - 677.0 * t) * carg - 174.0 * sarg;\n \n-  // arg = 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (2074554.0 + 207.0*t)*sarg - 698.0*carg;\n-  // de += (-897492.0 + 470.0*t)*carg - 291.0*sarg;\n+  sarg = sin(el);\n+  carg = cos(el);\n+  dp += (711159.0 + 73.0 * t) * sarg - 872.0 * carg;\n+  de += (-6750.0) * carg + 358.0 * sarg;\n \n+  arg = 2.0 * f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-387298.0 - 367.0 * t) * sarg + 380.0 * carg;\n+  de += (200728.0 + 18.0 * t) * carg + 318.0 * sarg;\n \n-  // sarg = sin(elp);\n-  // carg = cos(elp);\n-  // dp += (1475877.0 - 3633.0*t)*sarg + 11817.0*carg;\n-  // de += (73871.0 - 184.0*t)*carg - 1924.0*sarg;\n+  arg = el + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-301461.0 - 36.0 * t) * sarg + 816.0 * carg;\n+  de += (129025.0 - 63.0 * t) * carg + 367.0 * sarg;\n \n+  arg = -elp + 2.0 * f - 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (215829.0 - 494.0 * t) * sarg + 111.0 * carg;\n+  de += (-95929.0 + 299.0 * t) * carg + 132.0 * sarg;\n \n-  // arg = elp + 2.0*f - 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-516821.0 + 1226.0*t)*sarg - 524.0*carg;\n-  // de += (224386.0 - 677.0*t)*carg - 174.0*sarg;\n+  arg = 2.0 * f - 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (128227.0 + 137.0 * t) * sarg + 181.0 * carg;\n+  de += (-68982.0 - 9.0 * t) * carg + 39.0 * sarg;\n \n+  arg = -el + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (123457.0 + 11.0 * t) * sarg + 19.0 * carg;\n+  de += (-53311.0 + 32.0 * t) * carg - 4.0 * sarg;\n \n-  // sarg = sin(el);\n-  // carg = cos(el);\n-  // dp += (711159.0 + 73.0*t)*sarg - 872.0*carg;\n-  // de += (-6750.0)*carg + 358.0*sarg;\n+  arg = -el + 2.0 * d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (156994.0 + 10.0 * t) * sarg - 168.0 * carg;\n+  de += (-1235.0) * carg + 82.0 * sarg;\n \n+  arg = el + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (63110.0 + 63.0 * t) * sarg + 27.0 * carg;\n+  de += (-33228.0) * carg - 9.0 * sarg;\n \n-  // arg = 2.0*f + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-387298.0 - 367.0*t)*sarg + 380.0*carg;\n-  // de += (200728.0 + 18.0*t)*carg + 318.0*sarg;\n+  arg = -el + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-57976.0 - 63.0 * t) * sarg - 189.0 * carg;\n+  de += (31429.0) * carg - 75.0 * sarg;\n \n+  arg = -el + 2.0 * f + 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-59641.0 - 11.0 * t) * sarg + 149.0 * carg;\n+  de += (25543.0 - 11.0 * t) * carg + 66.0 * sarg;\n \n-  // arg = el + 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-301461.0 - 36.0*t)*sarg + 816.0*carg;\n-  // de += (129025.0 - 63.0*t)*carg + 367.0*sarg;\n+  arg = el + 2.0 * f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-51613.0 - 42.0 * t) * sarg + 129.0 * carg;\n+  de += (26366.0) * carg + 78.0 * sarg;\n \n+  arg = -2.0 * el + 2.0 * f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (45893.0 + 50.0 * t) * sarg + 31.0 * carg;\n+  de += (-24236.0 - 10.0 * t) * carg + 20.0 * sarg;\n \n-  // arg = -elp + 2.0*f - 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (215829.0 - 494.0*t)*sarg + 111.0*carg;\n-  // de += (-95929.0 + 299.0*t)*carg + 132.0*sarg;\n+  arg = 2.0 * d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (63384.0 + 11.0 * t) * sarg - 150.0 * carg;\n+  de += (-1220.0) * carg + 29.0 * sarg;\n \n+  arg = 2.0 * f + 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-38571.0 - 1.0 * t) * sarg + 158.0 * carg;\n+  de += (16452.0 - 11.0 * t) * carg + 68.0 * sarg;\n \n-  // arg = 2.0*f - 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (128227.0 + 137.0*t)*sarg + 181.0*carg;\n-  // de += (-68982.0 - 9.0*t)*carg + 39.0*sarg;\n+  arg = -2.0 * elp + 2.0 * f - 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (32481.0) * sarg;\n+  de += (-13870.0) * carg;\n \n+  arg = -2.0 * el + 2.0 * d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-47722.0) * sarg - 18.0 * carg;\n+  de += (477.0) * carg - 25.0 * sarg;\n \n-  // arg = -el + 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (123457.0 + 11.0*t)*sarg + 19.0*carg;\n-  // de += (-53311.0 + 32.0*t)*carg - 4.0*sarg;\n+  arg = 2.0 * el + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-31046.0 - 1.0 * t) * sarg + 131.0 * carg;\n+  de += (13238.0 - 11.0 * t) * carg + 59.0 * sarg;\n \n+  arg = el + 2.0 * f - 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (28593.0) * sarg - carg;\n+  de += (-12338.0 + 10.0 * t) * carg - 3.0 * sarg;\n \n-  // arg = -el + 2.0*d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (156994.0 + 10.0*t)*sarg - 168.0*carg;\n-  // de += (-1235.0)*carg + 82.0*sarg;\n+  arg = -el + 2.0 * f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (20441.0 + 21.0 * t) * sarg + 10.0 * carg;\n+  de += (-10758.0) * carg - 3.0 * sarg;\n \n+  arg = 2.0 * el;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (29243.0) * sarg - 74.0 * carg;\n+  de += (-609.0) * carg + 13.0 * sarg;\n \n-  // arg = el + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (63110.0 + 63.0*t)*sarg + 27.0*carg;\n-  // de += (-33228.0)*carg - 9.0*sarg;\n+  arg = 2.0 * f;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (25887.0) * sarg - 66.0 * carg;\n+  de += (-550.0) * carg + 11.0 * sarg;\n \n+  arg = elp + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-14053.0 - 25.0 * t) * sarg + 79.0 * carg;\n+  de += (8551.0 - 2.0 * t) * carg - 45.0 * sarg;\n \n-  // arg = -el + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-57976.0 - 63.0*t)*sarg - 189.0*carg;\n-  // de += (31429.0)*carg - 75.0*sarg;\n+  arg = -el + 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (15164.0 + 10.0 * t) * sarg + 11.0 * carg;\n+  de += (-8001.0) * carg - sarg;\n \n+  arg = 2.0 * elp + 2.0 * f - 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-15794.0 + 72.0 * t) * sarg - 16.0 * carg;\n+  de += (6850.0 - 42.0 * t) * carg - 5.0 * sarg;\n \n-  // arg = -el + 2.0*f + 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-59641.0 - 11.0*t)*sarg + 149.0*carg;\n-  // de += (25543.0 - 11.0*t)*carg + 66.0*sarg;\n+  arg = -2.0 * f + 2.0 * d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (21783.0) * sarg + 13.0 * carg;\n+  de += (-167.0) * carg + 13.0 * sarg;\n \n+  arg = el - 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-12873.0 - 10.0 * t) * sarg - 37.0 * carg;\n+  de += (6953.0) * carg - 14.0 * sarg;\n \n-  // arg = el + 2.0*f + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-51613.0 - 42.0*t)*sarg + 129.0*carg;\n-  // de += (26366.0)*carg + 78.0*sarg;\n+  arg = -elp + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-12654.0 + 11.0 * t) * sarg + 63.0 * carg;\n+  de += (6415.0) * carg + 26.0 * sarg;\n \n+  arg = -el + 2.0 * f + 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-10204.0) * sarg + 25.0 * carg;\n+  de += (5222.0) * carg + 15.0 * sarg;\n \n-  // arg = -2.0*el + 2.0*f + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (45893.0 + 50.0*t)*sarg + 31.0*carg;\n-  // de += (-24236.0 - 10.0*t)*carg + 20.0*sarg;\n+  arg = 2.0 * elp;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (16707.0 - 85.0 * t) * sarg - 10.0 * carg;\n+  de += (168.0 - 1.0 * t) * carg + 10.0 * sarg;\n \n+  arg = el + 2.0 * f + 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-7691.0) * sarg + 44.0 * carg;\n+  de += (3268.0) * carg + 19.0 * sarg;\n \n-  // arg = 2.0*d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (63384.0 + 11.0*t)*sarg - 150.0*carg;\n-  // de += (-1220.0)*carg + 29.0*sarg;\n+  arg = -2.0 * el + 2.0 * f;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-11024.0) * sarg - 14.0 * carg;\n+  de += (104.0) * carg + 2.0 * sarg;\n \n+  arg = elp + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (7566.0 - 21.0 * t) * sarg - 11.0 * carg;\n+  de += (-3250.0) * carg - 5.0 * sarg;\n \n-  // arg = 2.0*f + 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-38571.0 - 1.0*t)*sarg + 158.0*carg;\n-  // de += (16452.0 - 11.0*t)*carg + 68.0*sarg;\n+  arg = 2.0 * f + 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-6637.0 - 11.0 * t) * sarg + 25.0 * carg;\n+  de += (3353.0) * carg + 14.0 * sarg;\n \n+  arg = -elp + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-7141.0 + 21.0 * t) * sarg + 8.0 * carg;\n+  de += (3070.0) * carg + 4.0 * sarg;\n \n-  // arg = -2.0*elp + 2.0*f - 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (32481.0)*sarg;\n-  // de += (-13870.0)*carg;\n+  arg = 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-6302.0 - 11.0 * t) * sarg + 2.0 * carg;\n+  de += (3272.0) * carg + 4.0 * sarg;\n \n+  arg = el + 2.0 * f - 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (5800.0 + 10.0 * t) * sarg + 2.0 * carg;\n+  de += (-3045.0) * carg - sarg;\n \n-  // arg = -2.0*el + 2.0*d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-47722.0)*sarg - 18.0*carg;\n-  // de += (477.0)*carg - 25.0*sarg;\n+  arg = 2.0 * el + 2.0 * f - 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (6443.0) * sarg - 7.0 * carg;\n+  de += (-2768.0) * carg - 4.0 * sarg;\n \n+  arg = -2.0 * el + 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-5774.0 - 11.0 * t) * sarg - 15.0 * carg;\n+  de += (3041.0) * carg - 5.0 * sarg;\n \n-  // arg = 2.0*el + 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-31046.0 - 1.0*t)*sarg + 131.0*carg;\n-  // de += (13238.0 - 11.0*t)*carg + 59.0*sarg;\n+  arg = 2.0 * el + 2.0 * f + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-5350.0) * sarg + 21.0 * carg;\n+  de += (2695.0) * carg + 12.0 * sarg;\n \n+  arg = -elp + 2.0 * f - 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-4752.0 - 11.0 * t) * sarg - 3.0 * carg;\n+  de += (2719.0) * carg - 3.0 * sarg;\n \n-  // arg = el + 2.0*f - 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (28593.0)*sarg - carg;\n-  // de += (-12338.0 + 10.0*t)*carg - 3.0*sarg;\n+  arg = -2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-4940.0 - 11.0 * t) * sarg - 21.0 * carg;\n+  de += (2720.0) * carg - 9.0 * sarg;\n \n+  arg = -el - elp + 2.0 * d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (7350.0) * sarg - 8.0 * carg;\n+  de += (-51.0) * carg + 4.0 * sarg;\n \n-  // arg = -el + 2.0*f + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (20441.0 + 21.0*t)*sarg + 10.0*carg;\n-  // de += (-10758.0)*carg - 3.0*sarg;\n+  arg = 2.0 * el - 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (4065.0) * sarg + 6.0 * carg;\n+  de += (-2206.0) * carg + sarg;\n \n+  arg = el + 2.0 * d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (6579.0) * sarg - 24.0 * carg;\n+  de += (-199.0) * carg + 2.0 * sarg;\n \n-  // arg = 2.0*el;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (29243.0)*sarg - 74.0*carg;\n-  // de += (-609.0)*carg + 13.0*sarg;\n+  arg = elp + 2.0 * f - 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (3579.0) * sarg + 5.0 * carg;\n+  de += (-1900.0) * carg + sarg;\n \n+  arg = el - elp;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (4725.0) * sarg - 6.0 * carg;\n+  de += (-41.0) * carg + 3.0 * sarg;\n \n-  // arg = 2.0*f;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (25887.0)*sarg - 66.0*carg;\n-  // de += (-550.0)*carg + 11.0*sarg;\n+  arg = -2.0 * el + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-3075.0) * sarg - 2.0 * carg;\n+  de += (1313.0) * carg - sarg;\n \n+  arg = 3.0 * el + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2904.0) * sarg + 15.0 * carg;\n+  de += (1233.0) * carg + 7.0 * sarg;\n \n-  // arg = elp + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-14053.0 - 25.0*t)*sarg + 79.0*carg;\n-  // de += (8551.0 - 2.0*t)*carg - 45.0*sarg;\n+  arg = -elp + 2.0 * d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (4348.0) * sarg - 10.0 * carg;\n+  de += (-81.0) * carg + 2.0 * sarg;\n \n+  arg = el - elp + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2878.0) * sarg + 8.0 * carg;\n+  de += (1232.0) * carg + 4.0 * sarg;\n \n-  // arg = -el + 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (15164.0 + 10.0*t)*sarg + 11.0*carg;\n-  // de += (-8001.0)*carg - sarg;\n+  sarg = sin(d);\n+  carg = cos(d);\n+  dp += (-4230.0) * sarg + 5.0 * carg;\n+  de += (-20.0) * carg - 2.0 * sarg;\n \n+  arg = -el - elp + 2.0 * f + 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2819.0) * sarg + 7.0 * carg;\n+  de += (1207.0) * carg + 3.0 * sarg;\n \n-  // arg = 2.0*elp + 2.0*f - 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-15794.0 + 72.0*t)*sarg - 16.0*carg;\n-  // de += (6850.0 - 42.0*t)*carg - 5.0*sarg;\n+  arg = -el + 2.0 * f;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-4056.0) * sarg + 5.0 * carg;\n+  de += (40.0) * carg - 2.0 * sarg;\n \n+  arg = -elp + 2.0 * f + 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2647.0) * sarg + 11.0 * carg;\n+  de += (1129.0) * carg + 5.0 * sarg;\n \n-  // arg = -2.0*f + 2.0*d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (21783.0)*sarg + 13.0*carg;\n-  // de += (-167.0)*carg + 13.0*sarg;\n+  arg = -2.0 * el + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-2294.0) * sarg - 10.0 * carg;\n+  de += (1266.0) * carg - 4.0 * sarg;\n \n+  arg = el + elp + 2.0 * f + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (2481.0) * sarg - 7.0 * carg;\n+  de += (-1062.0) * carg - 3.0 * sarg;\n \n-  // arg = el - 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-12873.0 - 10.0*t)*sarg - 37.0*carg;\n-  // de += (6953.0)*carg - 14.0*sarg;\n+  arg = 2.0 * el + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (2179.0) * sarg - 2.0 * carg;\n+  de += (-1129.0) * carg - 2.0 * sarg;\n \n+  arg = -el + elp + d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (3276.0) * sarg + carg;\n+  de += (-9.0) * carg;\n \n-  // arg = -elp + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-12654.0 + 11.0*t)*sarg + 63.0*carg;\n-  // de += (6415.0)*carg + 26.0*sarg;\n+  arg = el + elp;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n\\ No newline at end of file\n+  dp += (-3389.0) * sarg + 5.0 * carg;\n+  de += (35.0) * carg - 2.0 * sarg;\n \n+  arg = el + 2.0 * f;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (3339.0) * sarg - 13.0 * carg;\n+  de += (-107.0) * carg + sarg;\n \n-  // arg = -el + 2.0*f + 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-10204.0)*sarg + 25.0*carg;\n-  // de += (5222.0)*carg + 15.0*sarg;\n+  arg = -el + 2.0 * f - 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1987.0) * sarg - 6.0 * carg;\n+  de += (1073.0) * carg - 2.0 * sarg;\n \n+  arg = el + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1981.0) * sarg;\n+  de += (854.0) * carg;\n \n-  // arg = 2.0*elp;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (16707.0 - 85.0*t)*sarg - 10.0*carg;\n-  // de += (168.0 - 1.0*t)*carg + 10.0*sarg;\n+  arg = -el + d;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (4026.0) * sarg - 353.0 * carg;\n+  de += (-553.0) * carg - 139.0 * sarg;\n \n+  arg = 2.0 * f + d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1660.0) * sarg - 5.0 * carg;\n+  de += (-710.0) * carg - 2.0 * sarg;\n \n-  // arg = el + 2.0*f + 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-7691.0)*sarg + 44.0*carg;\n-  // de += (3268.0)*carg + 19.0*sarg;\n+  arg = -el + 2.0 * f + 4.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1521.0) * sarg + 9.0 * carg;\n+  de += (647.0) * carg + 4.0 * sarg;\n \n+  arg = -el + elp + d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1314.0) * sarg;\n+  de += (-700.0) * carg;\n \n-  // arg = -2.0*el + 2.0*f;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-11024.0)*sarg - 14.0*carg;\n-  // de += (104.0)*carg + 2.0*sarg;\n+  arg = -2.0 * elp + 2.0 * f - 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1283.0) * sarg;\n+  de += (672.0) * carg;\n \n+  arg = el + 2.0 * f + 2.0 * d + om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (-1331.0) * sarg + 8.0 * carg;\n+  de += (663.0) * carg + 4.0 * sarg;\n \n-  // arg = elp + 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (7566.0 - 21.0*t)*sarg - 11.0*carg;\n-  // de += (-3250.0)*carg - 5.0*sarg;\n+  arg = -2.0 * el + 2.0 * f + 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1383.0) * sarg - 2.0 * carg;\n+  de += (-594.0) * carg - 2.0 * sarg;\n \n+  arg = -el + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1405.0) * sarg + 4.0 * carg;\n+  de += (-610.0) * carg + 2.0 * sarg;\n \n-  // arg = 2.0*f + 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-6637.0 - 11.0*t)*sarg + 25.0*carg;\n-  // de += (3353.0)*carg + 14.0*sarg;\n+  arg = el + elp + 2.0 * f - 2.0 * d + 2.0 * om;\n+  sarg = sin(arg);\n+  carg = cos(arg);\n+  dp += (1290.0) * sarg;\n+  de += (-556.0) * carg;\n \n-\n-  // arg = -elp + 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-7141.0 + 21.0*t)*sarg + 8.0*carg;\n-  // de += (3070.0)*carg + 4.0*sarg;\n-\n-\n-  // arg = 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-6302.0 - 11.0*t)*sarg + 2.0*carg;\n-  // de += (3272.0)*carg + 4.0*sarg;\n-\n-\n-  // arg = el + 2.0*f - 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (5800.0 + 10.0*t)*sarg + 2.0*carg;\n-  // de += (-3045.0)*carg - sarg;\n-\n-\n-  // arg = 2.0*el + 2.0*f - 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (6443.0)*sarg - 7.0*carg;\n-  // de += (-2768.0)*carg - 4.0*sarg;\n-\n-\n-  // arg = -2.0*el + 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-5774.0 - 11.0*t)*sarg - 15.0*carg;\n-  // de += (3041.0)*carg - 5.0*sarg;\n-\n-\n-  // arg = 2.0*el + 2.0*f + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-5350.0)*sarg + 21.0*carg;\n-  // de += (2695.0)*carg + 12.0*sarg;\n-\n-\n-  // arg = -elp + 2.0*f - 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-4752.0 - 11.0*t)*sarg - 3.0*carg;\n-  // de += (2719.0)*carg - 3.0*sarg;\n-\n-\n-  // arg = -2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-4940.0 - 11.0*t)*sarg - 21.0*carg;\n-  // de += (2720.0)*carg - 9.0*sarg;\n-\n-\n-  // arg = -el - elp + 2.0*d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (7350.0)*sarg - 8.0*carg;\n-  // de += (-51.0)*carg + 4.0*sarg;\n-\n-\n-  // arg = 2.0*el - 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (4065.0)*sarg + 6.0*carg;\n-  // de += (-2206.0)*carg + sarg;\n-\n-\n-  // arg = el + 2.0*d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (6579.0)*sarg - 24.0*carg;\n-  // de += (-199.0)*carg + 2.0*sarg;\n-\n-\n-  // arg = elp + 2.0*f - 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (3579.0)*sarg + 5.0*carg;\n-  // de += (-1900.0)*carg + sarg;\n-\n-\n-  // arg = el - elp;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (4725.0)*sarg - 6.0*carg;\n-  // de += (-41.0)*carg + 3.0*sarg;\n-\n-\n-  // arg = -2.0*el + 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-3075.0)*sarg - 2.0*carg;\n-  // de += (1313.0)*carg - sarg;\n-\n-\n-  // arg = 3.0*el + 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-2904.0)*sarg + 15.0*carg;\n-  // de += (1233.0)*carg + 7.0*sarg;\n-\n-\n-  // arg = -elp + 2.0*d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (4348.0)*sarg - 10.0*carg;\n-  // de += (-81.0)*carg + 2.0*sarg;\n-\n-\n-  // arg = el - elp + 2.0*f + 2.0*om\n-  // sarg = sin(arg)\n-  // carg = cos(arg)\n-  // dp += (-2878.0)*sarg + 8.0*carg\n-  // de += (1232.0)*carg + 4.0*sarg\n-\n-\n-  // sarg = sin(d);\n-  // carg = cos(d);\n-  // dp += (-4230.0)*sarg + 5.0*carg;\n-  // de += (-20.0)*carg - 2.0*sarg;\n-\n-\n-  // arg = -el - elp + 2.0*f + 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-2819.0)*sarg + 7.0*carg;\n-  // de += (1207.0)*carg + 3.0*sarg;\n-\n-\n-  // arg = -el + 2.0*f;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-4056.0)*sarg + 5.0*carg;\n-  // de += (40.0)*carg - 2.0*sarg;\n-\n-\n-  // arg = -elp + 2.0*f + 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-2647.0)*sarg + 11.0*carg;\n-  // de += (1129.0)*carg + 5.0*sarg;\n-\n-\n-  // arg = -2.0*el + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-2294.0)*sarg - 10.0*carg;\n-  // de += (1266.0)*carg - 4.0*sarg;\n-\n-\n-  // arg = el + elp + 2.0*f + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (2481.0)*sarg - 7.0*carg;\n-  // de += (-1062.0)*carg - 3.0*sarg;\n-\n-\n-  // arg = 2.0*el + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (2179.0)*sarg - 2.0*carg;\n-  // de += (-1129.0)*carg - 2.0*sarg;\n-\n-\n-  // arg = -el + elp + d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (3276.0)*sarg + carg;\n-  // de += (-9.0)*carg;\n-\n-\n-  // arg = el + elp;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-3389.0)*sarg + 5.0*carg;\n-  // de += (35.0)*carg - 2.0*sarg;\n-\n-\n-  // arg = el + 2.0*f;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (3339.0)*sarg - 13.0*carg;\n-  // de += (-107.0)*carg + sarg;\n-\n-\n-  // arg = -el + 2.0*f - 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-1987.0)*sarg - 6.0*carg;\n-  // de += (1073.0)*carg - 2.0*sarg;\n-\n-\n-  // arg = el + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-1981.0)*sarg;\n-  // de += (854.0)*carg;\n-\n-\n-  // arg = -el + d;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (4026.0)*sarg - 353.0*carg;\n-  // de += (-553.0)*carg - 139.0*sarg;\n-\n-\n-  // arg = 2.0*f + d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (1660.0)*sarg - 5.0*carg;\n-  // de += (-710.0)*carg - 2.0*sarg;\n-\n-\n-  // arg = -el + 2.0*f + 4.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-1521.0)*sarg + 9.0*carg;\n-  // de += (647.0)*carg + 4.0*sarg;\n-\n-\n-  // arg = -el + elp + d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (1314.0)*sarg;\n-  // de += (-700.0)*carg;\n-\n-\n-  // arg = -2.0*elp + 2.0*f - 2.0*d + om\n-  // sarg = sin(arg)\n-  // carg = cos(arg)\n-  // dp += (-1283.0)*sarg\n-  // de += (672.0)*carg\n-\n-\n-  // arg = el + 2.0*f + 2.0*d + om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (-1331.0)*sarg + 8.0*carg;\n-  // de += (663.0)*carg + 4.0*sarg;\n-\n-\n-  // arg = -2.0*el + 2.0*f + 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (1383.0)*sarg - 2.0*carg;\n-  // de += (-594.0)*carg - 2.0*sarg;\n-\n-\n-  // arg = -el + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (1405.0)*sarg + 4.0*carg;\n-  // de += (-610.0)*carg + 2.0*sarg;\n-\n-\n-  // arg = el + elp + 2.0*f - 2.0*d + 2.0*om;\n-  // sarg = sin(arg);\n-  // carg = cos(arg);\n-  // dp += (1290.0)*sarg;\n-  // de += (-556.0)*carg;\n-\n-\n-  // double dpsi = -0.000135 + (dp * 1.0e-7);\n-  // double deps = 0.000388 + (de * 1.0e-7);\n-\n-    \n-        \n+  dpsi = -0.000135 + (dp * 1.0e-7);\n+  deps = 0.000388 + (de * 1.0e-7);\n+}\n"
                },
                {
                    "date": 1642938697661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -566,5 +566,7 @@\n   de += (-556.0) * carg;\n \n   dpsi = -0.000135 + (dp * 1.0e-7);\n   deps = 0.000388 + (de * 1.0e-7);\n-}\n\\ No newline at end of file\n+\n+  return [deps, dpsi];\n+}\n"
                },
                {
                    "date": 1642938768212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n \n double asec2rad = 4.848136811095359935899141e-6;\n double asec360 = 1296000.0;\n \n-List Iau2000b(double time) {\n+List iau2000b(double time) {\n   double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n   t = time / 36525.0;\n   el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n   elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n"
                },
                {
                    "date": 1642939056250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n \n double asec2rad = 4.848136811095359935899141e-6;\n double asec360 = 1296000.0;\n \n-List iau2000b(double time) {\n+List<double> iau2000b(double time) {\n   double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n   t = time / 36525.0;\n   el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n   elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n"
                },
                {
                    "date": 1642939360185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n \n double asec2rad = 4.848136811095359935899141e-6;\n double asec360 = 1296000.0;\n \n-List<double> iau2000b(double time) {\n+Iau2000b iau2000b(double time) {\n   double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n   t = time / 36525.0;\n   el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n   elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n@@ -567,6 +567,6 @@\n \n   dpsi = -0.000135 + (dp * 1.0e-7);\n   deps = 0.000388 + (de * 1.0e-7);\n \n-  return [deps, dpsi];\n+  return Iau2000b(dpsi, deps);\n }\n"
                },
                {
                    "date": 1642939591004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,11 +83,8 @@\n //     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n //   }\n // }\n \n-double asec2rad = 4.848136811095359935899141e-6;\n-double asec360 = 1296000.0;\n-\n Iau2000b iau2000b(double time) {\n   double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n   t = time / 36525.0;\n   el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n"
                },
                {
                    "date": 1642939618867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n // ignore_for_file: prefer_typing_uninitialized_variables\n \n import 'dart:math';\n \n+import 'constants.dart';\n import 'func.dart';\n \n enum PrecessDir {\n   from2000, // 0\n@@ -83,8 +84,14 @@\n //     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n //   }\n // }\n \n+class Iau2000b {\n+  Iau2000b(this.dpsi, this.deps);\n+  double dpsi;\n+  double deps;\n+}\n+\n Iau2000b iau2000b(double time) {\n   double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n   t = time / 36525.0;\n   el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n"
                },
                {
                    "date": 1642940078661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n // ------\n // ignore_for_file: prefer_typing_uninitialized_variables\n \n import 'dart:math';\n-\n import 'constants.dart';\n import 'func.dart';\n \n enum PrecessDir {\n@@ -84,15 +83,14 @@\n //     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n //   }\n // }\n \n-class Iau2000b {\n-  Iau2000b(this.dpsi, this.deps);\n-  double dpsi;\n-  double deps;\n+class E_tilt {\n+  E_tilt(this.dpsi, this.deps, this.ee, this.mobl, this.tobl, this.tt);\n+  double deps, dpsi, mobl, tobl, tt, ee;\n }\n \n-Iau2000b iau2000b(double time) {\n+E_tilt iau2000b(double time) {\n   double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n   t = time / 36525.0;\n   el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n   elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n@@ -111,13 +109,8 @@\n \n   dp = (-172064161.0 - 174666.0 * t) * sarg + 33386.0 * carg;\n   de += (92052331.0 + 9086.0 * t) * carg + 15377.0 * sarg;\n \n-  // double mobl = mean_obliq(time);\n-  // double tobl = mobl + (e.deps / 3600.0);\n-  // double tt = time;\n-  // double ee = e.dpsi * cos(radians(mobl)) / 15.0;\n-\n   sarg = sin(arg);\n   carg = cos(arg);\n   dp += (-13170906.0 - 1675.0 * t) * sarg - 13696.0 * carg;\n   de += (5730336.0 - 3015.0 * t) * carg - 4587.0 * sarg;\n@@ -571,6 +564,11 @@\n \n   dpsi = -0.000135 + (dp * 1.0e-7);\n   deps = 0.000388 + (de * 1.0e-7);\n \n-  return Iau2000b(dpsi, deps);\n+  double mobl = meanObliq(time);\n+  double tobl = mobl + (deps / 3600.0);\n+  double tt = time;\n+  double ee = dpsi * cos(radians(mobl)) / 15.0;\n+\n+  return E_tilt(dpsi, deps, mobl, tobl, tt, ee);\n }\n"
                },
                {
                    "date": 1642940179780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,14 +83,14 @@\n //     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n //   }\n // }\n \n-class E_tilt {\n-  E_tilt(this.dpsi, this.deps, this.ee, this.mobl, this.tobl, this.tt);\n+class Etilt {\n+  Etilt(this.dpsi, this.deps, this.ee, this.mobl, this.tobl, this.tt);\n   double deps, dpsi, mobl, tobl, tt, ee;\n }\n \n-E_tilt iau2000b(double time) {\n+Etilt iau2000b(double time) {\n   double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n   t = time / 36525.0;\n   el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n   elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n@@ -569,6 +569,6 @@\n   double tobl = mobl + (deps / 3600.0);\n   double tt = time;\n   double ee = dpsi * cos(radians(mobl)) / 15.0;\n \n-  return E_tilt(dpsi, deps, mobl, tobl, tt, ee);\n+  return Etilt(dpsi, deps, mobl, tobl, tt, ee);\n }\n"
                },
                {
                    "date": 1642940595632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,21 +70,8 @@\n   var rot;\n   RotationMatrix(this.rot);\n }\n \n-// class E_tilt {\n-//   void initEtilt(time) {\n-//     var e = Iau2000b(time);\n-//     var dpsi = e.dpsi;\n-//     var deps = e.deps;\n-//     var mobl = mean_obliq(time);\n-//     var tobl = mobl + (e.deps / 3600.0);\n-//     var tt = time;\n-//     var ee = e.dpsi * cos(radians(mobl)) / 15.0;\n-//     E_tilt(this.deps, this.dpsi,this.e,this.ee,this.mobl,this.tobl,this.tt);\n-//   }\n-// }\n-\n class Etilt {\n   Etilt(this.dpsi, this.deps, this.ee, this.mobl, this.tobl, this.tt);\n   double deps, dpsi, mobl, tobl, tt, ee;\n }\n"
                },
                {
                    "date": 1642992070389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,487 +75,5 @@\n   Etilt(this.dpsi, this.deps, this.ee, this.mobl, this.tobl, this.tt);\n   double deps, dpsi, mobl, tobl, tt, ee;\n }\n \n-Etilt iau2000b(double time) {\n-  double t, el, elp, f, d, om, dp, de, arg, sarg, carg, dpsi, deps;\n-  t = time / 36525.0;\n-  el = fmod((485868.249036 + t * 1717915923.2178), asec360) * asec2rad;\n-  elp = fmod((1287104.79305 + t * 129596581.0481), asec360) * asec2rad;\n-  f = fmod((335779.526232 + t * 1739527262.8478), asec360) * asec2rad;\n-  d = fmod((1072260.70369 + t * 1602961601.2090), asec360) * asec2rad;\n-  om = fmod((450160.398036 - t * 6962890.5431), asec360) * asec2rad;\n-  dp = 0;\n-  de = 0;\n-\n-  arg = 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(om);\n-  carg = cos(om);\n-\n-  dpsi = -0.000135 + (dp * 1.0e-7);\n-  deps = 0.000388 + (de * 1.0e-7);\n-\n-  dp = (-172064161.0 - 174666.0 * t) * sarg + 33386.0 * carg;\n-  de += (92052331.0 + 9086.0 * t) * carg + 15377.0 * sarg;\n-\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-13170906.0 - 1675.0 * t) * sarg - 13696.0 * carg;\n-  de += (5730336.0 - 3015.0 * t) * carg - 4587.0 * sarg;\n-\n-  arg = 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2276413.0 - 234.0 * t) * sarg + 2796.0 * carg;\n-  de += (978459.0 - 485.0 * t) * carg + 1374.0 * sarg;\n-\n-  arg = 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (2074554.0 + 207.0 * t) * sarg - 698.0 * carg;\n-  de += (-897492.0 + 470.0 * t) * carg - 291.0 * sarg;\n-\n-  sarg = sin(elp);\n-  carg = cos(elp);\n-  dp += (1475877.0 - 3633.0 * t) * sarg + 11817.0 * carg;\n-  de += (73871.0 - 184.0 * t) * carg - 1924.0 * sarg;\n-\n-  arg = elp + 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-516821.0 + 1226.0 * t) * sarg - 524.0 * carg;\n-  de += (224386.0 - 677.0 * t) * carg - 174.0 * sarg;\n-\n-  sarg = sin(el);\n-  carg = cos(el);\n-  dp += (711159.0 + 73.0 * t) * sarg - 872.0 * carg;\n-  de += (-6750.0) * carg + 358.0 * sarg;\n-\n-  arg = 2.0 * f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-387298.0 - 367.0 * t) * sarg + 380.0 * carg;\n-  de += (200728.0 + 18.0 * t) * carg + 318.0 * sarg;\n-\n-  arg = el + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-301461.0 - 36.0 * t) * sarg + 816.0 * carg;\n-  de += (129025.0 - 63.0 * t) * carg + 367.0 * sarg;\n-\n-  arg = -elp + 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (215829.0 - 494.0 * t) * sarg + 111.0 * carg;\n-  de += (-95929.0 + 299.0 * t) * carg + 132.0 * sarg;\n-\n-  arg = 2.0 * f - 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (128227.0 + 137.0 * t) * sarg + 181.0 * carg;\n-  de += (-68982.0 - 9.0 * t) * carg + 39.0 * sarg;\n-\n-  arg = -el + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (123457.0 + 11.0 * t) * sarg + 19.0 * carg;\n-  de += (-53311.0 + 32.0 * t) * carg - 4.0 * sarg;\n-\n-  arg = -el + 2.0 * d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (156994.0 + 10.0 * t) * sarg - 168.0 * carg;\n-  de += (-1235.0) * carg + 82.0 * sarg;\n-\n-  arg = el + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (63110.0 + 63.0 * t) * sarg + 27.0 * carg;\n-  de += (-33228.0) * carg - 9.0 * sarg;\n-\n-  arg = -el + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-57976.0 - 63.0 * t) * sarg - 189.0 * carg;\n-  de += (31429.0) * carg - 75.0 * sarg;\n-\n-  arg = -el + 2.0 * f + 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-59641.0 - 11.0 * t) * sarg + 149.0 * carg;\n-  de += (25543.0 - 11.0 * t) * carg + 66.0 * sarg;\n-\n-  arg = el + 2.0 * f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-51613.0 - 42.0 * t) * sarg + 129.0 * carg;\n-  de += (26366.0) * carg + 78.0 * sarg;\n-\n-  arg = -2.0 * el + 2.0 * f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (45893.0 + 50.0 * t) * sarg + 31.0 * carg;\n-  de += (-24236.0 - 10.0 * t) * carg + 20.0 * sarg;\n-\n-  arg = 2.0 * d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (63384.0 + 11.0 * t) * sarg - 150.0 * carg;\n-  de += (-1220.0) * carg + 29.0 * sarg;\n-\n-  arg = 2.0 * f + 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-38571.0 - 1.0 * t) * sarg + 158.0 * carg;\n-  de += (16452.0 - 11.0 * t) * carg + 68.0 * sarg;\n-\n-  arg = -2.0 * elp + 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (32481.0) * sarg;\n-  de += (-13870.0) * carg;\n-\n-  arg = -2.0 * el + 2.0 * d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-47722.0) * sarg - 18.0 * carg;\n-  de += (477.0) * carg - 25.0 * sarg;\n-\n-  arg = 2.0 * el + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-31046.0 - 1.0 * t) * sarg + 131.0 * carg;\n-  de += (13238.0 - 11.0 * t) * carg + 59.0 * sarg;\n-\n-  arg = el + 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (28593.0) * sarg - carg;\n-  de += (-12338.0 + 10.0 * t) * carg - 3.0 * sarg;\n-\n-  arg = -el + 2.0 * f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (20441.0 + 21.0 * t) * sarg + 10.0 * carg;\n-  de += (-10758.0) * carg - 3.0 * sarg;\n-\n-  arg = 2.0 * el;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (29243.0) * sarg - 74.0 * carg;\n-  de += (-609.0) * carg + 13.0 * sarg;\n-\n-  arg = 2.0 * f;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (25887.0) * sarg - 66.0 * carg;\n-  de += (-550.0) * carg + 11.0 * sarg;\n-\n-  arg = elp + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-14053.0 - 25.0 * t) * sarg + 79.0 * carg;\n-  de += (8551.0 - 2.0 * t) * carg - 45.0 * sarg;\n-\n-  arg = -el + 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (15164.0 + 10.0 * t) * sarg + 11.0 * carg;\n-  de += (-8001.0) * carg - sarg;\n-\n-  arg = 2.0 * elp + 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-15794.0 + 72.0 * t) * sarg - 16.0 * carg;\n-  de += (6850.0 - 42.0 * t) * carg - 5.0 * sarg;\n-\n-  arg = -2.0 * f + 2.0 * d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (21783.0) * sarg + 13.0 * carg;\n-  de += (-167.0) * carg + 13.0 * sarg;\n-\n-  arg = el - 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-12873.0 - 10.0 * t) * sarg - 37.0 * carg;\n-  de += (6953.0) * carg - 14.0 * sarg;\n-\n-  arg = -elp + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-12654.0 + 11.0 * t) * sarg + 63.0 * carg;\n-  de += (6415.0) * carg + 26.0 * sarg;\n-\n-  arg = -el + 2.0 * f + 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-10204.0) * sarg + 25.0 * carg;\n-  de += (5222.0) * carg + 15.0 * sarg;\n-\n-  arg = 2.0 * elp;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (16707.0 - 85.0 * t) * sarg - 10.0 * carg;\n-  de += (168.0 - 1.0 * t) * carg + 10.0 * sarg;\n-\n-  arg = el + 2.0 * f + 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-7691.0) * sarg + 44.0 * carg;\n-  de += (3268.0) * carg + 19.0 * sarg;\n-\n-  arg = -2.0 * el + 2.0 * f;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-11024.0) * sarg - 14.0 * carg;\n-  de += (104.0) * carg + 2.0 * sarg;\n-\n-  arg = elp + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (7566.0 - 21.0 * t) * sarg - 11.0 * carg;\n-  de += (-3250.0) * carg - 5.0 * sarg;\n-\n-  arg = 2.0 * f + 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-6637.0 - 11.0 * t) * sarg + 25.0 * carg;\n-  de += (3353.0) * carg + 14.0 * sarg;\n-\n-  arg = -elp + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-7141.0 + 21.0 * t) * sarg + 8.0 * carg;\n-  de += (3070.0) * carg + 4.0 * sarg;\n-\n-  arg = 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-6302.0 - 11.0 * t) * sarg + 2.0 * carg;\n-  de += (3272.0) * carg + 4.0 * sarg;\n-\n-  arg = el + 2.0 * f - 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (5800.0 + 10.0 * t) * sarg + 2.0 * carg;\n-  de += (-3045.0) * carg - sarg;\n-\n-  arg = 2.0 * el + 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (6443.0) * sarg - 7.0 * carg;\n-  de += (-2768.0) * carg - 4.0 * sarg;\n-\n-  arg = -2.0 * el + 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-5774.0 - 11.0 * t) * sarg - 15.0 * carg;\n-  de += (3041.0) * carg - 5.0 * sarg;\n-\n-  arg = 2.0 * el + 2.0 * f + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-5350.0) * sarg + 21.0 * carg;\n-  de += (2695.0) * carg + 12.0 * sarg;\n-\n-  arg = -elp + 2.0 * f - 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-4752.0 - 11.0 * t) * sarg - 3.0 * carg;\n-  de += (2719.0) * carg - 3.0 * sarg;\n-\n-  arg = -2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-4940.0 - 11.0 * t) * sarg - 21.0 * carg;\n-  de += (2720.0) * carg - 9.0 * sarg;\n-\n-  arg = -el - elp + 2.0 * d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (7350.0) * sarg - 8.0 * carg;\n-  de += (-51.0) * carg + 4.0 * sarg;\n-\n-  arg = 2.0 * el - 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (4065.0) * sarg + 6.0 * carg;\n-  de += (-2206.0) * carg + sarg;\n-\n-  arg = el + 2.0 * d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (6579.0) * sarg - 24.0 * carg;\n-  de += (-199.0) * carg + 2.0 * sarg;\n-\n-  arg = elp + 2.0 * f - 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (3579.0) * sarg + 5.0 * carg;\n-  de += (-1900.0) * carg + sarg;\n-\n-  arg = el - elp;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (4725.0) * sarg - 6.0 * carg;\n-  de += (-41.0) * carg + 3.0 * sarg;\n-\n-  arg = -2.0 * el + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-3075.0) * sarg - 2.0 * carg;\n-  de += (1313.0) * carg - sarg;\n-\n-  arg = 3.0 * el + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2904.0) * sarg + 15.0 * carg;\n-  de += (1233.0) * carg + 7.0 * sarg;\n-\n-  arg = -elp + 2.0 * d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (4348.0) * sarg - 10.0 * carg;\n-  de += (-81.0) * carg + 2.0 * sarg;\n-\n-  arg = el - elp + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2878.0) * sarg + 8.0 * carg;\n-  de += (1232.0) * carg + 4.0 * sarg;\n-\n-  sarg = sin(d);\n-  carg = cos(d);\n-  dp += (-4230.0) * sarg + 5.0 * carg;\n-  de += (-20.0) * carg - 2.0 * sarg;\n-\n-  arg = -el - elp + 2.0 * f + 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2819.0) * sarg + 7.0 * carg;\n-  de += (1207.0) * carg + 3.0 * sarg;\n-\n-  arg = -el + 2.0 * f;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-4056.0) * sarg + 5.0 * carg;\n-  de += (40.0) * carg - 2.0 * sarg;\n-\n-  arg = -elp + 2.0 * f + 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2647.0) * sarg + 11.0 * carg;\n-  de += (1129.0) * carg + 5.0 * sarg;\n-\n-  arg = -2.0 * el + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-2294.0) * sarg - 10.0 * carg;\n-  de += (1266.0) * carg - 4.0 * sarg;\n-\n-  arg = el + elp + 2.0 * f + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (2481.0) * sarg - 7.0 * carg;\n-  de += (-1062.0) * carg - 3.0 * sarg;\n-\n-  arg = 2.0 * el + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (2179.0) * sarg - 2.0 * carg;\n-  de += (-1129.0) * carg - 2.0 * sarg;\n-\n-  arg = -el + elp + d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (3276.0) * sarg + carg;\n-  de += (-9.0) * carg;\n-\n-  arg = el + elp;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-3389.0) * sarg + 5.0 * carg;\n-  de += (35.0) * carg - 2.0 * sarg;\n-\n-  arg = el + 2.0 * f;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (3339.0) * sarg - 13.0 * carg;\n-  de += (-107.0) * carg + sarg;\n-\n-  arg = -el + 2.0 * f - 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1987.0) * sarg - 6.0 * carg;\n-  de += (1073.0) * carg - 2.0 * sarg;\n-\n-  arg = el + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1981.0) * sarg;\n-  de += (854.0) * carg;\n-\n-  arg = -el + d;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (4026.0) * sarg - 353.0 * carg;\n-  de += (-553.0) * carg - 139.0 * sarg;\n-\n-  arg = 2.0 * f + d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1660.0) * sarg - 5.0 * carg;\n-  de += (-710.0) * carg - 2.0 * sarg;\n-\n-  arg = -el + 2.0 * f + 4.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1521.0) * sarg + 9.0 * carg;\n-  de += (647.0) * carg + 4.0 * sarg;\n-\n-  arg = -el + elp + d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1314.0) * sarg;\n-  de += (-700.0) * carg;\n-\n-  arg = -2.0 * elp + 2.0 * f - 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1283.0) * sarg;\n-  de += (672.0) * carg;\n-\n-  arg = el + 2.0 * f + 2.0 * d + om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (-1331.0) * sarg + 8.0 * carg;\n-  de += (663.0) * carg + 4.0 * sarg;\n-\n-  arg = -2.0 * el + 2.0 * f + 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1383.0) * sarg - 2.0 * carg;\n-  de += (-594.0) * carg - 2.0 * sarg;\n-\n-  arg = -el + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1405.0) * sarg + 4.0 * carg;\n-  de += (-610.0) * carg + 2.0 * sarg;\n-\n-  arg = el + elp + 2.0 * f - 2.0 * d + 2.0 * om;\n-  sarg = sin(arg);\n-  carg = cos(arg);\n-  dp += (1290.0) * sarg;\n-  de += (-556.0) * carg;\n-\n-  dpsi = -0.000135 + (dp * 1.0e-7);\n-  deps = 0.000388 + (de * 1.0e-7);\n-\n-  double mobl = meanObliq(time);\n-  double tobl = mobl + (deps / 3600.0);\n-  double tt = time;\n-  double ee = dpsi * cos(radians(mobl)) / 15.0;\n-\n-  return Etilt(dpsi, deps, mobl, tobl, tt, ee);\n-}\n+x\n"
                },
                {
                    "date": 1642992096133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,6 +74,4 @@\n class Etilt {\n   Etilt(this.dpsi, this.deps, this.ee, this.mobl, this.tobl, this.tt);\n   double deps, dpsi, mobl, tobl, tt, ee;\n }\n-\n-x\n"
                },
                {
                    "date": 1642993213196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n // ------\n // ignore_for_file: prefer_typing_uninitialized_variables\n \n import 'dart:math';\n-import 'constants.dart';\n-import 'func.dart';\n+// import 'constants.dart';\n+// import 'func.dart';\n \n enum PrecessDir {\n   from2000, // 0\n   into2000 // 1\n"
                },
                {
                    "date": 1643002633093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,7 +71,7 @@\n   RotationMatrix(this.rot);\n }\n \n class Etilt {\n-  Etilt(this.dpsi, this.deps, this.ee, this.mobl, this.tobl, this.tt);\n-  double deps, dpsi, mobl, tobl, tt, ee;\n+  Etilt(this.dpsi, this.deps, this.mobl, this.tobl, this.ee, this.tt);\n+  double dpsi, deps, mobl, tobl, ee, tt;\n }\n"
                }
            ],
            "date": 1642126477179,
            "name": "Commit-0",
            "content": "// from math import sqrt, sin, cos, radians\n// import enum\n\n// class EclipticCoordinates:\n//     \"\"\"Ecliptic angular and Cartesian coordinates.\"\"\"\n\n//     def __init__(self, vec, elat, elon):\n//         self.vec = vec\n//         self.elat = elat\n//         self.elon = elon\n\n// class PrecessDir(enum.Enum):\n//     From2000 = 0\n//     Into2000 = 1\n\n// class Body(enum.Enum):\n//     Invalid = -1\n//     Mercury = 0\n//     Venus = 1\n//     Earth = 2\n//     Mars = 3\n//     Jupiter = 4\n//     Saturn = 5\n//     Uranus = 6\n//     Neptune = 7\n//     Pluto = 8\n//     Sun = 9\n//     Moon = 10\n//     EMB = 11    # EMB: The Earth/Moon Barycenter.\n//     SSB = 12    # SSB: The Solar System Barycenter.\n\n// class Observer:\n//     \"\"\"Represents the geographic location of an observer on the surface of the Earth.\"\"\"\n\n//     def __init__(self, latitude, longitude, height=0.0):\n//         self.latitude = latitude\n//         self.longitude = longitude\n//         self.height = height  # можно убрать и изменить ParseArgs\n\n// class Vector:\n//     \"\"\"A Cartesian vector with 3 space coordinates and 1 time coordinate. \"\"\"\n\n//     def __init__(self, x, y, z, t):\n//         self.x = x\n//         self.y = y\n//         self.z = z\n//         self.t = t\n\n//     def Length(self):\n//         \"\"\"Returns the length of the vector in AU.\"\"\"\n//         return sqrt(self.x**2 + self.y**2 + self.z**2)\n\n// class StateVector:\n//     \"\"\"A combination of a position vector, a velocity vector, and a time. \"\"\"\n\n//     def __init__(self, x, y, z, vx, vy, vz, t):\n//         self.x = x\n//         self.y = y\n//         self.z = z\n//         self.vx = vx\n//         self.vy = vy\n//         self.vz = vz\n//         self.t = t\n\n// class TerseVector:\n//     def __init__(self, x, y, z):\n//         self.x = x\n//         self.y = y\n//         self.z = z\n\n//     def ToAstroVector(self, time):\n//         '''Convert _TerseVector object to Vector object.'''\n//         return Vector(self.x, self.y, self.z, time)\n\n//     def quadrature(self):\n//         '''Return magnitude squared of this vector.'''\n//         return self.x**2 + self.y**2 + self.z**2\n\n//     def mean(self, other):\n//         '''Return the average of this vector and another vector.'''\n//         return TerseVector((self.x + other.x)/2.0, (self.y + other.y)/2.0, (self.z + other.z)/2.0)\n\n//     def __add__(self, other):\n//         return TerseVector(self.x + other.x, self.y + other.y, self.z + other.z)\n\n//     def __sub__(self, other):\n//         return TerseVector(self.x - other.x, self.y - other.y, self.z - other.z)\n\n//     def __mul__(self, scalar):\n//         return TerseVector(scalar * self.x, scalar * self.y, scalar * self.z)\n\n//     def __rmul__(self, scalar):\n//         return TerseVector(scalar * self.x, scalar * self.y, scalar * self.z)\n\n//     def __truediv__(self, scalar):\n//         return TerseVector(self.x / scalar, self.y / scalar, self.z / scalar)\n\n\n// class RotationMatrix:\n//     \"\"\"Contains a rotation matrix that can be used to transform one\n//     coordinate system into another.\n//     ----------\n//     rot : float[3][3]\n//         A normalized 3x3 rotation matrix.\n//     \"\"\"\n\n//     def __init__(self, rot):\n//         self.rot = rot\n\n\n// class body_grav_calc_t:\n//     def __init__(self, tt, r, v, a):\n//         self.tt = tt    # J2000 terrestrial time [days]\n//         self.r = r      # position [au]\n//         self.v = v      # velocity [au/day]\n//         self.a = a      # acceleration [au/day^2]\n\n// class grav_sim_t:\n//     def __init__(self, bary, grav):\n//         self.bary = bary\n//         self.grav = grav\n\n// class body_state_t:\n//     def __init__(self, tt, r, v):\n//         self.tt = tt\n//         self.r = r\n//         self.v = v\n\n\n"
        }
    ]
}